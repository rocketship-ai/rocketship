#!/bin/bash
# Rocketship Multi-Stack CLI
# Auto-detects git worktree and manages isolated Docker environments

set -e

# Get the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source utilities
source "$SCRIPT_DIR/stack-utils.sh"

# Function to show usage
usage() {
    echo "🚀 Rocketship Multi-Stack CLI"
    echo ""
    echo "Usage: $0 <command> [arguments...]"
    echo ""
    echo "Commands:"
    echo "  init                    Initialize stack for current worktree"
    echo "  start                   Start the current stack"
    echo "  stop                    Stop the current stack"
    echo "  restart                 Restart the current stack"
    echo "  status                  Show status of current stack"
    echo "  info                    Show detailed stack information"
    echo "  logs [service]          Show logs (optionally for specific service)"
    echo "  clean                   Stop and remove all containers and volumes"
    echo ""
    echo "Test Commands:"
    echo "  validate <file>         Validate test file"
    echo "  run [options]           Run tests (pass options to rocketship CLI)"
    echo "  list                    List test runs"
    echo "  get <run-id>            Get test run details"
    echo ""
    echo "Examples:"
    echo "  $0 init                 # Initialize environment for current worktree"
    echo "  $0 start                # Start the stack"
    echo "  $0 run -f test.yaml     # Run tests"
    echo "  $0 status               # Check stack status"
    echo "  $0 logs engine          # Show engine logs"
    echo ""
    echo "The CLI auto-detects your current git worktree and manages an isolated"
    echo "Docker environment with unique ports to avoid conflicts."
    exit 1
}

# Function to check if stack is initialized
ensure_initialized() {
    local stack_name=$(get_stack_name)
    
    if needs_initialization "$stack_name"; then
        log_error "Stack not initialized for current worktree."
        log_info "Run '$0 init' first to set up the environment."
        exit 1
    fi
}

# Function to ensure stack is running
ensure_running() {
    local stack_name=$(get_stack_name)
    
    if ! is_stack_running "$stack_name"; then
        log_error "Stack '$stack_name' is not running."
        log_info "Run '$0 start' to start the stack."
        exit 1
    fi
}

# Command functions
cmd_init() {
    exec "$SCRIPT_DIR/init-stack.sh" "$@"
}

cmd_start() {
    ensure_initialized
    
    local stack_name=$(get_stack_name)
    local env_file=".env.${stack_name}"
    
    log_info "Starting Rocketship stack: $stack_name"
    
    cd "$SCRIPT_DIR"
    docker-compose --env-file "$env_file" up -d
    
    log_success "Stack started successfully!"
    
    # Show access information
    local ports_info=$(calculate_ports "$stack_name")
    local temporal_ui_port=$(echo "$ports_info" | grep TEMPORAL_UI_PORT | cut -d'=' -f2)
    local engine_port=$(echo "$ports_info" | grep ENGINE_PORT | cut -d'=' -f2)
    
    echo ""
    log_info "Access Points:"
    echo "  📱 Temporal UI: http://localhost:${temporal_ui_port}"
    echo "  🔧 Engine API: localhost:${engine_port}"
}

cmd_stop() {
    ensure_initialized
    
    local stack_name=$(get_stack_name)
    local env_file=".env.${stack_name}"
    
    log_info "Stopping Rocketship stack: $stack_name"
    
    cd "$SCRIPT_DIR"
    docker-compose --env-file "$env_file" down
    
    log_success "Stack stopped successfully!"
}

cmd_restart() {
    cmd_stop
    cmd_start
}

cmd_status() {
    ensure_initialized
    
    local stack_name=$(get_stack_name)
    local status=$(get_stack_status "$stack_name")
    
    echo "📊 Stack Status: $stack_name"
    echo "   Status: $status"
    echo ""
    
    if [[ "$status" != "stopped" ]]; then
        local project_name="rocketship-${stack_name}"
        docker ps --filter "name=${project_name}" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    else
        log_warn "Stack is not running. Use '$0 start' to start it."
    fi
}

cmd_info() {
    local stack_name=$(get_stack_name)
    show_stack_info "$stack_name"
    
    echo ""
    echo "🏗️  Environment:"
    if env_file_exists "$stack_name"; then
        log_success "Initialized (.env.${stack_name})"
    else
        log_warn "Not initialized - run '$0 init'"
    fi
    
    local status=$(get_stack_status "$stack_name")
    echo "   Status: $status"
}

cmd_logs() {
    ensure_initialized
    
    local stack_name=$(get_stack_name)
    local env_file=".env.${stack_name}"
    local service="$1"
    
    cd "$SCRIPT_DIR"
    
    if [[ -n "$service" ]]; then
        log_info "Showing logs for service: $service"
        docker-compose --env-file "$env_file" logs -f "$service"
    else
        log_info "Showing logs for all services"
        docker-compose --env-file "$env_file" logs -f
    fi
}

cmd_clean() {
    ensure_initialized
    
    local stack_name=$(get_stack_name)
    local env_file=".env.${stack_name}"
    
    log_warn "This will stop and remove all containers and volumes for stack: $stack_name"
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Cleaning stack: $stack_name"
        
        cd "$SCRIPT_DIR"
        docker-compose --env-file "$env_file" down -v --remove-orphans
        
        log_success "Stack cleaned successfully!"
    else
        log_info "Operation cancelled."
    fi
}

# Test command functions
cmd_validate() {
    ensure_initialized
    ensure_running
    
    local stack_name=$(get_stack_name)
    run_cli_command validate "$@"
}

cmd_run() {
    ensure_initialized
    ensure_running
    
    local stack_name=$(get_stack_name)
    run_cli_command run "$@"
}

cmd_list() {
    ensure_initialized
    ensure_running
    
    local stack_name=$(get_stack_name)
    run_cli_command list "$@"
}

cmd_get() {
    ensure_initialized
    ensure_running
    
    local stack_name=$(get_stack_name)
    run_cli_command get "$@"
}

# Function to run CLI commands in container
run_cli_command() {
    local command="$1"
    shift
    
    local stack_name=$(get_stack_name)
    local network="rocketship-${stack_name}-network"
    local engine_host="rocketship-${stack_name}-engine-1:7700"
    local image="rocketship-cli:${stack_name}"
    
    # Build CLI image if it doesn't exist
    if ! docker image inspect "$image" > /dev/null 2>&1; then
        log_info "Building Rocketship CLI image..."
        docker build -f "$SCRIPT_DIR/Dockerfile.cli" -t "$image" "$SCRIPT_DIR/.." || {
            log_error "Failed to build CLI image"
            exit 1
        }
    fi
    
    # Determine if we need engine host parameter
    local engine_param=""
    case "$command" in
        run|get|list|start|stop)
            engine_param="--engine $engine_host"
            ;;
    esac
    
    # Run the command
    docker run --rm \
        --network "$network" \
        -v "$(pwd)":/workspace \
        -w /workspace \
        "$image" "$command" "$@" $engine_param
}

# Main command dispatcher
main() {
    if [[ $# -eq 0 ]]; then
        usage
    fi
    
    local command="$1"
    shift
    
    case "$command" in
        init)
            cmd_init "$@"
            ;;
        start)
            cmd_start "$@"
            ;;
        stop)
            cmd_stop "$@"
            ;;
        restart)
            cmd_restart "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        info)
            cmd_info "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        clean)
            cmd_clean "$@"
            ;;
        validate)
            cmd_validate "$@"
            ;;
        run)
            cmd_run "$@"
            ;;
        list)
            cmd_list "$@"
            ;;
        get)
            cmd_get "$@"
            ;;
        -h|--help|help)
            usage
            ;;
        *)
            log_error "Unknown command: $command"
            echo ""
            usage
            ;;
    esac
}

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi