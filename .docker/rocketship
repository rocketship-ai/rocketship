#!/bin/bash
# Rocketship Multi-Stack CLI - Simplified
# Auto-detects git worktree and manages isolated Docker environments

set -e

# Get the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source utilities
source "$SCRIPT_DIR/stack-utils.sh"

# Function to show usage
usage() {
    echo "üöÄ Rocketship Multi-Stack CLI"
    echo ""
    echo "Usage: $0 <command> [arguments...]"
    echo ""
    echo "Commands:"
    echo "  init                    Initialize stack for current worktree"
    echo "  start                   Start the current stack"
    echo "  stop                    Stop the current stack"
    echo "  logs [service]          Show recent logs (never hangs)"
    echo "  clean                   Stop and remove all containers and volumes"
    echo ""
    echo "Examples:"
    echo "  $0 init                 # Initialize environment for current worktree"
    echo "  $0 start                # Start the stack"
    echo "  $0 stop                 # Stop the stack"
    echo "  $0 logs engine          # Show recent engine logs"
    echo "  $0 clean                # Complete cleanup"
    echo ""
    echo "After starting, use rocketship CLI directly with profiles:"
    echo "  rocketship profile list                    # See available profiles"
    echo "  rocketship run -f test.yaml                # Run tests"
    echo "  rocketship team list                       # Manage teams"
    echo ""
    echo "The CLI auto-detects your current git worktree and manages an isolated"
    echo "Docker environment with unique ports to avoid conflicts."
    exit 1
}

# Function to check if stack is initialized
ensure_initialized() {
    local stack_name=$(get_stack_name)
    
    if needs_initialization "$stack_name"; then
        log_error "Stack not initialized for current worktree."
        log_info "Run '$0 init' first to set up the environment."
        exit 1
    fi
}

# Command functions
cmd_init() {
    exec "$SCRIPT_DIR/init-stack.sh" "$@"
}

cmd_start() {
    ensure_initialized
    
    local stack_name=$(get_stack_name)
    local env_file=".env.${stack_name}"
    
    log_info "Starting Rocketship stack: $stack_name"
    
    cd "$SCRIPT_DIR"
    docker-compose --env-file "$env_file" up -d
    
    log_success "Stack started successfully!"
    
    # Show access information
    local ports_info=$(calculate_ports "$stack_name")
    local temporal_ui_port=$(echo "$ports_info" | grep TEMPORAL_UI_PORT | cut -d'=' -f2)
    local engine_port=$(echo "$ports_info" | grep ENGINE_PORT | cut -d'=' -f2)
    
    echo ""
    log_info "Access Points:"
    echo "  üì± Temporal UI: http://localhost:${temporal_ui_port}"
    echo "  üîß Engine API: localhost:${engine_port}"
    echo ""
    log_info "Next Steps:"
    echo "  rocketship profile list    # Check your profiles"
    echo "  rocketship auth login      # Authenticate if needed"
    echo "  rocketship run -f test.yaml # Run tests"
}

cmd_stop() {
    ensure_initialized
    
    local stack_name=$(get_stack_name)
    local env_file=".env.${stack_name}"
    
    log_info "Stopping Rocketship stack: $stack_name"
    
    cd "$SCRIPT_DIR"
    docker-compose --env-file "$env_file" down
    
    log_success "Stack stopped successfully!"
}

cmd_logs() {
    ensure_initialized
    
    local stack_name=$(get_stack_name)
    local env_file=".env.${stack_name}"
    local service="$1"
    
    cd "$SCRIPT_DIR"
    
    if [[ -n "$service" ]]; then
        log_info "Showing recent logs for service: $service"
        docker-compose --env-file "$env_file" logs --tail=100 "$service"
    else
        log_info "Showing recent logs for all services"
        docker-compose --env-file "$env_file" logs --tail=50
    fi
}

cmd_clean() {
    ensure_initialized
    
    local stack_name=$(get_stack_name)
    local env_file=".env.${stack_name}"
    
    log_warn "üßπ COMPLETE ROCKETSHIP CLEANUP"
    log_warn "Removing ALL rocketship data from your system:"
    echo "  ‚Ä¢ Docker containers and volumes for stack: $stack_name"
    echo "  ‚Ä¢ CLI configuration and profiles (~/.rocketship/)"
    echo "  ‚Ä¢ HTTPS certificates (~/.rocketship/certs/)"
    echo "  ‚Ä¢ Stored authentication tokens (keyring)"
    echo "  ‚Ä¢ Rocketship binary executable"
    echo "  ‚Ä¢ Build artifacts and cache"
    echo "  ‚Ä¢ Environment variables (ROCKETSHIP_*)"
    echo "  ‚Ä¢ Docker images"
    echo ""
    
    log_info "üöÄ Starting complete rocketship cleanup..."
        
        # 1. Clean Docker stack
        log_info "üê≥ Cleaning Docker stack: $stack_name"
        cd "$SCRIPT_DIR"
        docker-compose --env-file "$env_file" down -v --remove-orphans 2>/dev/null || true
        
        # 2. Clean CLI configuration and profiles
        if [ -d "$HOME/.rocketship" ]; then
            log_info "üóÇÔ∏è  Removing CLI configuration and profiles"
            rm -rf "$HOME/.rocketship"
        fi
        
        # 3. Clean certificates
        if [ -d "$HOME/.rocketship/certs" ]; then
            log_info "üîê Removing HTTPS certificates"
            rm -rf "$HOME/.rocketship/certs"
        fi
        
        # 4. Clean keyring tokens (attempt different methods)
        log_info "üîë Cleaning authentication tokens"
        # macOS keychain
        if command -v security >/dev/null 2>&1; then
            security delete-generic-password -s "rocketship" 2>/dev/null || true
            security delete-generic-password -s "rocketship-profile-local" 2>/dev/null || true  
            security delete-generic-password -s "rocketship-profile-self-hosted" 2>/dev/null || true
            security delete-generic-password -s "rocketship-profile-cloud" 2>/dev/null || true
        fi
        # Linux keyring
        if command -v secret-tool >/dev/null 2>&1; then
            secret-tool clear service rocketship 2>/dev/null || true
        fi
        
        # 5. Remove rocketship binary
        log_info "üóëÔ∏è  Removing rocketship executable"
        # Check common locations
        local binary_locations=(
            "/usr/local/bin/rocketship"
            "$HOME/go/bin/rocketship"
            "$GOPATH/bin/rocketship"
            "$(command -v rocketship 2>/dev/null)"
        )
        
        for location in "${binary_locations[@]}"; do
            if [ -n "$location" ] && [ -f "$location" ]; then
                rm -f "$location" 2>/dev/null || true
                log_info "  ‚úì Removed: $location"
            fi
        done
        
        # 6. Clean build artifacts
        log_info "üßπ Cleaning build artifacts"
        cd "$SCRIPT_DIR/.."
        if [ -d "bin" ]; then
            rm -rf bin/
        fi
        if [ -d "tmp" ]; then
            rm -rf tmp/  
        fi
        if [ -d ".docker/.env.*" ]; then
            rm -f .docker/.env.*
        fi
        
        # 7. Clean environment variables (create unset script)
        log_info "üåç Creating environment variable cleanup script"
        local env_vars_to_clean=($(env | grep '^ROCKETSHIP_' | cut -d'=' -f1))
        local unset_script="$SCRIPT_DIR/../tmp_unset_rocketship.sh"
        
        if [ ${#env_vars_to_clean[@]} -gt 0 ]; then
            echo "#!/bin/bash" > "$unset_script"
            echo "# Auto-generated script to unset ROCKETSHIP environment variables" >> "$unset_script"
            echo "# Usage: source $unset_script" >> "$unset_script"
            echo "" >> "$unset_script"
            
            for var in "${env_vars_to_clean[@]}"; do
                echo "unset $var" >> "$unset_script"
                log_info "  ‚úì Will unset: $var"
            done
            
            chmod +x "$unset_script"
            log_warn "üìù Environment variable cleanup script created:"
            log_warn "   Run: source $unset_script"
            log_warn "   (Script will auto-delete after use)"
            
            # Add self-deletion to the script
            echo "" >> "$unset_script"
            echo "# Self-delete this script after use" >> "$unset_script"
            echo "rm -f \"$unset_script\"" >> "$unset_script"
        else
            log_info "  ‚úì No ROCKETSHIP_ environment variables found"
        fi
        
        # 8. Clean Docker images
        log_info "üóëÔ∏è  Removing rocketship Docker images"
        docker images --format "table {{.Repository}}:{{.Tag}}" | grep rocketship | awk '{print $1}' | xargs -r docker rmi -f 2>/dev/null || true
        
        log_success "‚úÖ Complete rocketship cleanup finished!"
        log_info "üí° To reinstall: git clone, cd rocketship, make install"
        
        # Check if unset script was created
        local unset_script="$SCRIPT_DIR/../tmp_unset_rocketship.sh"
        if [ -f "$unset_script" ]; then
            echo ""
            log_warn "üåç IMPORTANT: To complete environment cleanup, run:"
            log_warn "   source $unset_script"
        fi
}

# Main command dispatcher
main() {
    if [[ $# -eq 0 ]]; then
        usage
    fi
    
    local command="$1"
    shift
    
    case "$command" in
        init)
            cmd_init "$@"
            ;;
        start)
            cmd_start "$@"
            ;;
        stop)
            cmd_stop "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        clean)
            cmd_clean "$@"
            ;;
        -h|--help|help)
            usage
            ;;
        *)
            log_error "Unknown command: $command"
            echo ""
            log_info "Removed commands (use rocketship CLI directly):"
            echo "  restart  ‚Üí ./.docker/rocketship stop && ./.docker/rocketship start"
            echo "  status   ‚Üí docker ps | grep rocketship"
            echo "  info     ‚Üí rocketship profile list"
            echo "  validate ‚Üí rocketship validate <file>"
            echo "  run      ‚Üí rocketship run [options]"
            echo "  list     ‚Üí rocketship list"
            echo "  get      ‚Üí rocketship get <run-id>"
            echo ""
            usage
            ;;
    esac
}

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi