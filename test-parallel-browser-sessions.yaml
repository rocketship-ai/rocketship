name: "Parallel Browser Sessions Test"
description: "Test 4 parallel browser sessions with different window sizes, each interweaving playwright and browser_use steps"

tests:
  - name: "Session 1: Mobile viewport (375x667)"
    cleanup:
      always:
        - name: "cleanup mobile browser"
          plugin: playwright
          config:
            role: stop
            session_id: "mobile-{{ .run.id }}"
    steps:
      - name: "start mobile browser"
        plugin: playwright
        config:
          role: start
          session_id: "mobile-{{ .run.id }}"
          headless: false
          window_width: 375
          window_height: 667

      - name: "playwright: navigate to example.com"
        plugin: playwright
        config:
          role: script
          session_id: "mobile-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("üì± Mobile browser (375x667) - Navigating to example.com...")
            page.goto("https://example.com")
            expect(page).to_have_url("https://example.com/")

            # Get viewport size to verify window size
            viewport = page.viewport_size
            print(f"Viewport: {viewport}")

            result = {
              "url": page.url,
              "viewport": str(viewport) if viewport else "not set"
            }
        save:
          - json_path: ".url"
            as: "mobile_url"

      - name: "browser_use: verify example.com on mobile"
        plugin: browser_use
        config:
          session_id: "mobile-{{ .run.id }}"
          task: |
            You are on example.com in a mobile viewport (375x667).
            Verify that the page has a heading "Example Domain" and report success.
          max_steps: 3
          use_vision: true
          llm:
            provider: "openai"
            model: "gpt-4o"
            config:
              OPENAI_API_KEY: "{{ .env.OPENAI_API_KEY }}"

      - name: "playwright: verify browser_use success"
        plugin: playwright
        config:
          role: script
          session_id: "mobile-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("‚úÖ Mobile session: browser_use completed successfully")
            print(f"URL from earlier step: {{ mobile_url }}")

            # Verify still on example.com
            expect(page).to_have_url("https://example.com/")
            expect(page.locator("h1")).to_have_text("Example Domain")

            result = {"mobile_test": "passed"}

  - name: "Session 2: Tablet viewport (768x1024)"
    cleanup:
      always:
        - name: "cleanup tablet browser"
          plugin: playwright
          config:
            role: stop
            session_id: "tablet-{{ .run.id }}"
    steps:
      - name: "start tablet browser"
        plugin: playwright
        config:
          role: start
          session_id: "tablet-{{ .run.id }}"
          headless: false
          window_width: 768
          window_height: 1024

      - name: "playwright: navigate to IANA"
        plugin: playwright
        config:
          role: script
          session_id: "tablet-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("üì± Tablet browser (768x1024) - Navigating to IANA...")
            page.goto("https://www.iana.org/")
            expect(page).to_have_url("https://www.iana.org/")

            viewport = page.viewport_size
            print(f"Viewport: {viewport}")

            result = {
              "viewport": str(viewport) if viewport else "not set"
            }

      - name: "browser_use: navigate to domains page"
        plugin: browser_use
        config:
          session_id: "tablet-{{ .run.id }}"
          task: |
            You are on the IANA homepage.
            Find and click on the "Domain Names" link to navigate to the domain names page.
            Report success when you've successfully navigated to the domains page.
          max_steps: 5
          use_vision: true
          llm:
            provider: "openai"
            model: "gpt-4o"
            config:
              OPENAI_API_KEY: "{{ .env.OPENAI_API_KEY }}"

      - name: "playwright: verify navigation succeeded"
        plugin: playwright
        config:
          role: script
          session_id: "tablet-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("‚úÖ Tablet session: browser_use navigation completed")
            current_url = page.url
            print(f"Current URL: {current_url}")

            # Verify we navigated away from homepage
            assert "iana.org" in current_url, f"Still on IANA domain: {current_url}"

            result = {"tablet_test": "passed"}

  - name: "Session 3: Desktop viewport (1280x720)"
    cleanup:
      always:
        - name: "cleanup desktop browser"
          plugin: playwright
          config:
            role: stop
            session_id: "desktop-{{ .run.id }}"
    steps:
      - name: "start desktop browser"
        plugin: playwright
        config:
          role: start
          session_id: "desktop-{{ .run.id }}"
          headless: false
          window_width: 1280
          window_height: 720

      - name: "playwright: navigate to example.org"
        plugin: playwright
        config:
          role: script
          session_id: "desktop-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("üñ•Ô∏è  Desktop browser (1280x720) - Navigating to example.org...")
            page.goto("https://example.org")
            expect(page).to_have_url("https://example.org/")

            viewport = page.viewport_size
            print(f"Viewport: {viewport}")

            heading = page.locator("h1").first.inner_text()

            result = {
              "heading": heading,
              "url": page.url
            }
        save:
          - json_path: ".heading"
            as: "desktop_heading"

      - name: "browser_use: verify content"
        plugin: browser_use
        config:
          session_id: "desktop-{{ .run.id }}"
          task: |
            Verify that the main heading on the page says "{{ desktop_heading }}".
            If it matches, report success.
          max_steps: 3
          use_vision: true
          llm:
            provider: "openai"
            model: "gpt-4o"
            config:
              OPENAI_API_KEY: "{{ .env.OPENAI_API_KEY }}"

      - name: "playwright: final verification"
        plugin: playwright
        config:
          role: script
          session_id: "desktop-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("‚úÖ Desktop session: All steps completed successfully")
            expect(page).to_have_url("https://example.org/")

            result = {"desktop_test": "passed"}

  - name: "Session 4: Large desktop viewport (1920x1080)"
    cleanup:
      always:
        - name: "cleanup large desktop browser"
          plugin: playwright
          config:
            role: stop
            session_id: "large-desktop-{{ .run.id }}"
    steps:
      - name: "start large desktop browser"
        plugin: playwright
        config:
          role: start
          session_id: "large-desktop-{{ .run.id }}"
          headless: false
          window_width: 1920
          window_height: 1080

      - name: "playwright: navigate to wikipedia"
        plugin: playwright
        config:
          role: script
          session_id: "large-desktop-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("üñ•Ô∏è  Large desktop browser (1920x1080) - Navigating to Wikipedia...")
            page.goto("https://www.wikipedia.org/")

            viewport = page.viewport_size
            print(f"Viewport: {viewport}")

            # Get the search input
            search_input = page.locator("#searchInput")
            expect(search_input).to_be_visible()

            result = {"wikipedia_loaded": True}

      - name: "browser_use: search wikipedia"
        plugin: browser_use
        config:
          session_id: "large-desktop-{{ .run.id }}"
          task: |
            You are on Wikipedia's main page.
            Search for "Web browser" and click on the first search result.
            Report success when you've successfully navigated to the Web browser article.
          max_steps: 5
          use_vision: true
          llm:
            provider: "openai"
            model: "gpt-4o"
            config:
              OPENAI_API_KEY: "{{ .env.OPENAI_API_KEY }}"

      - name: "playwright: verify article loaded"
        plugin: playwright
        config:
          role: script
          session_id: "large-desktop-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("‚úÖ Large desktop session: Wikipedia search completed")
            current_url = page.url
            print(f"Current URL: {current_url}")

            # Verify we're on a Wikipedia article page
            assert "wikipedia.org/wiki" in current_url, f"Not on an article page: {current_url}"

            result = {"large_desktop_test": "passed"}
