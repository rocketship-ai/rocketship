name: "Playwright expect() Assertions - Passing Tests"
description: "Test Playwright's expect() API with various assertion types on IANA website"

tests:
  - name: "Test successful expect() assertions"
    cleanup:
      always:
        - name: "cleanup browser session"
          plugin: playwright
          config:
            role: stop
            session_id: "expect-test-{{ .run.id }}"
    steps:
      - name: "start browser session"
        plugin: playwright
        config:
          role: start
          session_id: "expect-test-{{ .run.id }}"
          headless: false

      - name: "test IANA homepage assertions"
        plugin: playwright
        config:
          role: script
          session_id: "expect-test-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("ðŸŽ¯ Navigating to IANA homepage...")
            page.goto("https://www.iana.org/")

            # Page URL assertion
            print("âœ… Testing page URL...")
            expect(page).to_have_url("https://www.iana.org/")

            # Page title assertion
            print("âœ… Testing page title...")
            expect(page).to_have_title("Internet Assigned Numbers Authority")

            # Main heading visibility and text
            print("âœ… Testing main heading...")
            main_heading = page.locator("h1")
            expect(main_heading).to_be_visible()
            expect(main_heading).to_contain_text("Internet Assigned Numbers Authority")

            # Navigation links visibility (use .first() to avoid strict mode violations)
            print("âœ… Testing navigation links...")
            domain_link = page.get_by_role("link", name="Domain Names").first
            expect(domain_link).to_be_visible()

            numbers_link = page.get_by_role("link", name="Number Resources").first
            expect(numbers_link).to_be_visible()

            protocols_link = page.get_by_role("link", name="Protocol Assignments").first
            expect(protocols_link).to_be_visible()

            # Section headings
            print("âœ… Testing section headings...")
            expect(page.locator("h2", has_text="Domain Names")).to_be_visible()
            expect(page.locator("h2", has_text="Number Resources")).to_be_visible()
            expect(page.locator("h2", has_text="Protocol Assignments")).to_be_visible()

            print("âœ… All homepage assertions passed!")
            result = {"status": "success", "page": "homepage"}

      - name: "test navigation and URL assertions"
        plugin: playwright
        config:
          role: script
          session_id: "expect-test-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect
            import re

            print("ðŸŽ¯ Testing navigation to About page...")

            # Click the About Us link
            about_link = page.get_by_role("link", name="About Us")
            expect(about_link).to_be_visible()
            about_link.click()

            # Assert URL changed to about page
            print("âœ… Testing About page URL...")
            expect(page).to_have_url(re.compile(r".*/about"))

            # Assert page title changed
            print("âœ… Testing About page title...")
            expect(page).to_have_title(re.compile(r".*About.*"))

            # Assert specific content exists
            print("âœ… Testing About page content...")
            expect(page.locator("text=PTI is responsible for")).to_be_visible()

            print("âœ… All navigation assertions passed!")
            result = {"status": "success", "page": "about"}

      - name: "test domains page assertions"
        plugin: playwright
        config:
          role: script
          session_id: "expect-test-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect
            import re

            print("ðŸŽ¯ Navigating to Domains page...")
            page.goto("https://www.iana.org/domains")

            # URL assertion
            print("âœ… Testing Domains page URL...")
            expect(page).to_have_url(re.compile(r".*/domains"))

            # Title assertion
            print("âœ… Testing Domains page title...")
            expect(page).to_have_title(re.compile(r".*Domain.*"))

            # Content assertions (use .first() to avoid strict mode violations)
            print("âœ… Testing Domains page content...")
            expect(page.locator("text=.arpa").first).to_be_visible()
            expect(page.locator("text=Root Zone").first).to_be_visible()

            print("âœ… All domains page assertions passed!")
            result = {"status": "success", "page": "domains"}
