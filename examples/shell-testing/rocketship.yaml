version: "v1.0.0"
name: "Shell Script Testing"
description: "Demonstrates shell script execution capabilities"

vars:
  project_name: "rocketship"
  build_target: "production"

tests:
  - name: "Basic Shell Commands"
    steps:
      - name: "Simple echo"
        plugin: script
        config:
          language: shell
          script: |
            echo "Hello from shell!"
            echo "Project: {{ .vars.project_name }}"
            echo "Target: {{ .vars.build_target }}"
        # Shell results are automatically saved as: stdout, stderr, exit_code, duration

      - name: "Environment check"
        plugin: script
        config:
          language: shell
          script: |
            echo "Current directory: $(pwd)"
            echo "User: $(whoami)"
            echo "Shell: $SHELL"
            echo "PATH: $PATH"

      - name: "File operations"
        plugin: script
        config:
          language: shell
          script: |
            # Create a temporary file
            echo "Test content from Rocketship" > /tmp/rocketship_test.txt
            
            # Read it back
            echo "File contents:"
            cat /tmp/rocketship_test.txt
            
            # Get file info
            ls -la /tmp/rocketship_test.txt
            
            # Clean up
            rm /tmp/rocketship_test.txt
            echo "File cleaned up"

  - name: "Variable Substitution Test"
    steps:
      - name: "Create config file"
        plugin: script
        config:
          language: shell
          script: |
            cat > /tmp/config.json << EOF
            {
              "project": "{{ .vars.project_name }}",
              "environment": "{{ .vars.build_target }}",
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            }
            EOF
            
            echo "Generated config file:"
            cat /tmp/config.json
        # Config content will be saved automatically

      - name: "Use environment variables from previous step"
        plugin: script
        config:
          language: shell
          script: |
            echo "Previous steps saved output as environment variables:"
            echo "Available ROCKETSHIP_ environment variables:"
            env | grep ROCKETSHIP_ | head -5
            
            # Clean up config file
            rm -f /tmp/config.json

  - name: "Build Simulation Test"
    steps:
      - name: "Simulate make build"
        plugin: script
        config:
          language: shell
          script: |
            echo "Starting build for {{ .vars.project_name }}..."
            
            # Simulate compilation steps
            for i in {1..3}; do
              echo "Compiling module $i..."
              sleep 0.1  # Small delay to simulate work
            done
            
            echo "Build completed successfully!"
            echo "Artifacts ready for {{ .vars.build_target }}"
        # Build results saved automatically

      - name: "Verify build"
        plugin: script
        config:
          language: shell
          script: |
            echo "âœ… Build verification step"
            echo "Previous step exit code: $ROCKETSHIP_EXIT_CODE"
            echo "Previous build completed successfully"

  - name: "Error Handling Test"
    steps:
      - name: "Command that should succeed"
        plugin: script
        config:
          language: shell
          script: |
            echo "This command will succeed"
            echo "Exit code will be 0"
            true  # This command always returns exit code 0

  - name: "Complex Pipeline Test"
    steps:
      - name: "Multi-stage pipeline"
        plugin: script
        config:
          language: shell
          script: |
            # Stage 1: Setup
            echo "=== Stage 1: Setup ==="
            PROJECT_DIR="/tmp/rocketship_pipeline"
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR"
            
            # Stage 2: Generate files
            echo "=== Stage 2: Generate files ==="
            echo "# {{ .vars.project_name }} README" > README.md
            echo "print('Hello from {{ .vars.project_name }}')" > app.py
            
            # Stage 3: Process files
            echo "=== Stage 3: Process files ==="
            echo "Files created:"
            ls -la
            
            echo "README content:"
            cat README.md
            
            # Stage 4: Cleanup
            echo "=== Stage 4: Cleanup ==="
            cd /tmp
            rm -rf "$PROJECT_DIR"
            echo "Pipeline completed successfully"
        # Pipeline results saved automatically as stdout, stderr, exit_code, duration