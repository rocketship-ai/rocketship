{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rocketship Documentation","text":"<p>Welcome to the Rocketship documentation! Rocketship is an open-source API testing framework designed for humans and agents.</p>"},{"location":"#what-is-rocketship","title":"What is Rocketship?","text":"<p>\ud83d\ude80 Rocketship is an open\u2011source testing framework that can verify complex, API-driven scenarios that are made by your customers\u2014 or your systems. Rocketship brings durable execution backed by Temporal to your testing infra, and offers extensible plugins so you can add the APIs and protocols that matter to you.</p> <p>Define your test scenarios as declarative YAML specs -&gt; and have Rocketship run them locally or in your cloud environment as deterministic workflows.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Rocketship CLI - Run the engine locally or connect to a remote address</li> <li>Deploy-Ready Images - Need long-running, highly-scalable tests? Or just want to save test history? Host Rocketship on your own infra</li> <li>Declarative YAML - Define your test scenarios as declarative YAML specs</li> <li>Durable Execution - Need a test step to retry? Or a test to run for 10 hours? No problem!</li> <li>Plugin Ecosystem - Add the APIs and protocols that matter to you</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Quick Start Guide</li> <li>Command Reference</li> <li>Contributing Guide</li> </ul>"},{"location":"contributing/","title":"Contributing to Rocketship","text":"<p>Thank you for your interest in contributing to Rocketship! We're excited to have you join our community. This document provides guidelines and instructions for contributing to the project.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/rocketship.git\ncd rocketship\n</code></pre> <p>Set up your development environment:</p> <pre><code>make dev-setup\n</code></pre>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":"<p>Create a new branch for your feature/fix:</p> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <p>Make your changes and ensure tests pass:</p> <pre><code>make test\nmake lint\n</code></pre> <p>Build and install your local changes:</p> <pre><code>make install    # Removes old executable and go installs the local version\n</code></pre> <p>Test your changes:</p> <pre><code># OPTION 1: this will start the local rocketship server, run all tests in the examples directory, and then stop the server\nrocketship run -ad examples\n\n# OPTION 2: run the test server in a separate session and then run the tests\nrocketship start server --local\n# in another session, run the test(s)\nrocketship run -f &lt;path/to/rocketship.yaml&gt;\n</code></pre> <p>Test Server for Development:</p> <p>Inside for-contributors/, you'll find a test HTTP server that you can run as an in-memory store to test changes. Make sure your rocketship.yaml files point to this server (localhost:8080):</p> <pre><code>cd ./for-contributors/test-server &amp;&amp; go run .\n</code></pre> <p>This will help you test your changes with an in-memory store that can preserve resources.</p>"},{"location":"contributing/#creating-plugins","title":"Creating Plugins","text":"<p>Rocketship's plugin system allows you to add support for new APIs and protocols. To create a new plugin:</p> <ol> <li>Add your plugin in <code>internal/plugins/</code></li> <li>Implement the required plugin interface</li> <li>Register your plugin in the plugin registry</li> <li>Add tests for your plugin</li> <li>Document your plugin's usage</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>If you're updating features or adding new ones, please update the documentation:</p> <ul> <li>Documentation is written in Markdown under <code>docs/src/</code></li> <li>Run the documentation server locally:</li> </ul> <pre><code>make docs-serve\n</code></pre> <p>View your changes at <code>http://localhost:8000</code></p>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow Go best practices and conventions</li> <li>Use <code>gofmt</code> to format your code</li> <li>Add comments for non-obvious code sections</li> <li>Write meaningful commit messages</li> </ul>"},{"location":"contributing/#development-tips","title":"Development Tips","text":"<ul> <li>Set the <code>ROCKETSHIP_LOG</code> env var to <code>DEBUG</code> to see more verbose logging</li> <li>Pre-commit hooks will automatically run linting and tests</li> <li>Always test your changes locally before submitting a PR</li> </ul>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>Update Default Version</p> <p>Before creating a release, update the default version in <code>internal/embedded/binaries.go</code>:</p> <pre><code># Example: For releasing v1.2.3\nsed -i '' 's/defaultVersion *= *\".*\"/defaultVersion = \"v1.2.3\"/' internal/embedded/binaries.go\ngit add internal/embedded/binaries.go\ngit commit -m \"chore: update default version to v1.2.3\"\ngit push\n</code></pre> <p>Create a Release</p> <p>Once changes are merged to main, a maintainer can create a new release:</p> <ul> <li>Go to GitHub Releases: https://github.com/rocketship-ai/rocketship/releases</li> <li>Click \"Draft a new release\"</li> <li>Create a new tag (e.g., <code>v1.2.3</code>) following semantic versioning</li> <li>Write release notes</li> <li>Publish release</li> </ul> <p>This will automatically:</p> <ul> <li>Create and push a Git tag</li> <li>Trigger the release workflow</li> <li>Build platform-specific binaries</li> <li>Attach binaries to the release</li> </ul> <p>Test Installation</p> <pre><code># Install released version\ngo install github.com/rocketship-ai/rocketship/cmd/rocketship@v1.2.3\n\n# Test basic functionality\nrocketship version\n</code></pre>"},{"location":"contributing/#release-artifacts","title":"Release Artifacts","text":"<p>Each release includes platform-specific binaries for:</p> <ul> <li>CLI (rocketship)</li> <li>Worker</li> <li>Engine</li> </ul> <p>Supported platforms:</p> <ul> <li>Linux (amd64, arm64)</li> <li>macOS (amd64, arm64)</li> <li>Windows (amd64)</li> </ul>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Open an issue on GitHub</li> <li>Reach out to me on LinkedIn</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to Rocketship, you agree that your contributions will be licensed under the MIT License.</p>"},{"location":"deploy-on-your-cloud/","title":"Deploy Rocketship on Your Cloud","text":"<p>Rocketship can run anywhere Kubernetes is available. The CLI embeds the engine and worker binaries for local auto mode, but real deployments separate the components and connect them to a Temporal cluster.</p> <p>This section outlines the supported deployment paths and what each delivers so you can pick the right starting point.</p>"},{"location":"deploy-on-your-cloud/#core-components","title":"Core Components","text":"<p>Every deployment provisions:</p> <ol> <li>Temporal \u2013 Durable workflow orchestration. The Helm chart from Temporal provides a ready-made stack with Cassandra, Elasticsearch, and UI components for development and staging clusters.</li> <li>Rocketship Engine \u2013 gRPC API that accepts suite executions, manages profiles, and streams results.</li> <li>Rocketship Worker \u2013 Executes plugin steps inside Temporal workflows.</li> </ol> <p>Both Rocketship services require the Temporal frontend host and namespace; everything else (ingress, TLS, auth) is layered on top through Kubernetes objects.</p>"},{"location":"deploy-on-your-cloud/#deployment-paths","title":"Deployment Paths","text":"Scenario Guide Highlights Local iteration Run on Minikube Single script (<code>scripts/install-minikube.sh</code>) that starts Minikube, installs Temporal, builds local engine/worker images, and deploys the Rocketship chart. Great for fast feedback and integration testing inside CI. Production-ready proof of concept Deploy on DigitalOcean Kubernetes Walks through preparing a managed cluster, wiring an NGINX ingress with TLS, publishing custom images to DigitalOcean Container Registry, and installing the Rocketship + Temporal Helm releases. Web UI with OIDC front-door Deploy on DigitalOcean Kubernetes Layer oauth2-proxy + NGINX annotations. Use <code>values-github-selfhost.yaml</code> + <code>values-github-web.yaml</code> for GitHub device-flow reuse, or <code>values-oidc-web.yaml</code> to integrate with an external IdP. <p>Looking for another cloud? The DigitalOcean flow covers all building blocks: registry authentication, TLS secrets, ingress, and chart overrides. Adapt the same pattern for EKS, GKE, AKS, or on-prem clusters by swapping provider-specific commands. If you do not already operate Postgres, enable the bundled Bitnami dependency with <code>--set postgres.enabled=true</code> and provide a password via <code>postgres.auth.password</code>.</p>"},{"location":"deploy-on-your-cloud/#after-deployment","title":"After Deployment","text":"<ul> <li>Use <code>rocketship profile create</code> and <code>rocketship profile use</code> to store the engine endpoint (<code>grpcs://\u2026</code>) and default to TLS where appropriate.</li> <li>Inject a secret token into the engine (<code>ROCKETSHIP_ENGINE_TOKEN</code>) and export the same value as <code>ROCKETSHIP_TOKEN</code> in the CLI/CI environment so gRPC calls are authenticated.</li> <li>Alternatively, set <code>ROCKETSHIP_AUTH_MODE=oidc</code> with the issuer/client metadata so the engine validates JWTs. Team members then run <code>rocketship login</code> (device flow) or <code>rocketship status</code> to manage their own credentials.</li> <li>When enabling the GitHub auth broker, provision a Postgres instance and pass the DSN via <code>auth.broker.database.secretName</code>/<code>secretKey</code>, and generate a 32-byte base64 <code>ROCKETSHIP_BROKER_REFRESH_KEY</code> secret. The Helm presets reference the <code>globalbank-auth-broker-database</code> and <code>globalbank-auth-broker-secrets</code> names shown in the DigitalOcean guide.</li> <li>Run suites with <code>rocketship run --engine</code>. When profiles are active, the CLI resolves the engine address automatically.</li> <li>Expose Prometheus/Grafana, RBAC, and authentication once the core stack is stable (tracked for future epics).</li> </ul> <p>Once the core stack is running, you can optionally apply the OIDC preset to front any HTTP/UI endpoints with your IdP before traffic reaches Rocketship.</p> <p>First-time logins on a fresh cluster return access tokens with a <code>pending</code> role. Use the bearer token to call <code>POST /api/orgs</code> on the auth broker to create the first organisation/project, or invite the user via the forthcoming org management endpoints.</p>"},{"location":"examples/","title":"Examples","text":"<p>Rocketship comes with example test suites that demonstrate different features and use cases. Each example includes detailed explanations and ready-to-use test specifications.</p>"},{"location":"examples/#available-examples","title":"Available Examples","text":""},{"location":"examples/#http-testing","title":"HTTP Testing","text":"<ul> <li>Request Chaining &amp; Delays - Learn how to chain HTTP requests, handle responses, and use delays in your test suites</li> </ul>"},{"location":"examples/#variables","title":"Variables","text":"<ul> <li>Variables Overview - Quick comparison of environment, config, and runtime variables with decision guide</li> <li>Environment Variables - Detailed guide for secrets and environment-specific configuration</li> <li>Config &amp; Runtime Variables - Detailed guide for test parameters and runtime values</li> </ul>"},{"location":"examples/#database-testing","title":"Database Testing","text":"<ul> <li>SQL Testing - Learn how to test database operations with PostgreSQL, MySQL, SQLite, and SQL Server</li> </ul>"},{"location":"examples/#scripting-custom-logic","title":"Scripting &amp; Custom Logic","text":"<ul> <li>Custom Scripting - Learn how to add custom JavaScript logic to your test suites</li> </ul>"},{"location":"examples/#debugging-logging","title":"Debugging &amp; Logging","text":"<ul> <li>Log Plugin - Learn how to add custom logging messages to your test suites for debugging and monitoring</li> </ul>"},{"location":"examples/#running-the-examples","title":"Running the Examples","text":"<p>The examples use the hosted test server at <code>tryme.rocketship.sh</code>. This server provides a simple HTTP API that you can use to experiment with Rocketship's features. Details:</p> <ul> <li>Test CRUD operations for a resource type</li> <li>Resources are isolated based off a session header</li> <li>FYI: Resource cleanup is done hourly (every :00)</li> </ul> <p>Then, run an example:</p> <pre><code># Run the request chaining example\nrocketship run -af examples/request-chaining/rocketship.yaml\n\n# Run the configuration variables example\nrocketship run -af examples/config-variables/rocketship.yaml\n\n# Run with variable overrides\nrocketship run -af examples/config-variables/rocketship.yaml --var environment=production\n\n# Run the custom scripting example\nrocketship run -af examples/custom-scripting/rocketship.yaml\n\n# Run the log plugin example\nrocketship run -af examples/simple-log/rocketship.yaml\n</code></pre>"},{"location":"examples/#database-examples","title":"Database Examples","text":"<p>You have two options for running the SQL examples:</p> <ol> <li>Minikube stack \u2013 run <code>scripts/install-minikube.sh</code>, port-forward the engine, then execute <code>rocketship run -af examples/sql-testing/rocketship.yaml</code>.</li> <li>Standalone Docker containers \u2013 start databases locally:    <pre><code>docker run --rm -d --name rocketship-postgres      -e POSTGRES_PASSWORD=testpass      -e POSTGRES_DB=testdb      -p 5433:5432      postgres:13\n\ndocker run --rm -d --name rocketship-mysql      -e MYSQL_ROOT_PASSWORD=testpass      -e MYSQL_DATABASE=testdb      -p 3306:3306      mysql:8.0\n</code></pre>    Then configure the DSNs in <code>examples/sql-testing/rocketship.yaml</code> to point to the exposed ports. Stop the containers when you're done:    <pre><code>docker stop rocketship-postgres rocketship-mysql\n</code></pre></li> </ol> <p>You can find the test server's source code in the <code>for-contributors/test-server</code> directory.</p>"},{"location":"installation/","title":"Installation","text":"<p>Rocketship ships prebuilt binaries for macOS, Linux, and Windows. Use the Homebrew tap on macOS for the smoothest experience, or the portable installer script everywhere else. This page walks through the supported options, prerequisites, and post-install checks.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>To run the Rocketship engine locally you need Temporal:</p> <pre><code>brew install temporal\n</code></pre> <p>On Linux follow Temporal's official installation guide. If you only connect to a remote Rocketship deployment, Temporal is optional.</p>"},{"location":"installation/#macos-recommended-via-homebrew","title":"macOS (recommended via Homebrew)","text":"<pre><code>brew tap rocketship-ai/tap\nbrew install rocketship\n</code></pre> <p>The formula installs the latest tagged CLI, handles upgrades with <code>brew upgrade rocketship</code>, and keeps the binary inside your Homebrew prefix.</p>"},{"location":"installation/#linux-and-macos-portable-installer","title":"Linux and macOS (portable installer)","text":"<p>For environments without Homebrew run the installer script:</p> <pre><code>curl -fsSL https://raw.githubusercontent.com/rocketship-ai/rocketship/main/scripts/install.sh | bash\n</code></pre> <p>The script:</p> <ul> <li>Detects your OS/architecture and downloads the matching release asset</li> <li>Verifies the binary against the published <code>checksums.txt</code></li> <li>Installs to <code>~/.local/bin/rocketship</code> (override via <code>ROCKETSHIP_BIN_DIR</code>)</li> <li>Removes macOS quarantine attributes when needed</li> <li>Appends <code>~/.local/bin</code> to your shell <code>PATH</code> if it isn't already there</li> </ul> <p>Re-run the script to pick up future releases. To pin a version, set <code>ROCKETSHIP_VERSION=v0.5.23</code> (for example) before invoking the script.</p>"},{"location":"installation/#windows","title":"Windows","text":"<ol> <li>Download <code>rocketship-windows-amd64.exe</code> from the latest release</li> <li>Rename it to <code>rocketship.exe</code></li> <li>Place it somewhere on your <code>PATH</code> (e.g. <code>C:\\\\Users\\\\&lt;you&gt;\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps</code>)</li> </ol>"},{"location":"installation/#docker","title":"Docker","text":"<pre><code>docker pull rocketshipai/rocketship:latest\ndocker run --rm -it rocketshipai/rocketship:latest --help\n</code></pre> <p>Docker images are useful for CI jobs or ephemeral runs where you don't want to manage binaries.</p>"},{"location":"installation/#post-install-checks","title":"Post-install checks","text":"<p>After installing, confirm the CLI works:</p> <pre><code>rocketship --version\nrocketship doctor\n</code></pre> <p><code>rocketship doctor</code> inspects your <code>PATH</code>, config directory permissions, file ownership, and (on macOS) quarantine state, printing exact remediation steps if anything is off.</p> <p>Configuration lives under the path returned by <code>os.UserConfigDir()</code>\u2014for example <code>~/Library/Application Support/Rocketship</code> on macOS or <code>~/.config/rocketship</code> on Linux. Directories are created with <code>0700</code> permissions and the config file with <code>0600</code>.</p> <p>Rocketship refuses to run as root unless you set <code>ROCKETSHIP_ALLOW_ROOT=1</code>. This avoids leaving behind root-owned config files that can break normal usage.</p>"},{"location":"installation/#optional-quality-of-life-tweaks","title":"Optional quality-of-life tweaks","text":"<p>Alias the command if you prefer a shorter entry point:</p> <pre><code># macOS/Linux shell rc\nalias rs=\"rocketship\"\n</code></pre> <pre><code># Windows PowerShell profile\nSet-Alias -Name rs -Value rocketship\n</code></pre>"},{"location":"installation/#next-steps","title":"Next steps","text":"<ul> <li>Quickstart to run your first suite</li> <li>Examples for ready-made specs</li> <li>Test specification reference when you need exact syntax</li> </ul>"},{"location":"mcp-server/","title":"MCP Server","text":"<p>Rocketship includes an MCP (Model Context Protocol) server that enables AI coding agents to write better Rocketship tests by providing examples, patterns, and guidance.</p>"},{"location":"mcp-server/#philosophy","title":"Philosophy","text":"<p>The Rocketship MCP server is designed as a knowledgeable assistant that helps coding agents understand Rocketship testing patterns and best practices. Unlike traditional code generators, this MCP server:</p> <ul> <li>Provides guidance, not files: Shows examples and patterns for agents to adapt</li> <li>Maintains agent control: The coding agent creates all files and makes all decisions</li> <li>Emphasizes learning: Helps agents understand Rocketship concepts deeply</li> <li>Focuses on quality: Promotes E2E customer journey testing and best practices</li> </ul>"},{"location":"mcp-server/#installation","title":"Installation","text":"<p>The MCP server is published as an npm package and can be used with zero installation:</p> <pre><code>{\n  \"mcpServers\": {\n    \"rocketship\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@rocketshipai/mcp-server@latest\"]\n    }\n  }\n}\n</code></pre>"},{"location":"mcp-server/#available-tools","title":"Available Tools","text":"<p>The MCP server provides six assistant tools that provide guidance rather than generating files:</p>"},{"location":"mcp-server/#1-get_rocketship_examples","title":"1. get_rocketship_examples","text":"<p>Get real examples and best practices for specific Rocketship features from the current codebase.</p> <p>Available Plugins:</p> <ul> <li><code>http</code> - API endpoint testing with authentication and validation</li> <li><code>delay</code> - Timing control and wait operations</li> <li><code>script</code> - Custom JavaScript logic execution</li> <li><code>sql</code> - Database operations and validation</li> <li><code>log</code> - Structured logging and debugging</li> <li><code>agent</code> - AI-powered validation and analysis</li> <li><code>browser</code> - UI automation and testing</li> <li><code>supabase</code> - Direct Supabase API operations</li> </ul> <p>Example Request:</p> <pre><code>\"Show me examples of HTTP testing with step chaining\"\n</code></pre> <p>What You Get:</p> <ul> <li>Real YAML code examples from the codebase</li> <li>Best practices for the specific plugin</li> <li>Implementation guidance and patterns</li> <li>Variable usage examples</li> </ul>"},{"location":"mcp-server/#2-suggest_test_structure","title":"2. suggest_test_structure","text":"<p>Suggests proper file structure and test organization based on current project configuration.</p> <p>Project Types:</p> <ul> <li><code>frontend</code> - Browser-based testing with user journeys</li> <li><code>backend</code> - API endpoint testing</li> <li><code>fullstack</code> - Combined frontend and backend testing</li> <li><code>api</code> - Pure API testing focus</li> <li><code>mobile</code> - Mobile application testing</li> </ul> <p>Example Request:</p> <pre><code>\"I need a test structure for an e-commerce frontend project\"\n</code></pre> <p>What You Get:</p> <ul> <li>Recommended directory structure</li> <li>File organization patterns</li> <li>Plugin recommendations for your project type</li> <li>Test flow suggestions</li> </ul>"},{"location":"mcp-server/#3-get_schema_info","title":"3. get_schema_info","text":"<p>Provides current schema information for validation and proper syntax.</p> <p>Schema Sections:</p> <ul> <li><code>plugins</code> - Available plugins and their configurations</li> <li><code>assertions</code> - Validation patterns and types</li> <li><code>save</code> - Data extraction and variable storage</li> <li><code>structure</code> - Overall YAML test structure</li> <li><code>full</code> - Complete schema documentation</li> </ul> <p>Example Request:</p> <pre><code>\"Show me the schema for assertions and save operations\"\n</code></pre> <p>What You Get:</p> <ul> <li>Current schema validation rules</li> <li>Required and optional fields</li> <li>Examples of proper syntax</li> <li>Compatibility information</li> </ul>"},{"location":"mcp-server/#4-get_cli_guidance","title":"4. get_cli_guidance","text":"<p>Provides current CLI usage patterns and commands from introspection.</p> <p>Command Types:</p> <ul> <li><code>run</code> - Execute tests with various options</li> <li><code>validate</code> - Syntax and schema validation</li> <li><code>structure</code> - File structure and organization guidance</li> </ul> <p>Example Request:</p> <pre><code>\"How do I run tests with custom variables?\"\n</code></pre> <p>What You Get:</p> <ul> <li>Current CLI command examples</li> <li>Flag explanations and usage</li> <li>Common usage patterns</li> <li>Version-specific information</li> </ul>"},{"location":"mcp-server/#5-get_rocketship_cli_installation_instructions","title":"5. get_rocketship_cli_installation_instructions","text":"<p>Get step-by-step instructions for installing the Rocketship CLI on different platforms.</p> <p>Platform Support:</p> <ul> <li><code>auto</code> - Auto-detect platform (default)</li> <li><code>macos-arm64</code> - macOS with Apple Silicon</li> <li><code>macos-intel</code> - macOS with Intel processors</li> <li><code>linux</code> - Linux distributions</li> <li><code>windows</code> - Windows systems</li> </ul> <p>Example Request:</p> <pre><code>\"How do I install Rocketship on macOS?\"\n</code></pre> <p>What You Get:</p> <ul> <li>Platform-specific installation commands</li> <li>Available vs NOT available installation methods</li> <li>Post-installation verification steps</li> <li>Troubleshooting guidance</li> <li>Prerequisites and dependencies</li> </ul>"},{"location":"mcp-server/#6-analyze_codebase_for_testing","title":"6. analyze_codebase_for_testing","text":"<p>Analyzes a codebase to suggest meaningful test scenarios based on available plugins.</p> <p>Focus Areas:</p> <ul> <li><code>user_journeys</code> - End-to-end customer workflows</li> <li><code>api_endpoints</code> - API testing strategies</li> <li><code>critical_paths</code> - Business-critical functionality</li> <li><code>integration_points</code> - Service integration testing</li> </ul> <p>Example Request:</p> <pre><code>\"Analyze my React e-commerce app for testing opportunities\"\n</code></pre> <p>What You Get:</p> <ul> <li>Suggested test scenarios for your codebase</li> <li>Plugin recommendations based on project type</li> <li>Critical flow identification</li> <li>Testing strategy recommendations</li> </ul>"},{"location":"mcp-server/#integration-examples","title":"Integration Examples","text":""},{"location":"mcp-server/#with-claude-code","title":"With Claude Code","text":"<p>Add to your <code>.mcp.json</code> file in your project root:</p> <pre><code>{\n  \"mcpServers\": {\n    \"rocketship\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@rocketshipai/mcp-server@latest\"]\n    }\n  }\n}\n</code></pre> <p>Then ask Claude for help:</p> <pre><code>\"I need to install Rocketship and create API tests for my Express.js authentication endpoints.\"\n</code></pre> <p>Claude will use the MCP server to provide installation instructions and relevant testing examples to help you get started.</p>"},{"location":"mcp-server/#with-cursor","title":"With Cursor","text":"<ol> <li>Go to Cursor Settings &gt; Features &gt; Enable Model Context Protocol</li> <li>Add to your MCP configuration:</li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"rocketship\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@rocketshipai/mcp-server@latest\"]\n    }\n  }\n}\n</code></pre> <ol> <li>Ask Cursor for guidance:</li> </ol> <pre><code>\"How do I install Rocketship and structure a test for user login with database validation?\"\n</code></pre>"},{"location":"mcp-server/#with-windsurf","title":"With Windsurf","text":"<p>Add to your Windsurf MCP configuration (<code>~/.codeium/windsurf/mcp_config.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"rocketship\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@rocketshipai/mcp-server@latest\"]\n    }\n  }\n}\n</code></pre> <p>Then ask for assistance:</p> <pre><code>\"Help me install Rocketship and understand how to use step chaining for a complete e-commerce checkout flow\"\n</code></pre>"},{"location":"mcp-server/#with-other-mcp-clients","title":"With Other MCP Clients","text":"<p>Any MCP-compatible client can use the Rocketship server. The server communicates via JSON-RPC over stdio, making it compatible with various AI assistants and development tools.</p>"},{"location":"mcp-server/#best-practices","title":"Best Practices","text":""},{"location":"mcp-server/#1-ask-for-specific-guidance","title":"1. Ask for Specific Guidance","text":"<p>Instead of asking for complete test generation, ask for guidance on specific aspects:</p> <p>Good:</p> <ul> <li>\"How do I install Rocketship on my platform?\"</li> <li>\"Show me examples of API authentication testing\"</li> <li>\"What assertions work best for user profile endpoints?\"</li> <li>\"How should I structure an E2E checkout flow test?\"</li> </ul> <p>Less Effective:</p> <ul> <li>\"Generate all my tests\"</li> <li>\"Create a complete test suite\"</li> </ul>"},{"location":"mcp-server/#2-learn-the-patterns","title":"2. Learn the Patterns","text":"<p>Use the MCP server to understand Rocketship concepts:</p> <ul> <li>Study the examples provided</li> <li>Understand the reasoning behind best practices</li> <li>Adapt patterns to your specific use case</li> <li>Build your own expertise over time</li> </ul>"},{"location":"mcp-server/#3-focus-on-customer-journeys","title":"3. Focus on Customer Journeys","text":"<p>The MCP server emphasizes E2E customer journey testing:</p> <ul> <li>Think about complete user workflows</li> <li>Test realistic user scenarios</li> <li>Validate data consistency across steps</li> <li>Include error and edge cases</li> </ul>"},{"location":"mcp-server/#4-iterate-and-improve","title":"4. Iterate and Improve","text":"<p>Use the validation tool to continuously improve:</p> <ol> <li>Get initial structure guidance</li> <li>Create your test implementation</li> <li>Validate and get improvement suggestions</li> <li>Refine based on feedback</li> <li>Learn from the process</li> </ol>"},{"location":"mcp-server/#example-workflow","title":"Example Workflow","text":"<p>Here's how a typical interaction works:</p> <pre><code>User: \"I need to install Rocketship and test a user registration API \n       that creates a user, sends an email, and requires email verification\"\n\nAgent: *Uses get_rocketship_cli_installation_instructions*\n\nMCP Server: *Returns platform-specific installation instructions with:*\n- Installation commands for the user's platform\n- Post-installation verification steps\n- Troubleshooting guidance\n\nAgent: \"First, let's get Rocketship installed...\"\n       *Provides installation guidance*\n\nUser: \"Great! Now I need help with the test structure\"\n\nAgent: *Uses get_rocketship_examples with feature_type=\"http\"*\n\nMCP Server: *Returns HTTP testing examples including:*\n- Multi-step workflow patterns\n- Email verification testing approaches\n- Data validation between steps\n- Best practices for user onboarding flows\n\nAgent: \"Based on these examples, let me help you create a test...\"\n       *Creates test file incorporating the patterns*\n\nUser: \"Now I want to add database validation to ensure the user was created correctly\"\n\nAgent: *Uses get_plugin_config with plugin=\"sql\"*\n\nMCP Server: *Returns SQL plugin configuration examples*\n\nAgent: *Helps add SQL validation step to the existing test*\n\nUser: \"Can you review my test and suggest improvements?\"\n\nAgent: *Uses validate_and_suggest with the YAML content*\n\nMCP Server: *Returns specific suggestions for improvement*\n\nAgent: *Helps implement the suggested improvements*\n</code></pre>"},{"location":"mcp-server/#environment-variables","title":"Environment Variables","text":"<p>The MCP server respects these environment variables:</p> <ul> <li><code>ROCKETSHIP_LOG</code>: Set log level (DEBUG, INFO, ERROR)</li> <li><code>NODE_ENV</code>: Development/production mode</li> </ul>"},{"location":"mcp-server/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mcp-server/#mcp-server-not-found","title":"MCP Server Not Found","text":"<p>If your AI client can't find the MCP server:</p> <ol> <li>Ensure Node.js 18+ is installed</li> <li>Check your MCP configuration syntax</li> <li>Restart your AI client after configuration changes</li> <li>Verify the npm package is accessible</li> </ol>"},{"location":"mcp-server/#no-guidance-provided","title":"No Guidance Provided","text":"<p>If the MCP server isn't providing helpful guidance:</p> <ol> <li>Be more specific in your requests</li> <li>Provide context about what you're trying to test</li> <li>Ask for specific features or patterns</li> <li>Try different tool combinations</li> </ol>"},{"location":"mcp-server/#examples-dont-match-your-use-case","title":"Examples Don't Match Your Use Case","text":"<p>If the provided examples don't fit your scenario:</p> <ol> <li>Ask for multiple feature examples to combine</li> <li>Request specific plugin configurations</li> <li>Use the validation tool to refine your approach</li> <li>Adapt the patterns to your specific needs</li> </ol>"},{"location":"mcp-server/#security-considerations","title":"Security Considerations","text":"<p>The MCP server:</p> <ul> <li>Never generates files: Only provides guidance and examples</li> <li>No code access: Works with agent's existing knowledge</li> <li>Read-only operation: Cannot modify your project</li> <li>Local execution: All operations run in your environment</li> <li>No data storage: Doesn't store or transmit your code</li> </ul>"},{"location":"mcp-server/#future-enhancements","title":"Future Enhancements","text":"<p>Planned improvements include:</p> <ul> <li>Enhanced pattern library: More examples for complex scenarios</li> <li>Interactive tutorials: Step-by-step guidance for common workflows</li> <li>Context-aware suggestions: Better understanding of project structure</li> <li>Performance optimization: Faster response times and better caching</li> </ul>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Get started with Rocketship in minutes! This guide will help you install Rocketship and run your first test.</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<p>First, install Temporal (required for the local engine):</p> <pre><code>brew install temporal\n</code></pre> <p>Then install the Rocketship CLI:</p> <p>macOS (recommended via Homebrew): <pre><code>brew tap rocketship-ai/tap\nbrew install rocketship\n</code></pre></p> <p>Linux and macOS (portable installer): <pre><code>curl -fsSL https://raw.githubusercontent.com/rocketship-ai/rocketship/main/scripts/install.sh | bash\n</code></pre></p> <p>For detailed installation instructions including Windows, Docker, and optional aliases, see the Installation Guide.</p>"},{"location":"quickstart/#your-first-test","title":"Your First Test","text":"<p>Create a test file:</p> <pre><code>cat &gt; simple-test.yaml &lt;&lt; 'EOF'\nname: \"Simple Test Suite\"\ndescription: \"A simple test suite!\"\ntests:\n  - name: \"API Health Check\"\n    steps:\n      - name: \"Check API status\"\n        plugin: \"http\"\n        config:\n          method: \"GET\"\n          url: \"https://tryme.rocketship.sh/status/200\"\n        assertions:\n          - type: \"status_code\"\n            expected: 200\nEOF\n</code></pre> <p>Run the test:</p> <pre><code>rocketship run -af simple-test.yaml\n</code></pre> <p>The <code>-a</code> flag tells Rocketship to automatically start and stop the local server, and <code>-f</code> specifies the test file to run.</p>"},{"location":"quickstart/#test-run-management","title":"Test Run Management","text":"<p>Rocketship automatically tracks your test runs with context information, making it easy to organize and find results.</p>"},{"location":"quickstart/#authenticating-against-remote-engines","title":"Authenticating Against Remote Engines","text":"<p>If you're connecting to a remote Rocketship deployment that requires OIDC, sign in once with the device-flow helper:</p> <pre><code>rocketship login\n# follow the printed URL to approve the device\n</code></pre> <p>The CLI stores short-lived tokens securely and will refresh them automatically when they expire. Run <code>rocketship status</code> to confirm the current profile is authenticated or <code>rocketship logout</code> to clear credentials.</p>"},{"location":"quickstart/#adding-context-to-your-runs","title":"Adding Context to Your Runs","text":"<p>You can add context to your test runs for better organization:</p> <pre><code># Run with project context\nrocketship run -af simple-test.yaml \\\n  --project-id \"my-app\" \\\n  --source \"cli-local\" \\\n  --branch \"main\" \\\n  --trigger \"manual\"\n\n# Add custom metadata\nrocketship run -af simple-test.yaml \\\n  --project-id \"my-app\" \\\n  --metadata \"env=staging\" \\\n  --metadata \"team=backend\"\n</code></pre>"},{"location":"quickstart/#viewing-test-history","title":"Viewing Test History","text":"<p>List your recent test runs:</p> <pre><code># List all recent runs\nrocketship list --engine localhost:7700\n\n# Filter by project\nrocketship list --engine localhost:7700 --project-id \"my-app\"\n\n# Filter by status\nrocketship list --engine localhost:7700 --status FAILED\n\n# Get detailed information about a specific run\nrocketship get &lt;run-id&gt; --engine localhost:7700\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the CLI reference</li> <li>Check out example tests</li> <li>Learn about run management</li> </ul>"},{"location":"test-run-management/","title":"Test Run Management","text":"<p>Rocketship provides comprehensive test run tracking and management capabilities, allowing you to organize, filter, and analyze your test execution history.</p>"},{"location":"test-run-management/#overview","title":"Overview","text":"<p>Every test run in Rocketship is automatically tracked with contextual metadata including:</p> <ul> <li>Project ID: Organize runs by project or application</li> <li>Source: Track where the run originated (CLI, CI/CD, scheduled)</li> <li>Branch: Git branch information for version tracking</li> <li>Trigger: How the run was initiated (manual, webhook, schedule)</li> <li>Metadata: Custom key-value pairs for additional context</li> </ul>"},{"location":"test-run-management/#running-tests-with-context","title":"Running Tests with Context","text":""},{"location":"test-run-management/#basic-context-flags","title":"Basic Context Flags","text":"<p>When running tests, you can provide context information that will be stored with the run:</p> <pre><code># Run with full context\nrocketship run -f test.yaml \\\n  --project-id \"my-app\" \\\n  --source \"cli-local\" \\\n  --branch \"feature/new-api\" \\\n  --trigger \"manual\"\n</code></pre>"},{"location":"test-run-management/#auto-detection","title":"Auto-Detection","text":"<p>If not specified, Rocketship automatically detects:</p> <ul> <li>Project ID: Uses \"default\" if not provided</li> <li>Source: Detects CI environment or defaults to \"cli-local\"</li> <li>Branch: Uses <code>git branch --show-current</code></li> <li>Commit SHA: Uses <code>git rev-parse HEAD</code></li> <li>Trigger: Infers based on source (webhook for CI, manual for local)</li> </ul>"},{"location":"test-run-management/#custom-metadata","title":"Custom Metadata","text":"<p>Add custom metadata for additional context:</p> <pre><code>rocketship run -f test.yaml \\\n  --project-id \"my-app\" \\\n  --metadata \"env=staging\" \\\n  --metadata \"team=backend\" \\\n  --metadata \"version=1.2.3\"\n</code></pre>"},{"location":"test-run-management/#auto-run-mode","title":"Auto Run Mode","text":"<p>When using the <code>--auto</code> flag, Rocketship automatically displays recent test runs after your tests complete:</p> <pre><code># Run tests with auto mode\nrocketship run --auto -f test.yaml\n\n# After tests complete, you'll see:\n# 1. Final test summary\n# 2. Recent test runs table (all runs)\n</code></pre> <p>This provides immediate visibility into your test history without needing to run a separate <code>list</code> command.</p>"},{"location":"test-run-management/#listing-test-runs","title":"Listing Test Runs","text":"<p>The <code>rocketship list</code> command provides powerful filtering and sorting capabilities:</p>"},{"location":"test-run-management/#basic-listing","title":"Basic Listing","text":"<pre><code># List all recent runs (default: 20 most recent)\nrocketship list --engine localhost:7700\n\n# Limit results\nrocketship list --engine localhost:7700 --limit 50\n</code></pre>"},{"location":"test-run-management/#filtering","title":"Filtering","text":"<p>Filter runs by various criteria:</p> <pre><code># By project\nrocketship list --engine localhost:7700 --project-id \"my-app\"\n\n# By status\nrocketship list --engine localhost:7700 --status FAILED\nrocketship list --engine localhost:7700 --status PASSED\n\n# By source\nrocketship list --engine localhost:7700 --source \"ci-branch\"\n\n# By git branch\nrocketship list --engine localhost:7700 --branch \"main\"\n\n# By schedule name (for scheduled runs)\nrocketship list --engine localhost:7700 --schedule-name \"nightly-tests\"\n\n# Combine filters\nrocketship list --engine localhost:7700 --project-id \"my-app\" --status FAILED --branch \"main\"\n</code></pre>"},{"location":"test-run-management/#sorting","title":"Sorting","text":"<p>Control the order of results:</p> <pre><code># Sort by start time (default: newest first)\nrocketship list --engine localhost:7700 --order-by started_at\n\n# Sort by duration (longest first)\nrocketship list --engine localhost:7700 --order-by duration\n\n# Sort in ascending order\nrocketship list --engine localhost:7700 --order-by duration --ascending\n</code></pre>"},{"location":"test-run-management/#getting-run-details","title":"Getting Run Details","text":"<p>Use <code>rocketship get</code> to view detailed information about a specific run:</p> <pre><code># Get run details (accepts truncated run IDs)\nrocketship get abc123def456 --engine localhost:7700\n\n# Full run details include:\n# - Run metadata (ID, suite name, status, timing)\n# - Context information (project, source, branch, etc.)\n# - Individual test results\n# - Custom metadata\n</code></pre>"},{"location":"test-run-management/#example-output","title":"Example Output","text":"<pre><code>Test Run Details\n================\n\nRun ID:      abc123def456789\nSuite Name:  My Test Suite\nStatus:      \u2713 PASSED\nStarted:     2025-06-25T10:30:00Z\nEnded:       2025-06-25T10:32:15Z\nDuration:    2m15s\n\nContext:\n  Project ID:    my-app\n  Source:        ci-branch\n  Branch:        feature/new-api\n  Commit:        a1b2c3d4\n  Trigger:       webhook\n  Metadata:\n    env: staging\n    team: backend\n\nTests (3):\n  #  NAME           STATUS    DURATION  ERROR\n  -  ----           ------    --------  -----\n  1  Health Check   \u2713 PASSED  1.2s      \n  2  User Login     \u2713 PASSED  0.8s      \n  3  Data Fetch     \u2713 PASSED  0.3s\n</code></pre>"},{"location":"test-run-management/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"test-run-management/#branch-based-ci","title":"Branch-based CI","text":"<p>For branch-based CI workflows:</p> <pre><code># In your CI pipeline\nrocketship run -f tests/api.yaml \\\n  --project-id \"$PROJECT_NAME\" \\\n  --source \"ci-branch\" \\\n  --branch \"$CI_BRANCH\" \\\n  --commit \"$CI_COMMIT_SHA\" \\\n  --trigger \"webhook\" \\\n  --metadata \"build_id=$BUILD_ID\"\n</code></pre>"},{"location":"test-run-management/#scheduled-runs","title":"Scheduled Runs","text":"<p>For scheduled test runs:</p> <pre><code># In your scheduler (cron, GitHub Actions, etc.)\nrocketship run -f tests/nightly.yaml \\\n  --project-id \"my-app\" \\\n  --source \"scheduled\" \\\n  --schedule-name \"nightly-tests\" \\\n  --trigger \"schedule\" \\\n  --metadata \"schedule_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)\"\n</code></pre>"},{"location":"test-run-management/#advanced-usage","title":"Advanced Usage","text":""},{"location":"test-run-management/#server-management","title":"Server Management","text":"<p>When running multiple tests or in CI environments, you can manage the server separately:</p> <pre><code># Start server in background\nrocketship start server --local --background\n\n# Run tests against existing server\nrocketship run -f test1.yaml --engine localhost:7700 --project-id \"my-app\"\nrocketship run -f test2.yaml --engine localhost:7700 --project-id \"my-app\"\n\n# List results\nrocketship list --engine localhost:7700 --project-id \"my-app\"\n\n# Stop server\nrocketship stop server\n</code></pre>"},{"location":"test-run-management/#output-formats","title":"Output Formats","text":"<p>Future versions will support additional output formats:</p> <pre><code># JSON output (planned)\nrocketship list --format json\n\n# YAML output (planned)\nrocketship get abc123 --engine localhost:7700 --format yaml\n</code></pre>"},{"location":"test-run-management/#best-practices","title":"Best Practices","text":"<ol> <li>Consistent Project IDs: Use consistent project identifiers across your organization</li> <li>Meaningful Metadata: Add relevant context like environment, version, or team information</li> <li>Filter Effectively: Use filters to quickly find relevant test runs</li> <li>Monitor Failures: Regularly check for failed runs with <code>rocketship list --status FAILED</code></li> <li>CI Integration: Include context flags in your CI/CD pipelines for better traceability</li> </ol>"},{"location":"test-run-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"test-run-management/#common-issues","title":"Common Issues","text":"<ul> <li>Run not found: Run IDs can be truncated (12 characters minimum)</li> <li>No runs listed: Check your filter criteria or server connection</li> <li>Missing context: Context is auto-detected when possible but can be explicitly set</li> </ul>"},{"location":"test-run-management/#debug-information","title":"Debug Information","text":"<p>Use debug logging to troubleshoot:</p> <pre><code>ROCKETSHIP_LOG=DEBUG rocketship list --engine localhost:7700\nROCKETSHIP_LOG=DEBUG rocketship get abc123 --engine localhost:7700\n</code></pre>"},{"location":"deploy/digitalocean/","title":"Deploy Rocketship on DigitalOcean Kubernetes","text":"<p>This walkthrough recreates the production proof-of-concept we validated on DigitalOcean Kubernetes (DOKS). It covers standing up Temporal, publishing Rocketship images to DigitalOcean Container Registry (DOCR), terminating TLS through an NGINX ingress, and wiring the CLI via profiles.</p> <p>The steps assume you control public DNS for <code>cli.rocketship.globalbank.com</code>, <code>app.rocketship.globalbank.com</code>, and <code>auth.rocketship.globalbank.com</code> (or equivalent) and can issue a SAN certificate that covers all three hosts.</p>"},{"location":"deploy/digitalocean/#prerequisites","title":"Prerequisites","text":"<ul> <li>DigitalOcean account with:</li> <li>A Kubernetes cluster (2\u202f\u00d7\u202fCPU-optimised nodes were used during validation)</li> <li>DigitalOcean Container Registry (<code>registry.digitalocean.com/&lt;registry&gt;</code>) enabled</li> <li><code>doctl</code> authenticated (<code>doctl auth init</code>)</li> <li><code>kubectl</code> configured for the cluster (<code>doctl kubernetes cluster kubeconfig save &lt;cluster-name&gt;</code>)</li> <li>Docker CLI with Buildx</li> <li>Helm 3</li> <li>TLS assets</li> <li><code>certificate.crt</code> and <code>private.key</code> (ZeroSSL issues these; concatenate the intermediate bundle with the server cert if required)</li> </ul> <p>All commands below run from the repository root.</p>"},{"location":"deploy/digitalocean/#1-set-up-namespaces-and-ingress-controller","title":"1. Set Up Namespaces and Ingress Controller","text":"<pre><code>kubectl create namespace rocketship\nkubectl config set-context --current --namespace=rocketship\n\n# Install ingress-nginx (DigitalOcean automatically provisions a Load Balancer)\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\nhelm install ingress-nginx ingress-nginx/ingress-nginx \\\n  --version 4.13.2 \\\n  --namespace ingress-nginx --create-namespace \\\n  --set controller.service.annotations.\"service\\.beta\\.kubernetes\\.io/do-loadbalancer-enable-proxy-protocol\"=\"true\"\n</code></pre> <p>The annotation enables PROXY protocol support on DigitalOcean\u2019s load balancer, which keeps source IPs available in the ingress logs. Omit or adjust if you do not need it.</p>"},{"location":"deploy/digitalocean/#2-install-temporal","title":"2. Install Temporal","text":"<pre><code>helm repo add temporal https://go.temporal.io/helm-charts\nhelm repo update\n\nhelm install temporal temporal/temporal \\\n  --version 0.66.0 \\\n  --namespace rocketship \\\n  --set server.replicaCount=1 \\\n  --set cassandra.config.cluster_size=1 \\\n  --set elasticsearch.replicas=1 \\\n  --set prometheus.enabled=false \\\n  --set grafana.enabled=false \\\n  --wait --timeout 15m\n</code></pre> <p>Register the Temporal logical namespace the Rocketship worker will use:</p> <pre><code>kubectl exec -n rocketship deploy/temporal-admintools -- \\\n  temporal operator namespace create --namespace default\n</code></pre> <p>(Keep <code>default</code> unless you intend to manage multiple namespaces; update Helm values accordingly later.)</p>"},{"location":"deploy/digitalocean/#3-create-the-tls-secret","title":"3. Create the TLS Secret","text":"<p>Issue a SAN certificate that covers <code>cli.rocketship.globalbank.com</code>, <code>app.rocketship.globalbank.com</code>, and <code>auth.rocketship.globalbank.com</code> (Let\u2019s Encrypt or ZeroSSL work well). After you have the combined cert/key, update the secret:</p> <pre><code># optional: remove the old secret if it exists\nkubectl delete secret globalbank-tls -n rocketship 2&gt;/dev/null || true\n\n# create the secret with the new cert/key\nkubectl create secret tls globalbank-tls \\\n  --namespace rocketship \\\n  --cert=/etc/letsencrypt/live/rocketship.sh/fullchain.pem \\\n  --key=/etc/letsencrypt/live/rocketship.sh/privkey.pem\n</code></pre>"},{"location":"deploy/digitalocean/#4-authenticate-the-registry-inside-the-cluster","title":"4. Authenticate the Registry Inside the Cluster","text":"<p>Create the image pull secret with <code>doctl</code> and apply it to the <code>rocketship</code> namespace:</p> <pre><code>doctl registry kubernetes-manifest --namespace rocketship &gt; do-registry-secret.yaml\nkubectl apply -f do-registry-secret.yaml\n</code></pre> <p>The secret name is typically <code>registry-&lt;registry-name&gt;</code> and is referenced automatically by the chart when <code>imagePullSecrets</code> is set.</p>"},{"location":"deploy/digitalocean/#5-build-and-push-rocketship-images","title":"5. Build and Push Rocketship Images","text":"<p>DigitalOcean\u2019s nodes run on <code>linux/amd64</code>, so build multi-architecture images to avoid \u201cexec format error\u201d crashes:</p> <pre><code>export REGISTRY=registry.digitalocean.com/rocketship\nexport TAG=v0.1-test\n\n# Engine\ndocker buildx build \\\n  --platform linux/amd64,linux/arm64 \\\n  -f .docker/Dockerfile.engine \\\n  -t $REGISTRY/rocketship-engine:$TAG . \\\n  --push\n\n# Worker\ndocker buildx build \\\n  --platform linux/amd64,linux/arm64 \\\n  -f .docker/Dockerfile.worker \\\n  -t $REGISTRY/rocketship-worker:$TAG . \\\n  --push\n\n# Auth broker\ndocker buildx build \\\n  --platform linux/amd64,linux/arm64 \\\n  -f .docker/Dockerfile.authbroker \\\n  -t $REGISTRY/rocketship-auth-broker:$TAG . \\\n  --push\n</code></pre> <p>Re-run these commands whenever you change code; keep the tag stable (for example <code>v0.1-test</code>) so the Helm release pulls the updated digest.</p>"},{"location":"deploy/digitalocean/#6-deploy-the-rocketship-helm-chart","title":"6. Deploy the Rocketship Helm Chart","text":"<p>Before installing the chart, create the secrets that hold the auth broker\u2019s configuration:</p> <pre><code># 1) Postgres connection string (replace with the managed database DSN)\nkubectl create secret generic globalbank-auth-broker-database \\\n  --namespace rocketship \\\n  --from-literal=DATABASE_URL='postgres://rocketship:&lt;password&gt;@&lt;host&gt;:5432/rocketship?sslmode=require'\n\n# 2) 32-byte refresh-token signing key (base64 encoded)\nkubectl create secret generic globalbank-auth-broker-secrets \\\n  --namespace rocketship \\\n  --from-literal=ROCKETSHIP_BROKER_REFRESH_KEY=\"$(openssl rand -base64 32)\"\n</code></pre> <p>The Postgres database backs user/org membership and refresh tokens. The generated <code>ROCKETSHIP_BROKER_REFRESH_KEY</code> is used to HMAC refresh tokens before they are stored, so rotate it carefully (invalidate existing sessions as needed). Enabling the chart\u2019s bundled Postgres (<code>--set postgres.enabled=true</code>) auto-generates the broker database secret, so you can skip the <code>globalbank-auth-broker-database</code> step and simply supply <code>postgres.auth.password</code> in the Helm command.</p> <p>Create a values override file (<code>deploy/do-values.yaml</code>) or inline the settings:</p> <pre><code>helm install rocketship charts/rocketship \\\n  --namespace rocketship \\\n  --set temporal.host=temporal-frontend.rocketship:7233 \\\n  --set temporal.namespace=default \\\n  --set engine.image.repository=$REGISTRY/rocketship-engine \\\n  --set engine.image.tag=$TAG \\\n  --set worker.image.repository=$REGISTRY/rocketship-worker \\\n  --set worker.image.tag=$TAG \\\n  # Uncomment the two lines below to use the bundled Postgres chart instead of an external DB\n  # --set postgres.enabled=true \\\n  # --set postgres.auth.password=$POSTGRES_PASSWORD \\\n  --set imagePullSecrets[0].name=registry-rocketship \\\n  --set ingress.enabled=true \\\n  --set ingress.className=nginx \\\n  --set ingress.annotations.\"nginx\\.ingress\\.kubernetes\\.io/backend-protocol\"=GRPC \\\n  --set ingress.annotations.\"nginx\\.ingress\\.kubernetes\\.io/ssl-redirect\"=\"true\" \\\n  --set ingress.annotations.\"nginx\\.ingress\\.kubernetes\\.io/proxy-body-size\"=\"0\" \\\n  --set ingress.tls[0].secretName=globalbank-tls \\\n  --set ingress.tls[0].hosts[0]=cli.rocketship.globalbank.com \\\n  --set ingress.hosts[0].host=cli.rocketship.globalbank.com \\\n  --set ingress.hosts[0].paths[0].path=/ \\\n  --set ingress.hosts[0].paths[0].pathType=Prefix \\\n  --wait\n</code></pre> <p>Confirm the pods are healthy:</p> <pre><code>kubectl get pods -n rocketship\n</code></pre> <p><code>rocketship-engine</code>, <code>rocketship-worker</code>, <code>rocketship-auth-broker</code>, and <code>rocketship-web-oauth2-proxy</code> should report <code>READY 1/1</code>. Temporal services may restart once while Cassandra and Elasticsearch initialise\u2014that is expected.</p>"},{"location":"deploy/digitalocean/#7-enable-auth-for-the-web-ui-optional","title":"7. Enable Auth for the Web UI (optional)","text":"<p>After the gRPC ingress is live you can optionally front the engine\u2019s HTTP port with oauth2-proxy. Choose the option that matches your organisation:</p>"},{"location":"deploy/digitalocean/#option-a-github-broker-reuse-cli-device-flow","title":"Option A \u2014 GitHub broker (reuse CLI device flow)","text":"<ol> <li> <p>Create or reuse a GitHub OAuth app: visit https://github.com/settings/developers (or your organisation equivalent) and register an OAuth App for the CLI device flow. Record the generated Client ID and Client Secret \u2013 you will supply them via Kubernetes secrets. The Authorization callback can be any valid HTTPS URL because device flow does not redirect end users.</p> </li> <li> <p>Create the broker secrets: use the client ID/secret captured in the previous step.    <pre><code># GitHub OAuth app credentials\nkubectl create secret generic globalbank-github-oauth \\\n  --namespace rocketship \\\n  --from-literal=ROCKETSHIP_GITHUB_CLIENT_ID=YOUR_GITHUB_CLIENT_ID \\\n  --from-literal=ROCKETSHIP_GITHUB_CLIENT_SECRET=YOUR_GITHUB_CLIENT_SECRET\n\n# Database DSN (managed Postgres or self-hosted)\nkubectl create secret generic globalbank-auth-broker-database \\\n  --namespace rocketship \\\n  --from-literal=DATABASE_URL='postgres://rocketship:&lt;password&gt;@&lt;host&gt;:5432/rocketship?sslmode=require'\n\n# Refresh-token HMAC key (32 bytes, base64 encoded)\nkubectl create secret generic globalbank-auth-broker-secrets \\\n  --namespace rocketship \\\n  --from-literal=ROCKETSHIP_BROKER_REFRESH_KEY=\"$(openssl rand -base64 32)\"\n\n# JWKS signing material (PEM formatted private key + matching cert)\nkubectl create secret generic globalbank-auth-broker-signing \\\n  --namespace rocketship \\\n  --from-file=signing-key.pem=./signing-key.pem\n\n# Web front-door OAuth client (used by oauth2-proxy). Create a SECOND GitHub OAuth app with\n# callback URL https://app.globalbank.rocketship.sh/oauth2/callback and plug its credentials below.\nkubectl create secret generic oauth2-proxy-credentials \\\n  --namespace rocketship \\\n  --from-literal=clientID=YOUR_WEB_OAUTH_CLIENT_ID \\\n  --from-literal=clientSecret=YOUR_WEB_OAUTH_CLIENT_SECRET \\\n  --from-literal=cookieSecret=$(python -c \"import secrets, base64; print(base64.urlsafe_b64encode(secrets.token_bytes(32)).decode())\")\n</code></pre></p> </li> <li> <p>Review <code>charts/rocketship/values-github-selfhost.yaml</code> and <code>charts/rocketship/values-github-web.yaml</code>:</p> </li> <li>Ensure the public hostnames (<code>cli/globalbank/app/globalbank</code>) match your ingress controller.</li> <li>Replace the placeholder <code>YOUR_GITHUB_CLIENT_ID</code> (and the corresponding secret) with the values from your OAuth app.</li> <li> <p>The oauth2-proxy preset points its issuer at <code>https://auth.globalbank.rocketship.sh</code>, which is served by the broker deployment.</p> </li> <li> <p>Apply the presets alongside the base ingress values: <pre><code>helm upgrade --install rocketship charts/rocketship \\\n  --namespace rocketship \\\n  -f charts/rocketship/values-production.yaml \\\n  -f charts/rocketship/values-github-selfhost.yaml \\\n  -f charts/rocketship/values-github-web.yaml \\\n  --wait\n</code></pre></p> </li> <li> <p>Verify the flow: visit <code>https://app.globalbank.rocketship.sh/</code> in a new session. You should be redirected to GitHub, approve the OAuth app you created, and land on the proxied Rocketship health page (<code>/healthz</code>).</p> </li> </ol> <p>If the CLI returns <code>permission denied (roles: pending)</code> after logging in, call <code>POST https://auth.globalbank.rocketship.sh/api/orgs</code> with the bearer token to create the first organisation/project, or ask an existing admin to invite you. Pending users cannot run suites until they belong to a project.</p>"},{"location":"deploy/digitalocean/#option-b-bring-your-own-idp-auth0oktaazure-ad","title":"Option B \u2014 Bring your own IdP (Auth0/Okta/Azure AD)","text":"<ol> <li> <p>Create the oauth2-proxy credentials secret: <pre><code>openssl genrsa -out signing-key.pem 2048\nkubectl create secret generic globalbank-auth-broker-signing \\\n  --namespace rocketship \\\n  --from-file=signing-key.pem\n\nkubectl create secret generic globalbank-auth-broker-database \\\n  --namespace rocketship \\\n  --from-literal=DATABASE_URL='postgres://rocketship:&lt;password&gt;@&lt;host&gt;:5432/rocketship?sslmode=require'\n\nkubectl create secret generic globalbank-auth-broker-secrets \\\n  --namespace rocketship \\\n  --from-literal=ROCKETSHIP_BROKER_REFRESH_KEY=\"$(openssl rand -base64 32)\"\n</code></pre></p> </li> <li> <p>Bootstrap oauth2-proxy credentials. Use the same GitHub OAuth application (client ID/secret) so both CLI and UI share it.</p> </li> </ol> <pre><code>COOKIE_SECRET=$(python3 - &lt;&lt;'PY'\nimport secrets\nprint(secrets.token_hex(16))\nPY\n)\nkubectl create secret generic oauth2-proxy-credentials \\\n  --namespace rocketship \\\n  --from-literal=clientID=YOUR_IDP_CLIENT_ID \\\n  --from-literal=clientSecret=YOUR_IDP_CLIENT_SECRET \\\n  --from-literal=cookieSecret=$(python -c \"import secrets, base64; print(base64.urlsafe_b64encode(secrets.token_bytes(32)).decode())\")\n</code></pre> <ol> <li>Review <code>charts/rocketship/values-oidc-web.yaml</code>:</li> <li>Set <code>OAUTH2_PROXY_OIDC_ISSUER_URL</code> to your IdP\u2019s issuer URL (e.g. <code>https://auth.globalbank.com/oidc</code>).</li> <li>Update <code>OAUTH2_PROXY_REDIRECT_URL</code> to match the web hostname (<code>https://app.globalbank.rocketship.sh/oauth2/callback</code>).</li> <li> <p>Populate <code>auth.oidc.*</code> with the native-app client (CLI device flow) details from your IdP.</p> </li> <li> <p>Apply the preset: <pre><code>helm upgrade --install rocketship charts/rocketship \\\n  --namespace rocketship \\\n  -f charts/rocketship/values-production.yaml \\\n  -f charts/rocketship/values-oidc-web.yaml \\\n  --wait\n</code></pre></p> </li> <li> <p>Verify the flow: browse to <code>https://app.globalbank.rocketship.sh/</code>, complete your IdP login, and confirm the proxied Rocketship health page renders (<code>/healthz</code>).</p> </li> </ol>"},{"location":"deploy/digitalocean/#8-enable-token-authentication-for-grpc-recommended","title":"8. Enable Token Authentication for gRPC (recommended)","text":"<p>Issue a long-lived token for the engine so only authenticated CLI or CI jobs can invoke workflows.</p> <ol> <li> <p>Generate a token and store it in a Kubernetes secret (replace the example value):    <pre><code>kubectl create secret generic rocketship-engine-token \\\n  --namespace rocketship \\\n  --from-literal=token=\"rst_self_$(openssl rand -hex 32)\"\n</code></pre></p> </li> <li> <p>Patch your Helm values (or create <code>values-token.yaml</code>) to inject the token:</p> </li> </ol> <pre><code>engine:\n  env:\n    - name: ROCKETSHIP_ENGINE_TOKEN\n      valueFrom:\n        secretKeyRef:\n          name: rocketship-engine-token\n          key: token\n</code></pre> <p>Apply it alongside the production values:</p> <pre><code>helm upgrade --install rocketship charts/rocketship \\\n  --namespace rocketship \\\n  -f charts/rocketship/values-production.yaml \\\n  -f charts/rocketship/values-github-cloud.yaml \\\n  -f charts/rocketship/values-github-web.yaml \\\n  --set engine.image.repository=$REGISTRY/rocketship-engine \\\n  --set engine.image.tag=$TAG \\\n  --set worker.image.repository=$REGISTRY/rocketship-worker \\\n  --set worker.image.tag=$TAG \\\n  --set auth.broker.image.repository=$REGISTRY/rocketship-auth-broker \\\n  --set auth.broker.image.tag=$TAG \\\n  --wait\n</code></pre> <ol> <li>Validate the flows. <pre><code>rocketship profile create cloud grpcs://cli.rocketship.globalbank.com\nrocketship profile use cloud\nrocketship login\nrocketship status\n</code></pre>    Browse to <code>https://app.rocketship.globalbank.com/</code> in a fresh session\u2014you should be redirected through GitHub and land back on the proxied Rocketship UI after approval. The CLI command above walks you through device flow (<code>https://github.com/login/device</code>) and persists the refresh token locally.</li> </ol> <p>The broker stores only hashed refresh tokens in Postgres (keyed via <code>ROCKETSHIP_BROKER_REFRESH_KEY</code>). Rotate that secret\u2014and the signing key\u2014by updating the Kubernetes secrets and rerunning <code>helm upgrade</code>. If the CLI reports <code>permission denied (roles: pending)</code>, use the issued bearer token to call <code>POST https://auth.globalbank.rocketship.sh/api/orgs</code> and create the first organisation, or ask an administrator to invite you.</p>"},{"location":"deploy/digitalocean/#option-2-bring-your-own-idp-auth0-okta-azure-ad","title":"Option 2 \u2013 Bring your own IdP (Auth0, Okta, Azure AD, \u2026)","text":"<p>If you already manage an internal IdP, point the chart at it. Provision the necessary applications in your provider (typically a native app for the CLI device flow and a web app for oauth2-proxy), then update <code>charts/rocketship/values-oidc-web.yaml</code> with your issuer, client IDs, and scopes.</p> <pre><code>helm upgrade --install rocketship charts/rocketship \\\n  --namespace rocketship \\\n  -f charts/rocketship/values-production.yaml \\\n  -f charts/rocketship/values-oidc-web.yaml \\\n  --set engine.image.repository=$REGISTRY/rocketship-engine \\\n  --set engine.image.tag=$TAG \\\n  --set worker.image.repository=$REGISTRY/rocketship-worker \\\n  --set worker.image.tag=$TAG \\\n  --set auth.broker.image.repository=$REGISTRY/rocketship-auth-broker \\\n  --set auth.broker.image.tag=$TAG \\\n  --wait\n</code></pre> <p>After rollout, point your CLI profile at the engine (<code>rocketship profile create &lt;name&gt; grpcs://cli.rocketship.globalbank.com</code>) and run <code>rocketship login</code>. The CLI follows the device flow your IdP exposes and automatically refreshes the issued token on subsequent commands.</p>"},{"location":"deploy/digitalocean/#rbac-considerations","title":"RBAC considerations","text":"<p>Regardless of where Rocketship runs (cloud usage-based, dedicated enterprise, or self-hosted), the recommended RBAC model is the same:</p> <ol> <li>Issue Rocketship JWTs that carry organisation/team roles. The broker (or customer IdP) mints access tokens with claims such as <code>org</code>, <code>project</code>, and <code>role</code> (<code>admin</code>, <code>editor</code>, <code>viewer</code>, <code>service-account</code>).</li> <li>Engine enforces on every RPC. When the CLI calls <code>CreateRun</code>, <code>ListRuns</code>, etc., the engine reads the claims and rejects calls from users without the required role. Tokens are short-lived and verified via JWKS, so enforcement is consistent across cloud and self-hosted clusters.</li> <li>Role management lives in Rocketship. Maintain an RBAC table in Rocketship Cloud (or the broker) so you can invite users, sync GitHub teams if desired, or import roles from customer IdPs. The engine only consumes the resulting claims; it doesn\u2019t need to know whether they originated from GitHub, Okta, or internal configuration.</li> <li>Future enhancements (optional): provide an <code>rbac.yaml</code> or Terraform provider so self-hosted clusters can seed organisations/roles declaratively, and add UI to sync GitHub org/team membership if customers opt in.</li> </ol> <p>This approach lets you offer the same RBAC semantics in every environment. Usage-based customers rely on the GitHub-backed broker, while enterprise tenants with their own IdP simply mint tokens that include the same claim set.</p>"},{"location":"deploy/digitalocean/#10-point-dns-at-the-load-balancer","title":"10. Point DNS at the Load Balancer","text":"<p>Create A (or CNAME) records for <code>cli.rocketship.globalbank.com</code>, <code>app.rocketship.globalbank.com</code>, and <code>auth.rocketship.globalbank.com</code> pointing at the ingress load balancer IP (see step 6). DNS propagation usually completes within a minute on DigitalOcean DNS, but public resolvers may take longer.</p>"},{"location":"deploy/digitalocean/#11-smoke-test-the-endpoint","title":"11. Smoke Test the Endpoint","text":"<p>The Rocketship health endpoint answers gRPC, so an HTTPS request returns <code>415</code> with <code>application/grpc</code>, which confirms end-to-end TLS:</p> <pre><code>curl -v https://cli.rocketship.globalbank.com/healthz\ncurl -v https://auth.rocketship.globalbank.com/healthz\n</code></pre> <p>Create and use the default cloud profile from the CLI (already pointing at <code>cli.rocketship.globalbank.com:443</code>):</p> <pre><code>rocketship profile list\nrocketship login\nrocketship run -f examples/simple-http/rocketship.yaml\n</code></pre> <p>If you see a <code>connection refused</code> message against <code>127.0.0.1:7700</code>, ensure you are running a CLI build that includes the profile resolution fixes introduced in PR\u202f#2.</p>"},{"location":"deploy/digitalocean/#10-updating-the-deployment","title":"10. Updating the Deployment","text":"<ol> <li>Rebuild and push the images with the same tag (or bump the <code>TAG</code>).</li> <li>Run <code>helm upgrade rocketship charts/rocketship ...</code> with the updated values.</li> <li>Watch rollout status:    <pre><code>kubectl rollout status deploy/rocketship-engine -n rocketship\nkubectl rollout status deploy/rocketship-worker -n rocketship\n</code></pre></li> </ol>"},{"location":"deploy/digitalocean/#11-troubleshooting-tips","title":"11. Troubleshooting Tips","text":"<ul> <li><code>CrashLoopBackOff</code> with <code>exec /bin/engine: exec format error</code> indicates the image was built for the wrong architecture. Rebuild with <code>--platform linux/amd64</code>.</li> <li>If the worker logs show <code>Namespace &lt;name&gt; is not found</code>, rerun the Temporal namespace creation step and verify <code>temporal.namespace</code> in the Helm values matches.</li> <li><code>curl</code> connecting to <code>127.0.0.1</code> usually means DNS hasn\u2019t propagated or the CLI profile points at the wrong port (<code>7700</code> vs <code>443</code>). Profiles created with <code>grpcs://</code> automatically default to port 443.</li> </ul> <p>With these steps you have a durable Rocketship installation bridging a managed Temporal stack, ingress TLS, and CLI profiles\u2014ready for teams to run suites from their laptops or CI pipelines.</p>"},{"location":"deploy/minikube/","title":"Run Rocketship on Minikube","text":"<p>Use this guide when you want a fully isolated Rocketship stack on your laptop for development, demos, or CI automation. The repository ships with <code>scripts/install-minikube.sh</code>, which provisions Temporal plus the Rocketship engine and worker in a single namespace.</p>"},{"location":"deploy/minikube/#prerequisites","title":"Prerequisites","text":"<ul> <li>macOS or Linux host with at least 4 vCPUs and 8\u202fGB RAM free</li> <li>Minikube <code>v1.36+</code></li> <li>Kubectl pointed to your Minikube context</li> <li>Helm 3</li> <li>Docker (Minikube uses the local Docker daemon to build images)</li> </ul>"},{"location":"deploy/minikube/#1-launch-the-stack","title":"1. Launch the Stack","text":"<p>From the repository root:</p> <pre><code>scripts/install-minikube.sh\n</code></pre> <p>The script performs the following steps:</p> <ol> <li>Starts/ensures a Minikube profile (defaults to <code>rocketship</code>).</li> <li>Switches the Docker context to Minikube and builds the engine and worker images as <code>rocketship-engine-local:dev</code> and <code>rocketship-worker-local:dev</code>.</li> <li>Installs Temporal via the official Helm chart in the <code>rocketship</code> namespace using a minimal configuration (single replica services, Cassandra + Elasticsearch, no Prometheus/Grafana).</li> <li>Registers the Temporal logical namespace <code>rocketship</code> using the Temporal CLI.</li> <li>Installs the Rocketship Helm chart, pointing at the Temporal frontend service, and exposes ClusterIP services with named <code>grpc</code>/<code>http</code> ports.</li> <li>Prints summary information and port-forward helper commands.</li> </ol> <p>Typical output ends with:</p> <pre><code>Engine endpoint (gRPC): service rocketship-engine.rocketship:7700\nHealth endpoint: service rocketship-engine.rocketship:7701\nTemporal host configured as: temporal-frontend.rocketship:7233\n</code></pre>"},{"location":"deploy/minikube/#2-customise-the-install-optional","title":"2. Customise the Install (Optional)","text":"<p>Environment variables let you adjust namespaces, release names, and Temporal workflow namespace without editing the script:</p> Variable Default Purpose <code>MINIKUBE_PROFILE</code> <code>rocketship</code> Minikube profile name <code>ROCKETSHIP_NAMESPACE</code> <code>rocketship</code> Kubernetes namespace for Rocketship services <code>TEMPORAL_NAMESPACE</code> <code>rocketship</code> Namespace for Temporal Helm release <code>TEMPORAL_WORKFLOW_NAMESPACE</code> <code>rocketship</code> Temporal logical namespace registered via CLI <code>TEMPORAL_RELEASE</code> <code>temporal</code> Helm release name for Temporal <code>ROCKETSHIP_RELEASE</code> <code>rocketship</code> Helm release name for Rocketship <code>ROCKETSHIP_CHART_PATH</code> <code>charts/rocketship</code> Path to the chart (override when packaging) <p>Example: run everything inside a namespace called <code>testing</code>:</p> <pre><code>ROCKETSHIP_NAMESPACE=testing \\\nTEMPORAL_NAMESPACE=testing \\\nTEMPORAL_WORKFLOW_NAMESPACE=testing \\\nscripts/install-minikube.sh\n</code></pre>"},{"location":"deploy/minikube/#3-verify-the-deployment","title":"3. Verify the Deployment","text":"<pre><code>kubectl get pods -n rocketship\nkubectl get svc -n rocketship\n</code></pre> <p>You should see Temporal pods (frontend, history, matching, worker, cassandra, elasticsearch) and two Rocketship deployments (<code>rocketship-engine</code>, <code>rocketship-worker</code>).</p> <p>To exercise the stack locally:</p> <pre><code>kubectl port-forward -n rocketship svc/rocketship-engine 7700:7700\nrocketship profile create minikube grpc://localhost:7700\nrocketship profile use minikube\nrocketship run -af examples/simple-http/rocketship.yaml\n</code></pre>"},{"location":"deploy/minikube/#4-manual-helm-flow-optional","title":"4. Manual Helm Flow (Optional)","text":"<p>If you prefer to perform the steps yourself:</p> <ol> <li>Install Temporal:    <pre><code>helm repo add temporal https://go.temporal.io/helm-charts\nhelm repo update\nhelm install temporal temporal/temporal \\\n  --version 0.66.0 \\\n  --namespace rocketship --create-namespace \\\n  --set server.replicaCount=1 \\\n  --set cassandra.config.cluster_size=1 \\\n  --set elasticsearch.replicas=1 \\\n  --set prometheus.enabled=false \\\n  --set grafana.enabled=false \\\n  --wait --timeout 15m\n</code></pre></li> <li>Register the Temporal namespace (default <code>rocketship</code>):    <pre><code>kubectl exec -n rocketship deploy/temporal-admintools -- \\\n  temporal operator namespace create --namespace rocketship\n</code></pre></li> <li>Build local images and load them into Minikube:    <pre><code>eval \"$(minikube docker-env)\"\ndocker build -f .docker/Dockerfile.engine -t rocketship-engine-local:dev .\ndocker build -f .docker/Dockerfile.worker -t rocketship-worker-local:dev .\n</code></pre></li> <li>Install Rocketship using overrides:    <pre><code>helm install rocketship charts/rocketship \\\n  --namespace rocketship \\\n  --set temporal.host=temporal-frontend.rocketship:7233 \\\n  --set temporal.namespace=rocketship \\\n  --set engine.image.repository=rocketship-engine-local \\\n  --set engine.image.tag=dev \\\n  --set worker.image.repository=rocketship-worker-local \\\n  --set worker.image.tag=dev \\\n  --values charts/rocketship/values-minikube.yaml \\\n  --wait\n</code></pre></li> </ol>"},{"location":"deploy/minikube/#5-cleanup","title":"5. Cleanup","text":"<pre><code>helm uninstall rocketship -n rocketship\nhelm uninstall temporal -n rocketship\nkubectl delete namespace rocketship\nminikube delete -p rocketship\n</code></pre> <p>You now have a repeatable local environment for building new features, running integration tests, or debugging plugin behaviour before deploying to a managed cluster.</p>"},{"location":"examples/sql-testing/","title":"SQL Testing","text":"<p>The SQL plugin enables database operations and testing within Rocketship workflows. It supports multiple database engines and provides comprehensive assertion capabilities for validating query results.</p>"},{"location":"examples/sql-testing/#supported-databases","title":"Supported Databases","text":"<ul> <li>PostgreSQL - <code>driver: postgres</code></li> <li>MySQL - <code>driver: mysql</code></li> <li>SQLite - <code>driver: sqlite</code></li> <li>SQL Server - <code>driver: sqlserver</code></li> </ul>"},{"location":"examples/sql-testing/#configuration","title":"Configuration","text":""},{"location":"examples/sql-testing/#basic-configuration","title":"Basic Configuration","text":"<pre><code>- name: \"Query users\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"postgres://user:password@localhost:5432/database?sslmode=disable\"\n    commands:\n      - \"SELECT id, name, email FROM users WHERE active = true;\"\n</code></pre>"},{"location":"examples/sql-testing/#configuration-with-variables","title":"Configuration with Variables","text":"<pre><code>vars:\n  db_host: \"localhost:5432\"\n  db_user: \"testuser\"\n  db_password: \"testpass\"\n  db_name: \"testdb\"\n\nsteps:\n  - name: \"Create user\"\n    plugin: sql\n    config:\n      driver: postgres\n      dsn: \"postgres://{{ .vars.db_user }}:{{ .vars.db_password }}@{{ .vars.db_host }}/{{ .vars.db_name }}?sslmode=disable\"\n      commands:\n        - \"INSERT INTO users (name, email) VALUES ('{{ .vars.user_name }}', '{{ .vars.user_email }}') RETURNING id;\"\n</code></pre>"},{"location":"examples/sql-testing/#external-sql-files","title":"External SQL Files","text":"<pre><code>- name: \"Run migration\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"{{ .vars.postgres_dsn }}\"\n    file: \"./migrations/001_create_tables.sql\"\n    timeout: \"60s\"\n</code></pre>"},{"location":"examples/sql-testing/#database-connection-strings-dsn","title":"Database Connection Strings (DSN)","text":""},{"location":"examples/sql-testing/#postgresql","title":"PostgreSQL","text":"<pre><code>postgres://username:password@host:port/database?sslmode=disable\n</code></pre>"},{"location":"examples/sql-testing/#mysql","title":"MySQL","text":"<pre><code>username:password@tcp(host:port)/database\n</code></pre>"},{"location":"examples/sql-testing/#sqlite","title":"SQLite","text":"<pre><code>./path/to/database.db\n</code></pre>"},{"location":"examples/sql-testing/#sql-server","title":"SQL Server","text":"<pre><code>sqlserver://username:password@host:port?database=dbname\n</code></pre>"},{"location":"examples/sql-testing/#assertions","title":"Assertions","text":"<p>The SQL plugin supports several assertion types for validating query results:</p>"},{"location":"examples/sql-testing/#row-count-assertion","title":"Row Count Assertion","text":"<p>Validates the number of rows returned by a specific query:</p> <pre><code>assertions:\n  - type: row_count\n    query_index: 0\n    expected: 5\n</code></pre>"},{"location":"examples/sql-testing/#query-count-assertion","title":"Query Count Assertion","text":"<p>Validates the total number of queries executed:</p> <pre><code>assertions:\n  - type: query_count\n    expected: 3\n</code></pre>"},{"location":"examples/sql-testing/#success-count-assertion","title":"Success Count Assertion","text":"<p>Validates the number of successful queries:</p> <pre><code>assertions:\n  - type: success_count\n    expected: 2\n</code></pre>"},{"location":"examples/sql-testing/#column-value-assertion","title":"Column Value Assertion","text":"<p>Validates specific column values in query results:</p> <pre><code>assertions:\n  - type: column_value\n    query_index: 0\n    row_index: 0\n    column: \"status\"\n    expected: \"active\"\n</code></pre>"},{"location":"examples/sql-testing/#saving-query-results","title":"Saving Query Results","text":"<p>Extract values from query results for use in subsequent steps:</p> <pre><code>save:\n  - sql_result: \".queries[0].rows[0].id\"\n    as: \"user_id\"\n  - sql_result: \".queries[0].rows_affected\"\n    as: \"affected_count\"\n  - sql_result: \".stats.success_count\"\n    as: \"successful_queries\"\n</code></pre>"},{"location":"examples/sql-testing/#save-path-syntax","title":"Save Path Syntax","text":"<ul> <li><code>.queries[0].rows[0].column_name</code> - Extract column value from first query, first row</li> <li><code>.queries[0].rows_affected</code> - Number of rows affected by first query</li> <li><code>.stats.success_count</code> - Total number of successful queries</li> <li><code>.stats.total_queries</code> - Total number of queries executed</li> </ul>"},{"location":"examples/sql-testing/#handlebars-escaping-in-sql-queries","title":"Handlebars Escaping in SQL Queries","text":"<p>When your SQL queries contain literal handlebars syntax (e.g., for stored procedures or database functions that use <code>{{ }}</code> syntax), you can escape them using backslashes:</p> <pre><code>- name: \"Query with escaped handlebars\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"{{ .vars.db_dsn }}\"\n    commands:\n      - \"SELECT 'Normal: {{ .vars.test_user_name }}, Escaped: \\\\{{ placeholder }}' as mixed_example;\"\n</code></pre> <p>In this example:</p> <ul> <li><code>{{ .vars.test_user_name }}</code> will be replaced with the actual variable value</li> <li><code>\\\\{{ placeholder }}</code> will render as literal <code>{{ placeholder }}</code> in the SQL query</li> </ul> <p>For multiple levels of escaping:</p> <ul> <li><code>\\\\{{ }}</code> \u2192 <code>{{ }}</code> (literal handlebars)</li> <li><code>\\\\\\\\{{ }}</code> \u2192 <code>\\\\{{ }}</code> (escaped backslash + handlebars variable)</li> <li><code>\\\\\\\\\\\\{{ }}</code> \u2192 <code>\\\\{{ }}</code> (literal escaped handlebars)</li> </ul> <p>See the Handlebars Escaping section in the Variables Overview for complete details and advanced usage.</p>"},{"location":"examples/sql-testing/#complete-example","title":"Complete Example","text":"<pre><code>name: \"User Management Test\"\n\nvars:\n  db_dsn: \"postgres://testuser:testpass@localhost:5433/testdb?sslmode=disable\"\n  test_email: \"test@example.com\"\n\ntests:\n  - name: \"User CRUD Operations\"\n    steps:\n      - name: \"Create user\"\n        plugin: sql\n        config:\n          driver: postgres\n          dsn: \"{{ .vars.db_dsn }}\"\n          commands:\n            - \"INSERT INTO users (name, email, active) VALUES ('Test User', '{{ .vars.test_email }}', true) RETURNING id;\"\n        assertions:\n          - type: row_count\n            query_index: 0\n            expected: 1\n        save:\n          - sql_result: \".queries[0].rows[0].id\"\n            as: \"user_id\"\n\n      - name: \"Verify user exists\"\n        plugin: sql\n        config:\n          driver: postgres\n          dsn: \"{{ .vars.db_dsn }}\"\n          commands:\n            - \"SELECT id, name, email, active FROM users WHERE id = {{ user_id }};\"\n        assertions:\n          - type: row_count\n            query_index: 0\n            expected: 1\n          - type: column_value\n            query_index: 0\n            row_index: 0\n            column: \"email\"\n            expected: \"{{ .vars.test_email }}\"\n          - type: column_value\n            query_index: 0\n            row_index: 0\n            column: \"active\"\n            expected: true\n\n      - name: \"Update user status\"\n        plugin: sql\n        config:\n          driver: postgres\n          dsn: \"{{ .vars.db_dsn }}\"\n          commands:\n            - \"UPDATE users SET active = false WHERE id = {{ user_id }};\"\n        assertions:\n          - type: success_count\n            expected: 1\n\n      - name: \"Delete user\"\n        plugin: sql\n        config:\n          driver: postgres\n          dsn: \"{{ .vars.db_dsn }}\"\n          commands:\n            - \"DELETE FROM users WHERE id = {{ user_id }};\"\n        assertions:\n          - type: success_count\n            expected: 1\n</code></pre>"},{"location":"examples/sql-testing/#local-database-setup","title":"Local Database Setup","text":""},{"location":"examples/sql-testing/#option-1-use-the-minikube-stack","title":"Option 1 \u2013 Use the Minikube stack","text":"<p><code>scripts/install-minikube.sh</code> brings up Temporal and Rocketship inside the cluster. After it finishes, port-forward the engine and execute the SQL example:</p> <pre><code>kubectl port-forward -n rocketship svc/rocketship-engine 7700:7700\nrocketship run -af examples/sql-testing/rocketship.yaml\n</code></pre>"},{"location":"examples/sql-testing/#option-2-standalone-docker-containers","title":"Option 2 \u2013 Standalone Docker containers","text":"<p>If you only need databases, launch them with Docker:</p> <pre><code># PostgreSQL\ndocker run --rm -d   --name rocketship-postgres   -e POSTGRES_PASSWORD=testpass   -e POSTGRES_DB=testdb   -p 5433:5432   postgres:13\n\n# MySQL\ndocker run --rm -d   --name rocketship-mysql   -e MYSQL_ROOT_PASSWORD=testpass   -e MYSQL_DATABASE=testdb   -p 3306:3306   mysql:8.0\n</code></pre> <p>Point the example DSNs at <code>postgres://postgres:testpass@localhost:5433/testdb?sslmode=disable</code> and <code>root:testpass@tcp(127.0.0.1:3306)/testdb</code>. Remember to shut them down when finished:</p> <pre><code>docker stop rocketship-postgres rocketship-mysql\n</code></pre>"},{"location":"examples/sql-testing/#best-practices","title":"Best Practices","text":""},{"location":"examples/sql-testing/#security","title":"Security","text":"<ul> <li>Use variables for connection strings to avoid hardcoding credentials</li> <li>Use least-privilege database users for testing</li> <li>Never commit real database credentials to version control</li> </ul>"},{"location":"examples/sql-testing/#performance","title":"Performance","text":"<ul> <li>Set appropriate timeouts for long-running queries</li> <li>Use connection pooling (handled automatically by the plugin)</li> <li>Test with realistic data volumes</li> </ul>"},{"location":"examples/sql-testing/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Test both successful and error scenarios</li> <li>Validate data integrity with assertions</li> <li>Use transactions when testing modifications</li> <li>Clean up test data to maintain test isolation</li> </ul>"},{"location":"examples/sql-testing/#error-handling","title":"Error Handling","text":"<pre><code>- name: \"Handle expected errors\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"{{ .vars.db_dsn }}\"\n    commands:\n      - \"SELECT * FROM nonexistent_table;\"\n  # This step will fail, which might be expected for negative testing\n</code></pre>"},{"location":"examples/sql-testing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/sql-testing/#connection-issues","title":"Connection Issues","text":"<ul> <li>Verify database service is running</li> <li>Check connection string format for your database type</li> <li>Ensure network connectivity and firewall settings</li> <li>Validate credentials and database permissions</li> </ul>"},{"location":"examples/sql-testing/#query-errors","title":"Query Errors","text":"<ul> <li>Check SQL syntax for your specific database</li> <li>Verify table and column names exist</li> <li>Ensure proper data types in INSERT/UPDATE operations</li> <li>Review database logs for detailed error messages</li> </ul>"},{"location":"examples/sql-testing/#assertion-failures","title":"Assertion Failures","text":"<ul> <li>Verify expected values match actual query results</li> <li>Check query indices and row indices in assertions</li> <li>Ensure column names are spelled correctly</li> <li>Review query results in logs for debugging</li> </ul>"},{"location":"examples/supabase-testing/","title":"Supabase Plugin - Full-Stack Database Testing","text":"<p>Test your entire Supabase stack\u2014database CRUD, authentication, storage, and RPC functions\u2014with Rocketship's Supabase plugin.</p>"},{"location":"examples/supabase-testing/#quick-start","title":"Quick Start","text":"<pre><code>- name: \"Query users\"\n  plugin: supabase\n  config:\n    url: \"{{ .env.SUPABASE_URL }}\"\n    key: \"{{ .env.SUPABASE_ANON_KEY }}\"\n    operation: \"select\"\n    table: \"users\"\n    select:\n      columns: [\"id\", \"name\", \"email\"]\n      filters:\n        - column: \"status\"\n          operator: \"eq\"\n          value: \"active\"\n</code></pre>"},{"location":"examples/supabase-testing/#operations","title":"Operations","text":""},{"location":"examples/supabase-testing/#crud-operations","title":"CRUD Operations","text":"<p>SELECT - Query with filtering, ordering, pagination: <pre><code>select:\n  columns: [\"id\", \"name\", \"email\"]\n  filters:\n    - column: \"status\"\n      operator: \"eq\"\n      value: \"active\"\n    - column: \"created_at\"\n      operator: \"gte\"\n      value: \"2024-01-01\"\n  order:\n    - column: \"created_at\"\n      ascending: false\n  limit: 10\n</code></pre></p> <p>INSERT - Create records: <pre><code>operation: \"insert\"\ntable: \"users\"\ninsert:\n  data:\n    name: \"John Doe\"\n    email: \"john@example.com\"\nsave:\n  - json_path: \".[0].id\"\n    as: \"user_id\"\n</code></pre></p> <p>UPDATE - Modify records: <pre><code>operation: \"update\"\ntable: \"users\"\nupdate:\n  data:\n    status: \"verified\"\n  filters:\n    - column: \"id\"\n      operator: \"eq\"\n      value: \"{{ user_id }}\"\n</code></pre></p> <p>DELETE - Remove records (filters required): <pre><code>operation: \"delete\"\ntable: \"users\"\ndelete:\n  filters:\n    - column: \"id\"\n      operator: \"eq\"\n      value: \"{{ user_id }}\"\n</code></pre></p>"},{"location":"examples/supabase-testing/#filter-operators","title":"Filter Operators","text":"<p><code>eq</code>, <code>neq</code>, <code>gt</code>, <code>gte</code>, <code>lt</code>, <code>lte</code>, <code>like</code>, <code>ilike</code>, <code>is</code>, <code>in</code></p> <pre><code>filters:\n  - column: \"status\"\n    operator: \"in\"\n    value: [\"active\", \"premium\"]\n  - column: \"name\"\n    operator: \"ilike\"\n    value: \"%smith%\"\n</code></pre>"},{"location":"examples/supabase-testing/#rpc-functions","title":"RPC Functions","text":"<pre><code>operation: \"rpc\"\nrpc:\n  function: \"get_user_count\"\n  params:\n    min_age: 18\nsave:\n  - json_path: \".\"\n    as: \"user_count\"\n</code></pre>"},{"location":"examples/supabase-testing/#authentication","title":"Authentication","text":""},{"location":"examples/supabase-testing/#sign-up","title":"Sign Up","text":"<pre><code>operation: \"auth_sign_up\"\nauth:\n  email: \"user@example.com\"\n  password: \"SecurePass123!\"\n  user_metadata:\n    name: \"John Doe\"\nsave:\n  - json_path: \".user.id\"\n    as: \"user_id\"\n</code></pre>"},{"location":"examples/supabase-testing/#sign-in-token-extraction","title":"Sign In &amp; Token Extraction","text":"<p>Extract tokens for authenticated requests:</p> <pre><code>operation: \"auth_sign_in\"\nauth:\n  email: \"{{ test_email }}\"\n  password: \"{{ test_password }}\"\nsave:\n  - json_path: \".session.access_token\"\n    as: \"access_token\"\n  - json_path: \".session.refresh_token\"\n    as: \"refresh_token\"\n</code></pre> <p>Use extracted tokens in HTTP requests: <pre><code>- name: \"Call protected endpoint\"\n  plugin: http\n  config:\n    url: \"{{ .env.API_URL }}/api/user/profile\"\n    headers:\n      Authorization: \"Bearer {{ access_token }}\"\n</code></pre></p>"},{"location":"examples/supabase-testing/#admin-operations-service-role","title":"Admin Operations (Service Role)","text":"<pre><code># Create user with auto-confirmation\noperation: \"auth_create_user\"\nauth:\n  email: \"admin-created@example.com\"\n  password: \"AdminPass123!\"\n  email_confirm: true  # Auto-confirm email\n  user_metadata:\n    role: \"staff\"\n\n# Delete user\noperation: \"auth_delete_user\"\nauth:\n  user_id: \"{{ user_id }}\"\n</code></pre>"},{"location":"examples/supabase-testing/#storage-operations","title":"Storage Operations","text":"<p>Create bucket: <pre><code>operation: \"storage_create_bucket\"\nstorage:\n  bucket: \"uploads\"\n  public: true\n</code></pre></p> <p>Upload file: <pre><code>operation: \"storage_upload\"\nstorage:\n  bucket: \"uploads\"\n  path: \"documents/test.txt\"\n  file_content: \"Test content\"\n  content_type: \"text/plain\"\n</code></pre></p> <p>Download file: <pre><code>operation: \"storage_download\"\nstorage:\n  bucket: \"uploads\"\n  path: \"documents/test.txt\"\n</code></pre></p>"},{"location":"examples/supabase-testing/#assertions","title":"Assertions","text":"<p>Check existence - Use <code>save</code> instead of assertions (fails if path doesn't exist): <pre><code>save:\n  - json_path: \".user.id\"\n    as: \"user_id\"  # Automatically validates existence\n</code></pre></p> <p>Exact value match: <pre><code>assertions:\n  - type: json_path\n    path: \".user.email\"\n    expected: \"test@example.com\"\n  - type: json_path\n    path: \".session.token_type\"\n    expected: \"bearer\"\n</code></pre></p> <p>Check array length: <pre><code>assertions:\n  - type: json_path\n    path: \"length\"\n    expected: 5\n</code></pre></p>"},{"location":"examples/supabase-testing/#complete-e2e-example","title":"Complete E2E Example","text":"<pre><code>name: \"User Authentication Flow\"\n\ntests:\n  - name: \"Complete user journey\"\n    steps:\n      # Generate unique credentials\n      - name: \"Generate credentials\"\n        plugin: script\n        config:\n          language: javascript\n          script: |\n            const suffix = Date.now();\n            save(\"test_email\", `test-${suffix}@example.com`);\n            save(\"test_password\", `Pass${suffix}!`);\n\n      # Create user\n      - name: \"Create user\"\n        plugin: supabase\n        config:\n          url: \"{{ .env.SUPABASE_URL }}\"\n          key: \"{{ .env.SUPABASE_SERVICE_KEY }}\"\n          operation: \"auth_create_user\"\n          auth:\n            email: \"{{ test_email }}\"\n            password: \"{{ test_password }}\"\n            email_confirm: true\n        save:\n          - json_path: \".user.id\"\n            as: \"user_id\"\n\n      # Sign in\n      - name: \"Authenticate\"\n        plugin: supabase\n        config:\n          url: \"{{ .env.SUPABASE_URL }}\"\n          key: \"{{ .env.SUPABASE_ANON_KEY }}\"\n          operation: \"auth_sign_in\"\n          auth:\n            email: \"{{ test_email }}\"\n            password: \"{{ test_password }}\"\n        save:\n          - json_path: \".session.access_token\"\n            as: \"access_token\"\n\n      # Use token in HTTP request\n      - name: \"Access protected endpoint\"\n        plugin: http\n        config:\n          method: \"GET\"\n          url: \"{{ .env.API_URL }}/api/user/profile\"\n          headers:\n            Authorization: \"Bearer {{ access_token }}\"\n        assertions:\n          - type: status_code\n            expected: 200\n\n      # Cleanup\n      - name: \"Delete user\"\n        plugin: supabase\n        config:\n          url: \"{{ .env.SUPABASE_URL }}\"\n          key: \"{{ .env.SUPABASE_SERVICE_KEY }}\"\n          operation: \"auth_delete_user\"\n          auth:\n            user_id: \"{{ user_id }}\"\n</code></pre>"},{"location":"examples/supabase-testing/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use environment variables for credentials: <pre><code>vars:\n  supabase_url: \"{{ .env.SUPABASE_URL }}\"\n  supabase_anon_key: \"{{ .env.SUPABASE_ANON_KEY }}\"\n  supabase_service_key: \"{{ .env.SUPABASE_SERVICE_KEY }}\"\n</code></pre></p> </li> <li> <p>Always clean up test data: <pre><code>- name: \"Cleanup\"\n  plugin: supabase\n  config:\n    operation: \"delete\"\n    table: \"test_data\"\n    delete:\n      filters:\n        - column: \"created_by\"\n          operator: \"eq\"\n          value: \"integration_test\"\n</code></pre></p> </li> <li> <p>Generate unique test data: <pre><code>script: |\n  const suffix = Date.now();\n  save(\"email\", `test-${suffix}@example.com`);\n</code></pre></p> </li> <li> <p>Test RLS policies by using different keys (anon vs service role)</p> </li> </ol>"},{"location":"examples/supabase-testing/#troubleshooting","title":"Troubleshooting","text":"<p>Enable debug logging for detailed operation information: <pre><code>ROCKETSHIP_LOG=DEBUG rocketship run -af your-test.yaml\n</code></pre></p> <p>Common Issues:</p> <ul> <li>Invalid credentials: Verify email/password, check if email confirmation is required</li> <li>Permission errors: Check RLS policies, use service role key for admin operations</li> <li>Table not found: Verify table exists and you have proper permissions</li> <li>Email already registered: Use unique emails with timestamps for each test run</li> </ul> <p>See the full example for comprehensive test coverage.</p>"},{"location":"examples/ai/agent-testing/","title":"Agent Plugin - AI-Powered Test Analysis","text":"<p>Use AI to analyze test data, validate complex responses, and make intelligent assertions. The agent plugin executes LLM prompts within your test workflow.</p>"},{"location":"examples/ai/agent-testing/#prerequisites","title":"Prerequisites","text":"<pre><code># Set API key (OpenAI or Anthropic)\nexport OPENAI_API_KEY=sk-your-key-here\n# OR\nexport ANTHROPIC_API_KEY=sk-ant-your-key-here\n</code></pre>"},{"location":"examples/ai/agent-testing/#basic-usage","title":"Basic Usage","text":"<pre><code>- name: \"Analyze API response\"\n  plugin: agent\n  config:\n    prompt: \"Is this response valid? {{ api_response }}\"\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    output_format: \"text\"\n  save:\n    - json_path: \".result\"\n      as: \"analysis\"\n</code></pre>"},{"location":"examples/ai/agent-testing/#configuration","title":"Configuration","text":""},{"location":"examples/ai/agent-testing/#required-fields","title":"Required Fields","text":"<pre><code>config:\n  prompt: \"Your question or instruction\"  # Required: what to ask the LLM\n  llm:                                     # Required: LLM configuration\n    provider: \"openai\"                     # \"openai\" or \"anthropic\"\n    model: \"gpt-4o\"                        # Model name\n    config:\n      OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n</code></pre>"},{"location":"examples/ai/agent-testing/#optional-fields","title":"Optional Fields","text":"<pre><code>config:\n  output_format: \"json\"        # \"json\" or \"text\" (default: \"json\")\n  system_prompt: \"...\"         # System instructions for the LLM\n  timeout: \"1m\"                # Max execution time (default: 1m)\n  mode: \"single\"               # \"single\", \"continue\", or \"resume\"\n</code></pre>"},{"location":"examples/ai/agent-testing/#llm-providers","title":"LLM Providers","text":""},{"location":"examples/ai/agent-testing/#openai","title":"OpenAI","text":"<pre><code>llm:\n  provider: \"openai\"\n  model: \"gpt-4o\"  # or \"gpt-4\", \"gpt-3.5-turbo\"\n  config:\n    OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n</code></pre>"},{"location":"examples/ai/agent-testing/#anthropic","title":"Anthropic","text":"<pre><code>llm:\n  provider: \"anthropic\"\n  model: \"claude-3-5-sonnet-20241022\"  # or other Claude models\n  config:\n    ANTHROPIC_API_KEY: \"{{ .env.ANTHROPIC_API_KEY }}\"\n</code></pre>"},{"location":"examples/ai/agent-testing/#output-formats","title":"Output Formats","text":""},{"location":"examples/ai/agent-testing/#json-format","title":"JSON Format","text":"<p>Request structured output:</p> <pre><code>- name: \"Validate user data\"\n  plugin: agent\n  config:\n    prompt: |\n      Analyze this user data: {{ user_json }}\n      Return JSON with:\n      {\n        \"valid\": boolean,\n        \"issues\": [list of issues],\n        \"confidence\": number (0-100)\n      }\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    output_format: \"json\"\n  save:\n    - json_path: \".result.valid\"\n      as: \"is_valid\"\n    - json_path: \".result.confidence\"\n      as: \"confidence_score\"\n  assertions:\n    - type: \"json_path\"\n      path: \".result.valid\"\n      expected: true\n</code></pre>"},{"location":"examples/ai/agent-testing/#text-format","title":"Text Format","text":"<p>Simple yes/no or descriptive answers:</p> <pre><code>- name: \"Check response quality\"\n  plugin: agent\n  config:\n    prompt: \"Does this API response contain complete user information? {{ response }}\"\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    output_format: \"text\"\n  save:\n    - json_path: \".result\"\n      as: \"answer\"\n</code></pre>"},{"location":"examples/ai/agent-testing/#execution-modes","title":"Execution Modes","text":""},{"location":"examples/ai/agent-testing/#single-mode-default","title":"Single Mode (Default)","text":"<p>One-off prompt execution:</p> <pre><code>mode: \"single\"  # Default, can be omitted\n</code></pre>"},{"location":"examples/ai/agent-testing/#continue-mode","title":"Continue Mode","text":"<p>Multi-turn conversation with previous context:</p> <pre><code>- name: \"Initial analysis\"\n  plugin: agent\n  config:\n    prompt: \"Analyze this data: {{ data }}\"\n    mode: \"single\"\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n\n- name: \"Follow-up question\"\n  plugin: agent\n  config:\n    prompt: \"Based on your previous analysis, what are the top 3 issues?\"\n    mode: \"continue\"  # Continues previous conversation\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n</code></pre>"},{"location":"examples/ai/agent-testing/#resume-mode","title":"Resume Mode","text":"<p>Pick up from a specific conversation:</p> <pre><code>- name: \"Resume analysis\"\n  plugin: agent\n  config:\n    prompt: \"Continue from where we left off\"\n    mode: \"resume\"\n    conversation_id: \"{{ previous_conversation_id }}\"\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n</code></pre>"},{"location":"examples/ai/agent-testing/#common-use-cases","title":"Common Use Cases","text":""},{"location":"examples/ai/agent-testing/#api-response-validation","title":"API Response Validation","text":"<pre><code>- name: \"Fetch user data\"\n  plugin: http\n  config:\n    url: \"{{ .env.API_BASE_URL }}/users/123\"\n  save:\n    - json_path: \".\"\n      as: \"user_data\"\n\n- name: \"Validate completeness\"\n  plugin: agent\n  config:\n    prompt: |\n      Check if this user data is complete: {{ user_data }}\n      Required fields: id, email, name, created_at\n      Return JSON: {\"valid\": true/false, \"missing_fields\": []}\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    output_format: \"json\"\n  assertions:\n    - type: \"json_path\"\n      path: \".result.valid\"\n      expected: true\n</code></pre>"},{"location":"examples/ai/agent-testing/#intelligent-test-data-generation","title":"Intelligent Test Data Generation","text":"<pre><code>- name: \"Generate test data\"\n  plugin: agent\n  config:\n    prompt: |\n      Generate 5 realistic user profiles in JSON format.\n      Each should have: name, email, age, city\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    output_format: \"json\"\n  save:\n    - json_path: \".result\"\n      as: \"test_users\"\n</code></pre>"},{"location":"examples/ai/agent-testing/#log-analysis","title":"Log Analysis","text":"<pre><code>- name: \"Analyze error logs\"\n  plugin: agent\n  config:\n    prompt: |\n      Analyze these error logs: {{ error_logs }}\n      Identify patterns and root causes.\n      Return JSON: {\n        \"error_count\": number,\n        \"patterns\": [strings],\n        \"root_cause\": string,\n        \"severity\": \"low|medium|high\"\n      }\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    output_format: \"json\"\n</code></pre>"},{"location":"examples/ai/agent-testing/#complex-assertions","title":"Complex Assertions","text":"<pre><code>- name: \"Intelligent validation\"\n  plugin: agent\n  config:\n    prompt: |\n      Compare expected vs actual responses:\n      Expected: {{ expected_response }}\n      Actual: {{ actual_response }}\n\n      Are they semantically equivalent, ignoring minor formatting differences?\n      Return JSON: {\"equivalent\": true/false, \"differences\": []}\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    output_format: \"json\"\n  assertions:\n    - type: \"json_path\"\n      path: \".result.equivalent\"\n      expected: true\n</code></pre>"},{"location":"examples/ai/agent-testing/#best-practices","title":"Best Practices","text":"<p>Clear, Specific Prompts: Tell the LLM exactly what you want <pre><code># \u274c Vague\nprompt: \"Check this data\"\n\n# \u2705 Specific\nprompt: \"Validate that this user data contains all required fields (id, email, name) and email is valid format\"\n</code></pre></p> <p>Structured Output: Use JSON for reliable parsing <pre><code>output_format: \"json\"  # Easier to assert on\n# vs\noutput_format: \"text\"  # Harder to parse\n</code></pre></p> <p>System Prompts: Set consistent behavior <pre><code>system_prompt: \"You are a test validation assistant. Always return concise, structured JSON responses.\"\n</code></pre></p> <p>Handle Optional Data: Use <code>required: false</code> for optional saves <pre><code>save:\n  - json_path: \".result.optional_field\"\n    as: \"optional_value\"\n    required: false\n</code></pre></p>"},{"location":"examples/ai/agent-testing/#troubleshooting","title":"Troubleshooting","text":"<p>API key errors: Check environment variables <pre><code>echo $OPENAI_API_KEY\necho $ANTHROPIC_API_KEY\n</code></pre></p> <p>Timeout errors: Increase timeout for complex prompts <pre><code>timeout: \"2m\"  # For complex analysis\n</code></pre></p> <p>JSON parsing fails: Ensure output_format is \"json\" and prompt requests JSON <pre><code>output_format: \"json\"\nprompt: \"Return JSON with structure: {\\\"field\\\": \\\"value\\\"}\"\n</code></pre></p>"},{"location":"examples/ai/agent-testing/#running-examples","title":"Running Examples","text":"<pre><code># Run agent tests\nrocketship run -af examples/agent-testing/rocketship.yaml\n\n# With specific env file\nrocketship run -af examples/agent-testing/rocketship.yaml \\\n  --env-file .env\n</code></pre>"},{"location":"examples/ai/browser-testing/","title":"Browser Plugin - AI-Powered Web Automation","text":"<p>Test web applications using AI-driven browser automation. The browser plugin uses natural language instructions to navigate websites, extract data, and validate interfaces.</p>"},{"location":"examples/ai/browser-testing/#prerequisites","title":"Prerequisites","text":"<pre><code># Install dependencies (automatic on first use)\npip install browser-use playwright\nplaywright install chromium\n\n# Set API key (OpenAI or Anthropic)\nexport OPENAI_API_KEY=sk-your-key-here\n# OR\nexport ANTHROPIC_API_KEY=sk-ant-your-key-here\n</code></pre>"},{"location":"examples/ai/browser-testing/#basic-usage","title":"Basic Usage","text":"<pre><code>- name: \"Check website content\"\n  plugin: browser\n  config:\n    task: \"Navigate to https://example.com and extract the main heading\"\n    llm:\n      provider: \"openai\"  # or \"anthropic\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    headless: true\n    timeout: \"1m\"\n  save:\n    - json_path: \".result\"\n      as: \"page_content\"\n  assertions:\n    - type: \"json_path\"\n      path: \".success\"\n      expected: true\n</code></pre>"},{"location":"examples/ai/browser-testing/#configuration","title":"Configuration","text":""},{"location":"examples/ai/browser-testing/#required-fields","title":"Required Fields","text":"<pre><code>config:\n  task: \"Natural language instruction\"  # What the browser should do\n  llm:                                   # LLM provider configuration\n    provider: \"openai\"                   # \"openai\" or \"anthropic\"\n    model: \"gpt-4o\"                      # Model name\n    config:\n      OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n</code></pre>"},{"location":"examples/ai/browser-testing/#optional-fields","title":"Optional Fields","text":"<pre><code>config:\n  headless: true               # Run without visible browser (default: true)\n  timeout: \"2m\"                # Max execution time (default: 2m)\n  use_vision: false            # Enable visual analysis (default: false)\n  max_actions_per_step: 10     # Action limit per step (default: 10)\n  allowed_domains:             # Restrict navigation (optional)\n    - \"example.com\"\n    - \"api.example.com\"\n  viewport:                    # Custom browser size\n    width: 1920\n    height: 1080\n</code></pre>"},{"location":"examples/ai/browser-testing/#llm-providers","title":"LLM Providers","text":""},{"location":"examples/ai/browser-testing/#openai","title":"OpenAI","text":"<pre><code>llm:\n  provider: \"openai\"\n  model: \"gpt-4o\"  # or \"gpt-4\", \"gpt-3.5-turbo\"\n  config:\n    OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n</code></pre>"},{"location":"examples/ai/browser-testing/#anthropic","title":"Anthropic","text":"<pre><code>llm:\n  provider: \"anthropic\"\n  model: \"claude-3-5-sonnet-20241022\"  # or other Claude models\n  config:\n    ANTHROPIC_API_KEY: \"{{ .env.ANTHROPIC_API_KEY }}\"\n</code></pre>"},{"location":"examples/ai/browser-testing/#save-assert","title":"Save &amp; Assert","text":""},{"location":"examples/ai/browser-testing/#extract-data","title":"Extract Data","text":"<pre><code>- name: \"Scrape product info\"\n  plugin: browser\n  config:\n    task: \"Go to https://example.com/product and extract the price and title\"\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n  save:\n    - json_path: \".result\"\n      as: \"product_data\"\n    - json_path: \".actions_taken\"\n      as: \"action_count\"\n</code></pre>"},{"location":"examples/ai/browser-testing/#assert-success","title":"Assert Success","text":"<pre><code>assertions:\n  - type: \"json_path\"\n    path: \".success\"\n    expected: true\n  - type: \"json_path\"\n    path: \".actions_taken\"\n    exists: true\n</code></pre>"},{"location":"examples/ai/browser-testing/#common-use-cases","title":"Common Use Cases","text":""},{"location":"examples/ai/browser-testing/#web-application-testing","title":"Web Application Testing","text":"<pre><code>- name: \"Test login flow\"\n  plugin: browser\n  config:\n    task: |\n      1. Go to https://app.example.com/login\n      2. Enter email: test@example.com\n      3. Enter password: testpass123\n      4. Click login button\n      5. Verify you see the dashboard\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    timeout: \"3m\"\n</code></pre>"},{"location":"examples/ai/browser-testing/#data-extraction","title":"Data Extraction","text":"<pre><code>- name: \"Scrape pricing table\"\n  plugin: browser\n  config:\n    task: \"Navigate to https://example.com/pricing and extract all plan names and prices\"\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    use_vision: true  # Better for visual elements\n  save:\n    - json_path: \".result\"\n      as: \"pricing_data\"\n</code></pre>"},{"location":"examples/ai/browser-testing/#form-submission","title":"Form Submission","text":"<pre><code>- name: \"Fill contact form\"\n  plugin: browser\n  config:\n    task: |\n      Go to https://example.com/contact\n      Fill in:\n      - Name: Test User\n      - Email: test@example.com\n      - Message: Automated test message\n      Click submit\n      Verify success message appears\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    headless: false  # Watch it work\n</code></pre>"},{"location":"examples/ai/browser-testing/#multi-step-workflows","title":"Multi-Step Workflows","text":"<pre><code>tests:\n  - name: \"Complete purchase flow\"\n    steps:\n      - name: \"Browse products\"\n        plugin: browser\n        config:\n          task: \"Go to https://shop.example.com and find the first product\"\n          llm:\n            provider: \"openai\"\n            model: \"gpt-4o\"\n            config:\n              OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n        save:\n          - json_path: \".result\"\n            as: \"product_url\"\n\n      - name: \"Add to cart\"\n        plugin: browser\n        config:\n          task: \"Go to {{ product_url }} and click add to cart\"\n          llm:\n            provider: \"openai\"\n            model: \"gpt-4o\"\n            config:\n              OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n\n      - name: \"Checkout\"\n        plugin: browser\n        config:\n          task: \"Navigate to cart and proceed to checkout\"\n          llm:\n            provider: \"openai\"\n            model: \"gpt-4o\"\n            config:\n              OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n</code></pre>"},{"location":"examples/ai/browser-testing/#best-practices","title":"Best Practices","text":"<p>Clear Instructions: Be specific about what the browser should do <pre><code># \u274c Vague\ntask: \"Check the website\"\n\n# \u2705 Specific\ntask: \"Navigate to https://example.com/products, click on the first product, and extract its price\"\n</code></pre></p> <p>Appropriate Timeouts: Complex tasks need more time <pre><code># Simple navigation: 1m\n# Form filling: 2-3m\n# Multi-page workflows: 5m+\ntimeout: \"3m\"\n</code></pre></p> <p>Headless vs Headful: - Use <code>headless: true</code> for CI/CD and faster execution - Use <code>headless: false</code> for debugging and watching the browser</p> <p>Vision Mode: Enable for visual elements (charts, images) <pre><code>use_vision: true  # Better accuracy for visual content, slower execution\n</code></pre></p> <p>Restrict Domains: Prevent navigation to unexpected sites <pre><code>allowed_domains:\n  - \"example.com\"\n  - \"app.example.com\"\n</code></pre></p>"},{"location":"examples/ai/browser-testing/#troubleshooting","title":"Troubleshooting","text":"<p>Browser won't start: Install Playwright browsers <pre><code>playwright install chromium\n</code></pre></p> <p>Timeout errors: Increase timeout or simplify task <pre><code>timeout: \"5m\"  # For complex workflows\n</code></pre></p> <p>Actions not working: Add debug logging <pre><code>- name: \"Debug browser actions\"\n  plugin: log\n  config:\n    message: \"Actions taken: {{ action_count }}\"\n</code></pre></p> <p>Navigation fails: Check allowed_domains <pre><code>allowed_domains:\n  - \"*.example.com\"  # Allow all subdomains\n</code></pre></p>"},{"location":"examples/ai/browser-testing/#running-examples","title":"Running Examples","text":"<pre><code># Run browser tests\nrocketship run -af examples/browser-testing/rocketship.yaml\n\n# With specific env file\nrocketship run -af examples/browser-testing/rocketship.yaml \\\n  --env-file .env\n</code></pre>"},{"location":"examples/http/openapi-validation/","title":"Contract Validation for HTTP Steps","text":"<p>Rocketship can validate every HTTP request and response against an OpenAPI v3 contract. The validator now lives at the suite level, so you configure it once and inherit the settings everywhere.</p>"},{"location":"examples/http/openapi-validation/#suite-level-defaults","title":"Suite-Level Defaults","text":"<pre><code>openapi:\n  spec: \"./contracts/checkout.yaml\"\n  cache_ttl: \"30m\"\n  validate_request: true\n  validate_response: true\n</code></pre> <ul> <li><code>spec</code> accepts relative or absolute filesystem paths and HTTP(S) URLs.</li> <li>YAML and JSON OpenAPI documents are both supported; <code>github.com/pb33f/libopenapi-validator</code> auto-detects the format.</li> <li><code>cache_ttl</code> controls how long a contract stays cached (default 30 minutes). Raise or lower it depending on how often specs change.</li> <li>Bump the optional <code>version</code> string (<code>version: \"2024-03-15\"</code>) whenever you publish a new contract to force an immediate refresh.</li> <li>Form-encoded payloads (<code>application/x-www-form-urlencoded</code>) and other common content types are validated automatically\u2014just use the HTTP plugin\u2019s <code>form</code> config block.</li> </ul>"},{"location":"examples/http/openapi-validation/#step-level-overrides","title":"Step-Level Overrides","text":"<p>Sometimes you need to skip a check for a particular scenario (for example, sending intentionally malformed data). Add an <code>openapi</code> block on the step to toggle behaviour:</p> <pre><code>- name: \"Submit malformed payload\"\n  plugin: http\n  config:\n    method: POST\n    url: https://api.example.com/orders\n    body: '{\"sku\": \"broken\"}'\n    openapi:\n      validate_request: false\n</code></pre> <p>You can also point a specific step at a different <code>spec</code>, require an <code>operation_id</code>, or disable response validation.</p>"},{"location":"examples/http/openapi-validation/#example-combined-with-request-chaining","title":"Example Combined with Request Chaining","text":"<p>The request-chaining suite uses a single contract:</p> <pre><code>openapi:\n  spec: \"./contracts/tryme.yaml\"\n  cache_ttl: \"30m\"\n</code></pre> <p>Every HTTP step inherits that contract. One step turns off <code>validate_request</code> to test how the server handles malformed input:</p> <pre><code>- name: \"Create second car\"\n  plugin: http\n  config:\n    method: \"POST\"\n    url: \"https://tryme.rocketship.sh/cars\"\n    body: '{\"make\":\"Honda\",\"model\":\"Civic\"}'\n    openapi:\n      validate_request: false\n</code></pre> <p>With the contract in place, Rocketship fails the run if the server returns extra fields, the wrong status code, or a payload that violates the schema. All failures include the underlying <code>libopenapi-validator</code> error details.</p>"},{"location":"examples/http/openapi-validation/#cache-behaviour","title":"Cache Behaviour","text":"<ul> <li>Entries expire automatically after the configured <code>cache_ttl</code>.</li> <li>Local specs refresh as soon as their modification time changes.</li> <li>Remote specs refresh when the TTL expires or when you bump the <code>version</code> field.</li> </ul>"},{"location":"examples/http/openapi-validation/#known-issues","title":"Known Issues","text":"<ul> <li>Literal paths can still lose precedence to templated paths in <code>libopenapi-validator</code> (see <code>/Messages/Operations</code> vs <code>/Messages/{message_id}</code>) until the upstream matcher is fixed.</li> <li>The validator currently skips <code>multipart/form-data</code> and other complex encodings because the upstream library lacks decoders for those media types.</li> <li>Server <code>host</code>/<code>scheme</code> variables, callbacks, webhooks, and links defined in the OpenAPI document are not yet validated.</li> <li>Validation errors come directly from <code>github.com/pb33f/libopenapi-validator</code>; behaviour may change as the library evolves.</li> </ul>"},{"location":"examples/http/openapi-validation/#next-steps","title":"Next Steps","text":"<ul> <li>Build the full HTTP Request Chaining flow.</li> <li>Combine delays and contract validation for resilient suites by pairing this guide with Managing Delays.</li> </ul>"},{"location":"examples/http/request-chaining/","title":"HTTP Request Chaining","text":"<p>Rocketship's HTTP plugin lets you stitch multiple calls together by passing data from one response into the next. This example extends the original request-chaining suite so you can see how state flows across steps while the delay plugin keeps the external system stable. For timing specifics, check out the Managing Delays guide.</p>"},{"location":"examples/http/request-chaining/#full-test-specification","title":"Full Test Specification","text":"<pre><code>name: \"Request Chaining Example\"\ndescription: \"Chaining POST/GET/DELETE calls against the tryme server\"\nopenapi:\n  spec: \"./contracts/tryme.yaml\"\n  cache_ttl: \"30m\"\ntests:\n  - name: \"Car Management Flow\"\n    steps:\n      - name: \"Create first car\"\n        plugin: \"http\"\n        config:\n          method: \"POST\"\n          url: \"https://tryme.rocketship.sh/cars\"\n          body: |\n            {\n              \"make\": \"Toyota\",\n              \"model\": \"Corolla\",\n              \"year\": 2020\n            }\n        assertions:\n          - type: \"status_code\"\n            expected: 200\n          - type: \"header\"\n            name: \"content-type\"\n            expected: \"application/json\"\n          - type: \"json_path\"\n            path: \".make\"\n            expected: \"Toyota\"\n        save:\n          - json_path: \".id\"\n            as: \"first_car_id\"\n          - json_path: \".model\"\n            as: \"first_car_model\"\n          - header: \"server\"\n            as: \"server_info\"\n\n      - name: \"Wait for system processing\"\n        plugin: \"delay\"\n        config:\n          duration: \"1s\"\n\n      - name: \"Create second car\"\n        plugin: \"http\"\n        config:\n          method: \"POST\"\n          url: \"https://tryme.rocketship.sh/cars\"\n          body: |\n            {\n              \"make\": \"Honda\",\n              \"model\": \"Civic\",\n              \"year\": 2022,\n              \"server_used\": \"{{ server_info }}\"\n            }\n        assertions:\n          - type: \"status_code\"\n            expected: 200\n        save:\n          - json_path: \".id\"\n            as: \"second_car_id\"\n\n      - name: \"List all cars\"\n        plugin: \"http\"\n        config:\n          method: \"GET\"\n          url: \"https://tryme.rocketship.sh/cars\"\n        assertions:\n          - type: \"status_code\"\n            expected: 200\n          - type: \"json_path\"\n            path: \".cars_0.make\"\n            expected: \"Toyota\"\n          - type: \"json_path\"\n            path: \".cars_1.make\"\n            expected: \"Honda\"\n          - type: \"json_path\"\n            path: \".cars_1.server_used\"\n            expected: \"{{ server_info }}\"\n\n      - name: \"Cleanup - Delete first car\"\n        plugin: \"http\"\n        config:\n          method: \"DELETE\"\n          url: \"https://tryme.rocketship.sh/cars/{{ first_car_id }}\"\n        assertions:\n          - type: \"status_code\"\n            expected: 204\n\n      - name: \"Cleanup - Delete second car\"\n        plugin: \"http\"\n        config:\n          method: \"DELETE\"\n          url: \"https://tryme.rocketship.sh/cars/{{ second_car_id }}\"\n        assertions:\n          - type: \"status_code\"\n            expected: 204\n</code></pre>"},{"location":"examples/http/request-chaining/#key-techniques","title":"Key Techniques","text":""},{"location":"examples/http/request-chaining/#request-chaining","title":"Request Chaining","text":"<ul> <li>Persist IDs (<code>save</code> block) to drive later requests.</li> <li>Reuse headers (<code>server_info</code>) captured from earlier responses.</li> <li>Mix HTTP verbs (POST, GET, DELETE) inside the same flow.</li> </ul>"},{"location":"examples/http/request-chaining/#header-and-body-operations","title":"Header and Body Operations","text":"<ul> <li>Validate headers with <code>type: \"header\"</code> assertions.</li> <li>Save header values and inject them into future request bodies.</li> <li>Apply JSONPath assertions to ensure the API echoes chained state correctly.</li> </ul>"},{"location":"examples/http/request-chaining/#assertions","title":"Assertions","text":"<ul> <li>Combine status codes, headers, and JSONPath checks for comprehensive validation.</li> <li>Reference saved runtime values in assertions to guarantee chained data propagated.</li> </ul>"},{"location":"examples/http/request-chaining/#running-the-example","title":"Running the Example","text":"<pre><code>rocketship run -af examples/request-chaining/rocketship.yaml\n</code></pre> <p>The example YAML above matches the suite shipped in <code>examples/request-chaining/rocketship.yaml</code>, so you can experiment immediately.</p>"},{"location":"examples/http/request-chaining/#understanding-the-flow","title":"Understanding the Flow","text":"<ol> <li>Create first car \u2013 capture the new car ID, its model, and the upstream <code>server</code> header.</li> <li>Delay \u2013 give the remote service a moment to settle before reusing data (details in Managing Delays).</li> <li>Create second car \u2013 reuse the header value inside the body and save another ID.</li> <li>Aggregate read \u2013 verify both cars exist and the reused header value appears in the second payload.</li> <li>Cleanup \u2013 delete both resources to keep the shared tryme environment tidy.</li> </ol> <p>Next, dive into Contract Validation to see how this same suite enforces the OpenAPI schema.</p>"},{"location":"examples/logging/log-plugin/","title":"Log Plugin","text":"<p>The log plugin allows you to add custom logging messages to your test suites for debugging, monitoring, and progress tracking. Log messages appear in the CLI output during test execution.</p>"},{"location":"examples/logging/log-plugin/#configuration","title":"Configuration","text":"<pre><code>plugin: log\nconfig:\n  message: \"Your log message here\"\n</code></pre>"},{"location":"examples/logging/log-plugin/#basic-usage","title":"Basic Usage","text":"<pre><code>name: Basic Logging Example\ntests:\n  - name: Test with logging\n    steps:\n      - plugin: log\n        config:\n          message: \"Starting test execution\"\n\n      - plugin: http\n        config:\n          url: \"https://tryme.rocketship.sh/echo\"\n          method: \"GET\"\n\n      - plugin: log\n        config:\n          message: \"HTTP request completed\"\n</code></pre>"},{"location":"examples/logging/log-plugin/#variable-support","title":"Variable Support","text":"<p>The log plugin supports all variable types including configuration variables, environment variables, and runtime variables:</p> <pre><code>name: Logging with Variables\nconfig:\n  session: \"test-session-123\"\ntests:\n  - name: Variable logging example\n    steps:\n      - plugin: log\n        config:\n          message: \"Starting test for session: {{ .vars.session }}\"\n\n      - plugin: http\n        config:\n          url: \"https://tryme.rocketship.sh/echo\"\n          method: \"GET\"\n        save:\n          - key: \"response_data\"\n            value: \"{{ .response.json }}\"\n\n      - plugin: log\n        config:\n          message: \"User agent: {{ .runtime.response_data.headers.User-Agent }}\"\n\n      - plugin: log\n        config:\n          message: \"Test running on: {{ .env.HOSTNAME }}\"\n</code></pre>"},{"location":"examples/logging/log-plugin/#example-output","title":"Example Output","text":"<p>When running tests:</p> <pre><code>rocketship run -af examples/simple-log/rocketship.yaml\n</code></pre> <p>You'll see log messages in the output: <pre><code>\ud83d\ude80 Starting user-service tests in staging environment\nRunning on user's machine at /home/user\nCreated test data with ID: test_1234567890, Status: active\n\u26a0\ufe0f  Warning: This is a simulated warning during testing\n\u2705 Test completed successfully for user-service\n</code></pre></p>"},{"location":"examples/logging/log-plugin/#use-cases","title":"Use Cases","text":"<ul> <li>Progress Tracking: Log milestones in long-running tests</li> <li>Debug Information: Output variable values and intermediate results</li> <li>Test Documentation: Add context about what each step is doing</li> <li>Monitoring: Track important events during test execution</li> </ul> <p>Log messages always appear in the CLI output regardless of the logging level, making them perfect for providing real-time feedback during test execution.</p>"},{"location":"examples/reliability/delays/","title":"Managing Delays in HTTP Test Suites","text":"<p>Most real-world APIs need a short breather between operations. Rocketship\u2019s <code>delay</code> plugin gives you deterministic pauses so eventual consistency and background work do not break your flows.</p>"},{"location":"examples/reliability/delays/#delay-plugin-basics","title":"Delay Plugin Basics","text":"<pre><code>- name: \"Wait for system processing\"\n  plugin: \"delay\"\n  config:\n    duration: \"1s\"\n</code></pre> <ul> <li><code>duration</code> accepts Go-style intervals (<code>500ms</code>, <code>2s</code>, <code>1m</code>).</li> <li>Combine multiple delays with different values to smooth out spikes or let async jobs finish.</li> </ul>"},{"location":"examples/reliability/delays/#where-delays-fit-in-the-request-chaining-example","title":"Where Delays Fit in the Request-Chaining Example","text":"<p>The HTTP Request Chaining suite pauses twice:</p> <ol> <li>After creating the first car \u2013 a one-second delay so the remote service persists state before the next POST.</li> <li>Before reading aggregated data \u2013 a shorter pause ensures both creations are visible when the GET call runs.</li> </ol> <p>Feel free to tweak the durations and observe how the tryme service responds. When tests run inside the Docker stack, a bit of extra buffer keeps shared infrastructure happy.</p>"},{"location":"examples/reliability/delays/#best-practices","title":"Best Practices","text":"<ul> <li>Prefer the shortest delay that stabilises the external dependency.</li> <li>Use descriptive step names (<code>\"Wait for search index\"</code>) so reviewers know why the pause exists.</li> <li>Keep delays close to the operations they protect.</li> <li>Combine with assertions that notice stale state; if the API is still catching up, consider retry policies.</li> </ul>"},{"location":"examples/reliability/delays/#related-reading","title":"Related Reading","text":"<ul> <li>HTTP Request Chaining \u2013 full end-to-end workflow using saved state and cleanup steps.</li> <li>Contract Validation \u2013 ensure responses conform to the OpenAPI contract even after delayed operations.</li> </ul>"},{"location":"examples/reliability/retry-policies/","title":"Retry Policies","text":"<p>Configure automatic retries for any step to improve test reliability when dealing with flaky services or network issues.</p>"},{"location":"examples/reliability/retry-policies/#basic-usage","title":"Basic Usage","text":"<p>Add a <code>retry</code> configuration to any step:</p> <pre><code>- name: \"HTTP request with retry\"\n  plugin: \"http\"\n  config:\n    method: \"GET\"\n    url: \"https://api.example.com/users\"\n  retry:\n    maximum_attempts: 3\n    initial_interval: \"1s\"\n    backoff_coefficient: 2.0\n</code></pre>"},{"location":"examples/reliability/retry-policies/#configuration-options","title":"Configuration Options","text":"Option Type Description Example <code>maximum_attempts</code> integer Maximum retry attempts <code>3</code> <code>initial_interval</code> string Initial retry delay <code>\"1s\"</code>, <code>\"500ms\"</code> <code>maximum_interval</code> string Maximum retry delay <code>\"30s\"</code>, <code>\"5m\"</code> <code>backoff_coefficient</code> number Exponential backoff multiplier <code>2.0</code> <code>non_retryable_errors</code> array Error types to never retry <code>[\"ValidationError\"]</code>"},{"location":"examples/reliability/retry-policies/#plugin-support","title":"Plugin Support","text":"<p>Retry works with all plugins:</p> <pre><code># HTTP requests\n- name: \"API call\"\n  plugin: \"http\"\n  retry:\n    maximum_attempts: 5\n    initial_interval: \"2s\"\n\n# Database queries  \n- name: \"Database check\"\n  plugin: \"sql\"\n  retry:\n    maximum_attempts: 3\n    initial_interval: \"1s\"\n\n# Even delays\n- name: \"Wait step\"\n  plugin: \"delay\"\n  retry:\n    maximum_attempts: 2\n</code></pre>"},{"location":"examples/reliability/retry-policies/#examples","title":"Examples","text":""},{"location":"examples/reliability/retry-policies/#exponential-backoff","title":"Exponential Backoff","text":"<pre><code>retry:\n  maximum_attempts: 4\n  initial_interval: \"1s\"\n  maximum_interval: \"16s\"\n  backoff_coefficient: 2.0\n# Retries: 1s \u2192 2s \u2192 4s \u2192 8s\n</code></pre>"},{"location":"examples/reliability/retry-policies/#linear-backoff","title":"Linear Backoff","text":"<pre><code>retry:\n  maximum_attempts: 3\n  initial_interval: \"5s\"\n  backoff_coefficient: 1.0\n# Retries: 5s \u2192 5s \u2192 5s\n</code></pre>"},{"location":"examples/reliability/retry-policies/#skip-certain-errors","title":"Skip Certain Errors","text":"<pre><code>retry:\n  maximum_attempts: 3\n  non_retryable_errors: [\"AuthenticationError\", \"ValidationError\"]\n</code></pre> <p>Backward Compatibility</p> <p>Steps without retry configuration use the default single-attempt behavior.</p>"},{"location":"examples/scripting/custom-scripting/","title":"Custom Scripting - JavaScript Integration","text":"<p>Execute custom JavaScript code within your test workflows for complex data processing, validation, and business logic.</p>"},{"location":"examples/scripting/custom-scripting/#quick-start","title":"Quick Start","text":"<pre><code>- name: \"Process data\"\n  plugin: \"script\"\n  config:\n    language: \"javascript\"\n    script: |\n      // Access state from previous steps\n      let userName = state.user_name;\n\n      // Process and save data\n      let processedName = userName.toUpperCase();\n      save(\"processed_name\", processedName);\n\n      // Validate data\n      assert(userName.length &gt; 0, \"User name must not be empty\");\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#configuration-modes","title":"Configuration Modes","text":""},{"location":"examples/scripting/custom-scripting/#inline-scripts","title":"Inline Scripts","text":"<pre><code>plugin: \"script\"\nconfig:\n  language: \"javascript\"\n  script: |\n    // Your JavaScript code here\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#external-files","title":"External Files","text":"<pre><code>plugin: \"script\"\nconfig:\n  language: \"javascript\"\n  file: \"scripts/validate-and-process.js\"\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#built-in-functions","title":"Built-in Functions","text":""},{"location":"examples/scripting/custom-scripting/#savekey-value","title":"<code>save(key, value)</code>","text":"<p>Save data to test state for use in subsequent steps:</p> <pre><code>// Save simple values\nsave(\"user_count\", \"42\");\nsave(\"status\", \"active\");\n\n// Save complex data as JSON\nconst profile = { name: \"John\", age: 30 };\nsave(\"user_profile\", JSON.stringify(profile));\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#assertcondition-message","title":"<code>assert(condition, message)</code>","text":"<p>Validate data and fail the test if conditions aren't met:</p> <pre><code>// Basic assertions\nassert(state.user_id, \"User ID must be present\");\nassert(state.score &gt; 0, \"Score must be positive\");\n\n// Complex validations\nassert(state.email.includes(\"@\"), \"Email must be valid\");\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#accessing-data","title":"Accessing Data","text":""},{"location":"examples/scripting/custom-scripting/#configuration-variables","title":"Configuration Variables","text":"<p>Access variables defined in the <code>vars</code> section:</p> <pre><code>let apiUrl = vars.api_url;\nlet timeout = vars.timeout;\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#test-state","title":"Test State","text":"<p>Access data saved from previous HTTP or script steps:</p> <pre><code>// From HTTP save operations\nlet userId = state.user_id;\nlet userName = state.user_name;\n\n// Convert types (state values are strings)\nlet score = parseInt(state.user_score);\nlet price = parseFloat(state.price);\nlet isActive = state.active === \"true\";\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#complete-integration-example","title":"Complete Integration Example","text":"<pre><code>name: \"HTTP \u2194 Script Integration\"\n\nvars:\n  api_url: \"https://api.example.com\"\n\ntests:\n  - name: \"Data Processing Pipeline\"\n    steps:\n      # 1. HTTP: Fetch data\n      - name: \"Get user data\"\n        plugin: \"http\"\n        config:\n          method: \"GET\"\n          url: \"{{ .vars.api_url }}/users/123\"\n        save:\n          - json_path: \".id\"\n            as: \"user_id\"\n          - json_path: \".name\"\n            as: \"user_name\"\n          - json_path: \".age\"\n            as: \"user_age\"\n\n      # 2. Script: Process data\n      - name: \"Process user data\"\n        plugin: \"script\"\n        config:\n          language: \"javascript\"\n          script: |\n            // Access HTTP response data\n            let name = state.user_name;\n            let age = parseInt(state.user_age);\n\n            // Calculate derived values\n            let category = age &gt;= 18 ? \"adult\" : \"minor\";\n            let nameUpper = name.toUpperCase();\n\n            // Save for next steps\n            save(\"user_category\", category);\n            save(\"display_name\", nameUpper);\n\n      # 3. HTTP: Use processed data\n      - name: \"Update user category\"\n        plugin: \"http\"\n        config:\n          method: \"PATCH\"\n          url: \"{{ .vars.api_url }}/users/{{ user_id }}\"\n          body: |\n            {\n              \"category\": \"{{ user_category }}\",\n              \"display_name\": \"{{ display_name }}\"\n            }\n        assertions:\n          - type: status_code\n            expected: 200\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#external-javascript-files","title":"External JavaScript Files","text":"<p>For complex logic, use external files:</p> <pre><code>// scripts/validate-and-process.js\n\n// Validate required data\nassert(state.animal_name, \"Animal name is required\");\nassert(state.animal_species, \"Animal species is required\");\n\n// Business logic\nlet animalCategory = \"unknown\";\nconst domesticAnimals = [\"dog\", \"cat\", \"horse\"];\nconst wildAnimals = [\"lion\", \"tiger\", \"elephant\"];\n\nif (domesticAnimals.some(a =&gt; state.animal_name.toLowerCase().includes(a))) {\n    animalCategory = \"domestic\";\n} else if (wildAnimals.some(a =&gt; state.animal_name.toLowerCase().includes(a))) {\n    animalCategory = \"wild\";\n}\n\n// Calculate scores\nlet score = state.animal_name.length + state.animal_species.length;\nif (animalCategory === \"wild\") score += 10;\n\n// Save results\nsave(\"animal_category\", animalCategory);\nsave(\"animal_score\", score.toString());\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#common-use-cases","title":"Common Use Cases","text":""},{"location":"examples/scripting/custom-scripting/#data-transformation","title":"Data Transformation","text":"<pre><code>// Transform API response\nlet rawData = JSON.parse(state.api_response);\nlet transformed = rawData.map(item =&gt; ({\n    id: item.identifier,\n    name: item.display_name.toUpperCase(),\n    active: item.status === \"enabled\"\n}));\nsave(\"transformed_data\", JSON.stringify(transformed));\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#complex-validation","title":"Complex Validation","text":"<pre><code>// Business rule validation\nlet order = JSON.parse(state.order_details);\nassert(\n    order.items.length &gt; 0 &amp;&amp; order.total &gt; 0,\n    \"Order must have items and positive total\"\n);\n\n// Conditional validation\nif (order.total &gt; 1000) {\n    assert(order.approval_required, \"High-value orders require approval\");\n}\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#dynamic-test-data","title":"Dynamic Test Data","text":"<pre><code>// Generate test data\nconst suffix = Date.now();\nsave(\"test_email\", `test-${suffix}@example.com`);\nsave(\"test_password\", `Pass${suffix}!`);\nsave(\"test_user\", `user_${suffix}`);\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#response-analysis","title":"Response Analysis","text":"<pre><code>// Performance categorization\nlet responseTime = parseInt(state.response_time_ms);\nsave(\"perf_category\",\n     responseTime &lt; 100 ? \"fast\" :\n     responseTime &lt; 500 ? \"medium\" : \"slow\");\n\nassert(responseTime &lt; 2000, \"Response must be under 2 seconds\");\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#best-practices","title":"Best Practices","text":""},{"location":"examples/scripting/custom-scripting/#1-keep-scripts-focused","title":"1. Keep Scripts Focused","text":"<p>Use scripts for data processing, not HTTP operations:</p> <pre><code>// \u2705 Good: Data processing\nlet cleaned = state.raw_data.trim().toUpperCase();\nsave(\"clean_data\", cleaned);\n\n// \u274c Avoid: Use HTTP plugin instead\n// Don't make HTTP requests from scripts\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#2-external-files-for-complex-logic","title":"2. External Files for Complex Logic","text":"<pre><code># Simple: inline\n- plugin: \"script\"\n  config:\n    script: 'save(\"doubled\", (parseInt(state.value) * 2).toString());'\n\n# Complex: external file\n- plugin: \"script\"\n  config:\n    file: \"scripts/complex-analysis.js\"\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#3-clear-error-messages","title":"3. Clear Error Messages","text":"<pre><code>// \u2705 Good: Descriptive\nassert(state.user_id, \"User ID required for profile operations\");\nassert(state.email.includes(\"@\"), \"Invalid email format\");\n\n// \u274c Poor: Vague\nassert(state.user_id, \"Missing data\");\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#4-type-conversions","title":"4. Type Conversions","text":"<p>State values are always strings:</p> <pre><code>// Convert when needed\nlet count = parseInt(state.item_count);\nlet price = parseFloat(state.price);\nlet isActive = state.active === \"true\";\n\n// Save with explicit conversion\nsave(\"total\", (price * count).toString());\n</code></pre>"},{"location":"examples/scripting/custom-scripting/#running-the-example","title":"Running the Example","text":"<pre><code>rocketship run -af examples/custom-scripting/rocketship.yaml\n</code></pre> <p>See the full example for comprehensive script integration patterns.</p>"},{"location":"examples/scripting/shell-scripting/","title":"Shell Scripting","text":"<p>Execute shell commands and scripts within Rocketship workflows for build processes, system operations, and command-line tool integration.</p>"},{"location":"examples/scripting/shell-scripting/#key-features","title":"Key Features","text":"<ul> <li>Cross-platform Support - Automatically detects and uses <code>bash</code> or <code>sh</code></li> <li>Variable Substitution - Access config variables and step state</li> <li>Environment Integration - Automatic environment variable injection</li> <li>External Script Files - Store scripts in separate <code>.sh</code> files</li> <li>Output Capture - Automatically captures stdout, stderr, exit codes, and duration</li> </ul>"},{"location":"examples/scripting/shell-scripting/#basic-usage","title":"Basic Usage","text":""},{"location":"examples/scripting/shell-scripting/#inline-scripts","title":"Inline Scripts","text":"<pre><code>- name: \"Build and test\"\n  plugin: script\n  config:\n    language: shell\n    script: |\n      echo \"Building {{ .vars.project_name }} version {{ .vars.version }}\"\n      npm install\n      npm test\n      npm run build\n</code></pre>"},{"location":"examples/scripting/shell-scripting/#external-script-files","title":"External Script Files","text":"<pre><code>- name: \"Deploy application\"\n  plugin: script\n  config:\n    language: shell\n    file: \"scripts/deploy.sh\"\n    timeout: \"60s\"\n</code></pre>"},{"location":"examples/scripting/shell-scripting/#variable-access","title":"Variable Access","text":""},{"location":"examples/scripting/shell-scripting/#template-variables","title":"Template Variables","text":"<pre><code>vars:\n  project_name: \"my-app\"\n  environment: \"production\"\n\nsteps:\n  - name: \"Deploy\"\n    plugin: script\n    config:\n      language: shell\n      script: |\n        # Config variables\n        echo \"Deploying {{ .vars.project_name }} to {{ .vars.environment }}\"\n\n        # State variables from previous steps\n        echo \"Build ID: {{ build_id }}\"\n        echo \"Commit: {{ commit_hash }}\"\n</code></pre>"},{"location":"examples/scripting/shell-scripting/#environment-variables","title":"Environment Variables","text":"<p>Shell scripts automatically receive environment variables:</p> <pre><code># Config variables as ROCKETSHIP_VAR_*\necho \"Project: $ROCKETSHIP_VAR_PROJECT_NAME\"\necho \"Environment: $ROCKETSHIP_VAR_ENVIRONMENT\"\n\n# State variables as ROCKETSHIP_*\necho \"Build ID: $ROCKETSHIP_BUILD_ID\"\n\n# Previous step results\necho \"Last exit code: $ROCKETSHIP_EXIT_CODE\"\necho \"Last stdout: $ROCKETSHIP_STDOUT\"\n</code></pre>"},{"location":"examples/scripting/shell-scripting/#integration-with-http-steps","title":"Integration with HTTP Steps","text":"<pre><code>- name: \"Get deployment info\"\n  plugin: http\n  config:\n    method: GET\n    url: \"https://api.example.com/deploy/latest\"\n  save:\n    - json_path: \".deploy_id\"\n      as: \"deploy_id\"\n\n- name: \"Deploy application\"\n  plugin: script\n  config:\n    language: shell\n    script: |\n      echo \"Deploying {{ deploy_id }}\"\n      kubectl apply -f deployment.yaml\n      kubectl set image deployment/app app=myapp:{{ .vars.version }}\n</code></pre>"},{"location":"examples/scripting/shell-scripting/#error-handling","title":"Error Handling","text":"<pre><code>- name: \"Robust deployment\"\n  plugin: script\n  config:\n    language: shell\n    script: |\n      set -euo pipefail  # Exit on error, undefined vars, pipe failures\n\n      cleanup() {\n        echo \"Cleaning up...\"\n        docker stop temp-container 2&gt;/dev/null || true\n      }\n\n      trap cleanup ERR EXIT\n\n      # Your deployment commands here\n      docker run -d --name temp-container myapp:{{ .vars.version }}\n\n      # Wait for health check\n      for i in {1..30}; do\n        if curl -f http://localhost:8080/health; then\n          echo \"\u2705 Deployment successful\"\n          exit 0\n        fi\n        sleep 2\n      done\n\n      echo \"\u274c Health check failed\"\n      exit 1\n</code></pre>"},{"location":"examples/scripting/shell-scripting/#file-operations","title":"File Operations","text":"<pre><code>- name: \"Prepare release\"\n  plugin: script\n  config:\n    language: shell\n    script: |\n      # Create release package\n      mkdir -p release\n      tar -czf \"{{ .vars.project_name }}-{{ .vars.version }}.tar.gz\" dist/\n\n      # Generate metadata\n      cat &gt; release/metadata.json &lt;&lt; EOF\n      {\n        \"project\": \"{{ .vars.project_name }}\",\n        \"version\": \"{{ .vars.version }}\",\n        \"build_time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"\n      }\n      EOF\n</code></pre>"},{"location":"examples/scripting/shell-scripting/#running-examples","title":"Running Examples","text":"<pre><code># Run comprehensive shell testing (includes external files)\nrocketship run -af examples/shell-testing/rocketship.yaml\n\n# Debug logging to see shell execution details\nROCKETSHIP_LOG=DEBUG rocketship run -af examples/shell-testing/rocketship.yaml\n</code></pre>"},{"location":"examples/scripting/shell-scripting/#best-practices","title":"Best Practices","text":"<ul> <li>Use <code>set -euo pipefail</code> for safe error handling</li> <li>Quote variables to handle spaces: <code>\"{{ .vars.project_name }}\"</code></li> <li>Use environment variables for secrets: <code>$ROCKETSHIP_VAR_API_TOKEN</code></li> <li>Provide clear output with status indicators: <code>\u2705</code> <code>\u274c</code> <code>\ud83d\udd27</code></li> <li>Clean up resources with trap functions on exit/error</li> </ul>"},{"location":"examples/variables/config-variables/","title":"Config &amp; Runtime Variables","text":"<p>Config variables parameterize tests with reusable configuration. Runtime variables chain test steps by saving and reusing values from responses.</p>"},{"location":"examples/variables/config-variables/#config-variables","title":"Config Variables","text":"<p>Config variables provide non-sensitive test parameters defined in YAML files.</p> <p>Syntax: <code>{{ .vars.variable_name }}</code></p>"},{"location":"examples/variables/config-variables/#defining-config-variables","title":"Defining Config Variables","text":"<pre><code>vars:\n  base_url: \"https://api.staging.com\"\n  timeout: 30\n  max_retries: 3\n  auth:\n    header_name: \"X-API-Key\"\n    token: \"test-key-123\"\n\ntests:\n  - name: \"API test\"\n    steps:\n      - plugin: \"http\"\n        config:\n          url: \"{{ .vars.base_url }}/resources\"\n          headers:\n            \"{{ .vars.auth.header_name }}\": \"{{ .vars.auth.token }}\"\n          timeout: \"{{ .vars.timeout }}s\"\n</code></pre>"},{"location":"examples/variables/config-variables/#nested-variables","title":"Nested Variables","text":"<p>Access nested values with dot notation:</p> <pre><code>vars:\n  api:\n    base_url: \"https://api.example.com\"\n    version: \"v2\"\n    endpoints:\n      users: \"/users\"\n      posts: \"/posts\"\n\ntests:\n  - name: \"Use nested config\"\n    steps:\n      - plugin: \"http\"\n        config:\n          url: \"{{ .vars.api.base_url }}/{{ .vars.api.version }}{{ .vars.api.endpoints.users }}\"\n</code></pre>"},{"location":"examples/variables/config-variables/#cli-overrides","title":"CLI Overrides","text":"<p>Override variables without modifying YAML:</p> <pre><code># Override individual variables\nrocketship run -af test.yaml \\\n  --var base_url=https://api.production.com \\\n  --var timeout=60\n\n# Override nested variables\nrocketship run -af test.yaml \\\n  --var api.base_url=https://prod-api.com \\\n  --var api.version=v3\n</code></pre>"},{"location":"examples/variables/config-variables/#variable-files","title":"Variable Files","text":"<p>Use variable files for complex overrides:</p> <p>Create <code>prod-vars.yaml</code>: <pre><code>base_url: \"https://api.production.com\"\nenvironment: \"production\"\ntimeout: 60\nmax_retries: 5\n</code></pre></p> <p>Load variable file: <pre><code>rocketship run -af test.yaml --var-file prod-vars.yaml\n\n# Combine with individual overrides\nrocketship run -af test.yaml \\\n  --var-file prod-vars.yaml \\\n  --var timeout=120\n</code></pre></p>"},{"location":"examples/variables/config-variables/#runtime-variables","title":"Runtime Variables","text":"<p>Runtime variables capture values during test execution for step chaining.</p> <p>Syntax: <code>{{ variable_name }}</code></p>"},{"location":"examples/variables/config-variables/#save-from-responses","title":"Save from Responses","text":"<pre><code>- name: \"Create user\"\n  plugin: \"http\"\n  config:\n    method: \"POST\"\n    url: \"{{ .vars.base_url }}/users\"\n    body: |\n      {\n        \"name\": \"Test User\",\n        \"email\": \"test@example.com\"\n      }\n  save:\n    - json_path: \".id\"\n      as: \"user_id\"\n    - json_path: \".email\"\n      as: \"user_email\"\n\n- name: \"Get user by ID\"\n  plugin: \"http\"\n  config:\n    url: \"{{ .vars.base_url }}/users/{{ user_id }}\"\n</code></pre>"},{"location":"examples/variables/config-variables/#chaining-multiple-steps","title":"Chaining Multiple Steps","text":"<pre><code>- name: \"Create company\"\n  plugin: \"supabase\"\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .env.SUPABASE_ANON_KEY }}\"\n    operation: \"insert\"\n    table: \"companies\"\n    insert:\n      data:\n        name: \"Test Company\"\n  save:\n    - json_path: \".[0].id\"\n      as: \"company_id\"\n\n- name: \"Create user for company\"\n  plugin: \"supabase\"\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .env.SUPABASE_ANON_KEY }}\"\n    operation: \"insert\"\n    table: \"users\"\n    insert:\n      data:\n        company_id: \"{{ company_id }}\"\n        name: \"Company Admin\"\n  save:\n    - json_path: \".[0].id\"\n      as: \"user_id\"\n\n- name: \"Verify relationship\"\n  plugin: \"supabase\"\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .env.SUPABASE_ANON_KEY }}\"\n    operation: \"select\"\n    table: \"users\"\n    select:\n      filters:\n        - column: \"id\"\n          operator: \"eq\"\n          value: \"{{ user_id }}\"\n  assertions:\n    - type: \"json_path\"\n      path: \".[0].company_id\"\n      expected: \"{{ company_id }}\"\n</code></pre>"},{"location":"examples/variables/config-variables/#optional-vs-required-saves","title":"Optional vs Required Saves","text":"<p>By default, saves are required and fail if the value doesn't exist:</p> <pre><code>- name: \"Get user profile\"\n  plugin: \"http\"\n  config:\n    url: \"{{ .vars.base_url }}/users/{{ user_id }}\"\n  save:\n    # Required (default) - fails if not present\n    - json_path: \".id\"\n      as: \"user_id\"\n\n    # Optional - continues if not present\n    - json_path: \".profile.avatar_url\"\n      as: \"avatar_url\"\n      required: false\n\n    - json_path: \".profile.bio\"\n      as: \"user_bio\"\n      required: false\n</code></pre>"},{"location":"examples/variables/config-variables/#save-from-headers","title":"Save from Headers","text":"<pre><code>- name: \"Login\"\n  plugin: \"http\"\n  config:\n    url: \"{{ .vars.base_url }}/auth/login\"\n    method: \"POST\"\n  save:\n    - json_path: \".session.token\"\n      as: \"auth_token\"\n    - header: \"X-Session-ID\"\n      as: \"session_id\"\n\n- name: \"Use saved headers\"\n  plugin: \"http\"\n  config:\n    url: \"{{ .vars.base_url }}/profile\"\n    headers:\n      \"Authorization\": \"Bearer {{ auth_token }}\"\n      \"X-Session-ID\": \"{{ session_id }}\"\n</code></pre>"},{"location":"examples/variables/config-variables/#examples","title":"Examples","text":""},{"location":"examples/variables/config-variables/#parameterized-test-suite","title":"Parameterized Test Suite","text":"<pre><code>vars:\n  target_environment: \"staging\"\n  test_user_count: 5\n  cleanup_after_test: true\n\ntests:\n  - name: \"Parameterized integration test\"\n    steps:\n      - name: \"Log configuration\"\n        plugin: \"log\"\n        config:\n          message: |\n            Running test:\n            - Environment: {{ .vars.target_environment }}\n            - User count: {{ .vars.test_user_count }}\n            - Cleanup: {{ .vars.cleanup_after_test }}\n</code></pre> <p>Run with different configurations: <pre><code># Staging with 5 users\nrocketship run -af test.yaml \\\n  --var target_environment=staging \\\n  --var test_user_count=5\n\n# Production with 100 users\nrocketship run -af test.yaml \\\n  --var target_environment=production \\\n  --var test_user_count=100 \\\n  --var cleanup_after_test=false\n</code></pre></p>"},{"location":"examples/variables/config-variables/#dynamic-test-data","title":"Dynamic Test Data","text":"<pre><code>vars:\n  company_prefix: \"test-company\"\n\ntests:\n  - name: \"Dynamic test data\"\n    steps:\n      - name: \"Generate unique name\"\n        plugin: \"script\"\n        config:\n          language: \"javascript\"\n          script: |\n            const timestamp = Date.now();\n            const uniqueName = `${state.company_prefix}-${timestamp}`;\n            save(\"company_name\", uniqueName);\n\n      - name: \"Create with generated name\"\n        plugin: \"http\"\n        config:\n          url: \"{{ .env.API_BASE_URL }}/companies\"\n          method: \"POST\"\n          body: |\n            {\n              \"name\": \"{{ company_name }}\",\n              \"type\": \"test\"\n            }\n</code></pre>"},{"location":"examples/variables/config-variables/#conditional-logic","title":"Conditional Logic","text":"<pre><code>vars:\n  skip_cleanup: false\n  debug_mode: true\n\ntests:\n  - name: \"Conditional execution\"\n    steps:\n      - name: \"Create data\"\n        plugin: \"http\"\n        config:\n          url: \"{{ .env.API_BASE_URL }}/data\"\n          method: \"POST\"\n        save:\n          - json_path: \".id\"\n            as: \"data_id\"\n\n      - name: \"Debug output\"\n        plugin: \"script\"\n        config:\n          language: \"javascript\"\n          script: |\n            if (state.debug_mode === 'true') {\n              console.log(`Created data: ${state.data_id}`);\n            }\n\n      - name: \"Cleanup\"\n        plugin: \"script\"\n        config:\n          language: \"javascript\"\n          script: |\n            if (state.skip_cleanup !== 'true') {\n              console.log('Cleaning up...');\n            } else {\n              console.log('Skipping cleanup');\n            }\n</code></pre>"},{"location":"examples/variables/config-variables/#best-practices","title":"Best Practices","text":""},{"location":"examples/variables/config-variables/#descriptive-variable-names","title":"Descriptive Variable Names","text":"<pre><code># \u274c Bad\nvars:\n  u: \"https://api.com\"\n  t: 30\n\n# \u2705 Good\nvars:\n  base_url: \"https://api.com\"\n  request_timeout: 30\n</code></pre>"},{"location":"examples/variables/config-variables/#group-related-variables","title":"Group Related Variables","text":"<pre><code>vars:\n  api:\n    base_url: \"https://api.example.com\"\n    version: \"v2\"\n    timeout: 30\n  database:\n    table_prefix: \"test_\"\n    max_connections: 10\n</code></pre>"},{"location":"examples/variables/config-variables/#validate-runtime-variables","title":"Validate Runtime Variables","text":"<pre><code>- name: \"Create user\"\n  plugin: \"http\"\n  config:\n    method: \"POST\"\n    url: \"{{ .vars.base_url }}/users\"\n  save:\n    - json_path: \".id\"\n      as: \"user_id\"\n\n- name: \"Validate saved user_id\"\n  plugin: \"script\"\n  config:\n    language: \"javascript\"\n    script: |\n      if (!state.user_id) {\n        throw new Error(\"user_id not saved\");\n      }\n      if (typeof state.user_id !== 'string') {\n        throw new Error(`user_id should be string, got ${typeof state.user_id}`);\n      }\n</code></pre>"},{"location":"examples/variables/environment-variables/","title":"Environment Variables","text":"<p>Environment variables inject secrets and environment-specific configuration into tests without hardcoding sensitive values.</p> <p>Syntax: <code>{{ .env.VARIABLE_NAME }}</code></p>"},{"location":"examples/variables/environment-variables/#using-env-file","title":"Using --env-file","text":"<p>Create a <code>.env</code> file:</p> <pre><code># .env\nAPI_BASE_URL=https://api.staging.com\nAPI_KEY=sk-staging-key-123\nDATABASE_URL=postgres://user:pass@localhost/db\nSUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>Run tests:</p> <pre><code>rocketship run -af test.yaml --env-file .env\n</code></pre> <p>Use in tests:</p> <pre><code>- name: \"API request with auth\"\n  plugin: \"http\"\n  config:\n    url: \"{{ .env.API_BASE_URL }}/users\"\n    headers:\n      \"Authorization\": \"Bearer {{ .env.API_KEY }}\"\n</code></pre>"},{"location":"examples/variables/environment-variables/#multi-environment-setup","title":"Multi-Environment Setup","text":"<p>Organize files per environment:</p> <pre><code>project/\n\u251c\u2500\u2500 .env.example      # Template with dummy values (commit this)\n\u251c\u2500\u2500 .env              # Local development (gitignore)\n\u251c\u2500\u2500 .env.staging      # Staging values (gitignore)\n\u251c\u2500\u2500 .env.production   # Production values (gitignore)\n\u2514\u2500\u2500 tests/api-tests.yaml\n</code></pre> <p><code>.env.example</code> (commit this): <pre><code># API Configuration\nAPI_BASE_URL=https://api.example.com\nAPI_KEY=your-api-key-here\nDATABASE_URL=postgres://user:pass@host/db\n</code></pre></p> <p>Usage: <pre><code># Local\nrocketship run -af test.yaml --env-file .env\n\n# Staging\nrocketship run -af test.yaml --env-file .env.staging\n\n# Production\nrocketship run -af test.yaml --env-file .env.production\n</code></pre></p>"},{"location":"examples/variables/environment-variables/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"examples/variables/environment-variables/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/test.yml\n- name: Run tests\n  env:\n    API_KEY: ${{ secrets.API_KEY }}\n    DATABASE_URL: ${{ secrets.DATABASE_URL }}\n    SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}\n  run: rocketship run -af tests/integration.yaml\n</code></pre> <p>Secrets are automatically available as environment variables\u2014no <code>--env-file</code> needed.</p>"},{"location":"examples/variables/environment-variables/#gitlab-ci","title":"GitLab CI","text":"<pre><code># .gitlab-ci.yml\ntest:\n  script: rocketship run -af tests/integration.yaml\n  variables:\n    API_KEY: $CI_API_KEY\n    DATABASE_URL: $CI_DATABASE_URL\n</code></pre>"},{"location":"examples/variables/environment-variables/#environment-variables-in-ci","title":"Environment Variables in CI","text":"<p>In CI, don't use <code>--env-file</code>: 1. Set secrets in your CI platform (GitHub Secrets, GitLab Variables) 2. Reference them in workflow configuration 3. Rocketship picks them up from system environment automatically</p>"},{"location":"examples/variables/environment-variables/#security-best-practices","title":"Security Best Practices","text":""},{"location":"examples/variables/environment-variables/#gitignore-environment-files","title":"Gitignore Environment Files","text":"<pre><code># .gitignore\n.env\n.env.*\n!.env.example\n</code></pre>"},{"location":"examples/variables/environment-variables/#use-envexample-as-template","title":"Use .env.example as Template","text":"<pre><code># .env.example\nAPI_KEY=your-api-key-here\nDATABASE_URL=postgres://user:pass@localhost/db\nOPENAI_API_KEY=sk-...\n</code></pre> <p>Team members copy and fill in values: <pre><code>cp .env.example .env\n# Edit .env with actual credentials\n</code></pre></p>"},{"location":"examples/variables/environment-variables/#validate-required-variables","title":"Validate Required Variables","text":"<pre><code>- name: \"Validate required env vars\"\n  plugin: \"script\"\n  config:\n    language: \"javascript\"\n    script: |\n      const required = ['API_KEY', 'DATABASE_URL', 'SUPABASE_ANON_KEY'];\n      const missing = required.filter(key =&gt; !process.env[key]);\n      if (missing.length &gt; 0) {\n        throw new Error(`Missing required env vars: ${missing.join(', ')}`);\n      }\n</code></pre>"},{"location":"examples/variables/environment-variables/#examples","title":"Examples","text":""},{"location":"examples/variables/environment-variables/#api-testing","title":"API Testing","text":"<pre><code>vars:\n  api_version: \"v1\"\n\ntests:\n  - name: \"User API with environment config\"\n    steps:\n      - name: \"Create user\"\n        plugin: \"http\"\n        config:\n          url: \"{{ .env.API_BASE_URL }}/{{ .vars.api_version }}/users\"\n          method: \"POST\"\n          headers:\n            \"Authorization\": \"Bearer {{ .env.API_TOKEN }}\"\n          body: |\n            {\n              \"email\": \"test@example.com\",\n              \"name\": \"Test User\"\n            }\n</code></pre>"},{"location":"examples/variables/environment-variables/#database-testing","title":"Database Testing","text":"<pre><code>tests:\n  - name: \"Database connection\"\n    steps:\n      - name: \"Query users\"\n        plugin: \"sql\"\n        config:\n          driver: \"postgres\"\n          dsn: \"{{ .env.DATABASE_URL }}\"\n          query: \"SELECT * FROM users WHERE active = true LIMIT 10\"\n</code></pre>"},{"location":"examples/variables/environment-variables/#supabase-testing","title":"Supabase Testing","text":"<pre><code>vars:\n  supabase_url: \"https://myproject.supabase.co\"\n\ntests:\n  - name: \"Supabase operations\"\n    steps:\n      - name: \"Query companies\"\n        plugin: \"supabase\"\n        config:\n          url: \"{{ .vars.supabase_url }}\"\n          key: \"{{ .env.SUPABASE_ANON_KEY }}\"\n          operation: \"select\"\n          table: \"companies\"\n          select:\n            columns: [\"id\", \"name\"]\n            limit: 10\n</code></pre>"},{"location":"examples/variables/environment-variables/#multi-environment","title":"Multi-Environment","text":"<pre><code>tests:\n  - name: \"Environment-aware test\"\n    steps:\n      - name: \"Health check\"\n        plugin: \"http\"\n        config:\n          url: \"{{ .env.API_BASE_URL }}/health\"\n        assertions:\n          - type: \"status_code\"\n            expected: 200\n\n      - name: \"Authenticated request\"\n        plugin: \"http\"\n        config:\n          url: \"{{ .env.API_BASE_URL }}/api/data\"\n          headers:\n            \"Authorization\": \"Bearer {{ .env.API_TOKEN }}\"\n</code></pre> <p>Run against different environments: <pre><code># Local\nrocketship run -af test.yaml --env-file .env\n\n# Staging\nrocketship run -af test.yaml --env-file .env.staging\n\n# Production\nrocketship run -af test.yaml --env-file .env.production\n</code></pre></p>"},{"location":"examples/variables/environment-variables/#common-patterns","title":"Common Patterns","text":""},{"location":"examples/variables/environment-variables/#build-urls-from-parts","title":"Build URLs from Parts","text":"<pre><code>config:\n  url: \"{{ .env.DB_PROTOCOL }}://{{ .env.DB_HOST }}:{{ .env.DB_PORT }}/{{ .env.DB_NAME }}\"\n</code></pre>"},{"location":"examples/variables/environment-variables/#environment-specific-test-data","title":"Environment-Specific Test Data","text":"<pre><code>- name: \"Create test user\"\n  plugin: \"http\"\n  config:\n    url: \"{{ .env.API_BASE_URL }}/users\"\n    method: \"POST\"\n    body: |\n      {\n        \"email\": \"{{ .env.TEST_USER_EMAIL }}\",\n        \"environment\": \"{{ .env.ENVIRONMENT_NAME }}\"\n      }\n</code></pre> <pre><code># .env.staging\nTEST_USER_EMAIL=staging-test@example.com\nENVIRONMENT_NAME=staging\n\n# .env.production\nTEST_USER_EMAIL=prod-test@example.com\nENVIRONMENT_NAME=production\n</code></pre>"},{"location":"examples/variables/variables/","title":"Variables","text":"<p>Rocketship supports three types of variables for parameterizing your tests:</p> Type Syntax Use Case Example Environment <code>{{ .env.VAR }}</code> Secrets, API keys, environment-specific URLs <code>{{ .env.API_KEY }}</code> Config <code>{{ .vars.name }}</code> Test parameters, non-sensitive config <code>{{ .vars.base_url }}</code> Runtime <code>{{ variable }}</code> Values saved during test execution (including suite hooks) <code>{{ user_id }}</code> <p>Suite-level and test-level hook saves both follow the runtime pattern: reference them as <code>{{ name }}</code> inside the relevant steps.</p>"},{"location":"examples/variables/variables/#quick-decision-guide","title":"Quick Decision Guide","text":"<p>Use Environment Variables (<code>.env</code>) when: - \u2705 The value is a secret (API key, password, token) - \u2705 The value changes per environment (staging URL vs production URL) - \u2705 The value should never be committed to git - \u2705 Different team members need different values</p> <p>Use Config Variables (<code>.vars</code>) when: - \u2705 The value is test configuration (timeouts, limits) - \u2705 The value is safe to commit to git - \u2705 You want to override values via CLI (<code>--var</code>) - \u2705 The value is test data or parameters</p> <p>Use Runtime Variables when: - \u2705 You need to save values from API responses - \u2705 You're chaining test steps together - \u2705 You need to pass data between steps - \u2705 The value is generated during test execution</p>"},{"location":"examples/variables/variables/#basic-examples","title":"Basic Examples","text":""},{"location":"examples/variables/variables/#environment-variables","title":"Environment Variables","text":"<pre><code># Use for secrets\n- name: \"Authenticated API request\"\n  plugin: \"http\"\n  config:\n    url: \"{{ .env.API_BASE_URL }}/users\"\n    headers:\n      \"Authorization\": \"Bearer {{ .env.API_TOKEN }}\"\n</code></pre> <pre><code># Load from .env file\nrocketship run -af test.yaml --env-file .env\n</code></pre>"},{"location":"examples/variables/variables/#config-variables","title":"Config Variables","text":"<pre><code># Define in YAML\nvars:\n  api_version: \"v2\"\n  timeout: 30\n\ntests:\n  - name: \"API test\"\n    steps:\n      - plugin: \"http\"\n        config:\n          url: \"{{ .vars.base_url }}/{{ .vars.api_version }}/users\"\n          timeout: \"{{ .vars.timeout }}s\"\n</code></pre> <pre><code># Override via CLI\nrocketship run -af test.yaml --var api_version=v3 --var timeout=60\n</code></pre>"},{"location":"examples/variables/variables/#runtime-variables","title":"Runtime Variables","text":"<pre><code># Save from response\n- name: \"Create user\"\n  plugin: \"http\"\n  config:\n    method: \"POST\"\n    url: \"{{ .vars.base_url }}/users\"\n  save:\n    - json_path: \".id\"\n      as: \"user_id\"\n\n# Use in next step\n- name: \"Get user\"\n  plugin: \"http\"\n  config:\n    url: \"{{ .vars.base_url }}/users/{{ user_id }}\"\n</code></pre>"},{"location":"examples/variables/variables/#variable-precedence","title":"Variable Precedence","text":"<p>When the same variable name exists in multiple places:</p>"},{"location":"examples/variables/variables/#environment-variables_1","title":"Environment Variables","text":"<ol> <li>System environment (highest)</li> <li><code>--env-file</code> values</li> <li>Default in test file</li> </ol> <pre><code>export API_KEY=system-key\nrocketship run -af test.yaml --env-file .env  # Uses system-key, not .env\n</code></pre>"},{"location":"examples/variables/variables/#config-variables_1","title":"Config Variables","text":"<ol> <li><code>--var</code> CLI flags (highest)</li> <li><code>--var-file</code> values</li> <li>YAML <code>vars</code> section</li> </ol> <pre><code>rocketship run -af test.yaml \\\n  --var-file overrides.yaml \\\n  --var timeout=120  # CLI wins\n</code></pre>"},{"location":"examples/variables/variables/#combining-variable-types","title":"Combining Variable Types","text":"<p>Use all three types together for maximum flexibility:</p> <pre><code>vars:\n  api_version: \"v1\"\n\ntests:\n  - name: \"Mixed variable usage\"\n    steps:\n      # Step 1: Use env + config\n      - name: \"Create resource\"\n        plugin: \"http\"\n        config:\n          url: \"{{ .env.API_BASE_URL }}/{{ .vars.api_version }}/users\"\n          headers:\n            \"Authorization\": \"Bearer {{ .env.API_TOKEN }}\"\n        save:\n          - json_path: \".id\"\n            as: \"user_id\"\n\n      # Step 2: Use all three types\n      - name: \"Update resource\"\n        plugin: \"http\"\n        config:\n          url: \"{{ .env.API_BASE_URL }}/{{ .vars.api_version }}/users/{{ user_id }}\"\n          headers:\n            \"Authorization\": \"Bearer {{ .env.API_TOKEN }}\"\n</code></pre>"},{"location":"examples/variables/variables/#handlebars-escaping","title":"Handlebars Escaping","text":"<p>When your API uses handlebars syntax <code>{{ }}</code>, escape them with backslashes:</p> <pre><code># Processed variable\n\"api_url\": \"{{ .env.API_BASE_URL }}/users\"\n\n# Literal handlebars (not processed)\n\"template\": \"Use \\\\{{ user_id }} in the API\"\n# Result: \"Use {{ user_id }} in the API\"\n</code></pre> <p>Escape levels:</p> Input Output Description <code>\\\\{{ var }}</code> <code>{{ var }}</code> Literal handlebars <code>\\\\\\\\{{ .vars.x }}</code> <code>\\value</code> Backslash + processed variable <code>\\\\\\\\\\\\{{ var }}</code> <code>\\{{ var }}</code> Backslash + literal handlebars <p>In JSON bodies: <pre><code>body: |-\n  {\n    \"api_url\": \"{{ .env.API_BASE_URL }}\",\n    \"template\": \"Use \\\\{{ user_id }} for IDs\",\n    \"docs\": \"Escape with \\\\{{ variable }} syntax\"\n  }\n</code></pre></p> <p>Common use case - Supabase/PostgreSQL JSON: <pre><code># PostgreSQL JSONB query with literal handlebars\n- name: \"Query with JSON template\"\n  plugin: \"sql\"\n  config:\n    driver: \"postgres\"\n    dsn: \"{{ .env.DATABASE_URL }}\"\n    query: |\n      SELECT metadata-&gt;&gt;'template' as template\n      FROM notifications\n      WHERE metadata @&gt; '{\"type\": \"email\"}'\n</code></pre></p> <p>If the <code>metadata</code> column contains <code>{\"template\": \"Hello {{ name }}\"}</code>, you need to escape it: <pre><code># Insert with escaped handlebars\n- name: \"Insert notification template\"\n  plugin: \"sql\"\n  config:\n    driver: \"postgres\"\n    dsn: \"{{ .env.DATABASE_URL }}\"\n    query: |\n      INSERT INTO notifications (metadata)\n      VALUES ('{\"template\": \"Hello \\\\{{ name }}\"}'::jsonb)\n</code></pre></p>"},{"location":"examples/variables/variables/#best-practices","title":"Best Practices","text":""},{"location":"examples/variables/variables/#environment-variables_2","title":"Environment Variables","text":"<ul> <li>\u2705 Always use <code>.gitignore</code> for <code>.env</code> files</li> <li>\u2705 Commit <code>.env.example</code> with dummy values</li> <li>\u2705 Use different env files per environment (<code>.env.staging</code>, <code>.env.production</code>)</li> <li>\u2705 Set secrets in CI/CD platform, not env files</li> </ul>"},{"location":"examples/variables/variables/#config-variables_2","title":"Config Variables","text":"<ul> <li>\u2705 Use descriptive names (<code>request_timeout</code> not <code>t</code>)</li> <li>\u2705 Group related variables with nesting</li> <li>\u2705 Put sensible defaults in YAML</li> <li>\u2705 Override via <code>--var</code> for different test scenarios</li> </ul>"},{"location":"examples/variables/variables/#runtime-variables_1","title":"Runtime Variables","text":"<ul> <li>\u2705 Use <code>required: false</code> for optional saves</li> <li>\u2705 Validate saved values in next step if critical</li> <li>\u2705 Use descriptive names that indicate what was saved</li> <li>\u2705 Clean up test data at the end of tests</li> </ul>"},{"location":"examples/variables/variables/#security","title":"Security","text":"<pre><code># .gitignore\n.env\n.env.*\n!.env.example\n</code></pre> <pre><code># Validate required env vars\n- name: \"Check environment\"\n  plugin: \"script\"\n  config:\n    language: \"javascript\"\n    script: |\n      const required = ['API_KEY', 'DATABASE_URL'];\n      const missing = required.filter(k =&gt; !process.env[k]);\n      if (missing.length) {\n        throw new Error(`Missing: ${missing.join(', ')}`);\n      }\n</code></pre>"},{"location":"examples/variables/variables/#learn-more","title":"Learn More","text":"<ul> <li>Environment Variables - Detailed guide on <code>.env</code> usage, multi-environment setup, and CI/CD integration</li> <li>Config &amp; Runtime Variables - Detailed guide on <code>.vars</code>, <code>--var</code> overrides, and runtime variable chaining</li> </ul>"},{"location":"reference/rocketship/","title":"Overview","text":""},{"location":"reference/rocketship/#rocketship","title":"rocketship","text":"<p>Rocketship CLI</p>"},{"location":"reference/rocketship/#synopsis","title":"Synopsis","text":"<p>Rocketship is a CLI tool for running automated tests.</p>"},{"location":"reference/rocketship/#options","title":"Options","text":"<pre><code>      --debug   Enable debug logging\n  -h, --help    help for rocketship\n</code></pre>"},{"location":"reference/rocketship/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship doctor  - Diagnose Rocketship CLI environment issues</li> <li>rocketship get    - Get details of a specific test run</li> <li>rocketship list  - List test runs</li> <li>rocketship login    - Authenticate the CLI via OIDC device flow</li> <li>rocketship logout  - Remove stored authentication tokens</li> <li>rocketship profile    - Manage connection profiles</li> <li>rocketship run    - Run rocketship tests</li> <li>rocketship start    - Start rocketship the rocketship server</li> <li>rocketship status  - Show authentication status</li> <li>rocketship stop  - Stop rocketship the rocketship server</li> <li>rocketship validate  - Validate Rocketship test files against the JSON schema</li> <li>rocketship version    - Print the version number of Rocketship</li> </ul>"},{"location":"reference/rocketship/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_doctor/","title":"Rocketship doctor","text":""},{"location":"reference/rocketship_doctor/#rocketship-doctor","title":"rocketship doctor","text":"<p>Diagnose Rocketship CLI environment issues</p> <pre><code>rocketship doctor [flags]\n</code></pre>"},{"location":"reference/rocketship_doctor/#options","title":"Options","text":"<pre><code>  -h, --help   help for doctor\n</code></pre>"},{"location":"reference/rocketship_doctor/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_doctor/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_doctor/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_get/","title":"get","text":""},{"location":"reference/rocketship_get/#rocketship-get","title":"rocketship get","text":"<p>Get details of a specific test run</p>"},{"location":"reference/rocketship_get/#synopsis","title":"Synopsis","text":"<p>Get detailed information about a specific test run.</p> <p>Examples:   # Get run details   rocketship get abc123def456</p> <p># Get run details with logs   rocketship get abc123def456 --logs</p> <p># Get run details in JSON format   rocketship get abc123def456 --format json</p> <pre><code>rocketship get &lt;run-id&gt; [flags]\n</code></pre>"},{"location":"reference/rocketship_get/#options","title":"Options","text":"<pre><code>  -e, --engine string   Address of the rocketship engine (defaults to active profile)\n      --format string   Output format (table, json, yaml) (default \"table\")\n  -h, --help            help for get\n      --logs            Include logs from the test run\n</code></pre>"},{"location":"reference/rocketship_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_get/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_get/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_list/","title":"list","text":""},{"location":"reference/rocketship_list/#rocketship-list","title":"rocketship list","text":"<p>List test runs</p>"},{"location":"reference/rocketship_list/#synopsis","title":"Synopsis","text":"<p>List test runs with filtering and sorting options.</p> <p>Examples:   # List all recent runs   rocketship list</p> <p># List failed runs   rocketship list --status FAILED</p> <p># List runs for a specific project   rocketship list --project-id my-app</p> <p># List runs from a specific branch   rocketship list --branch feature/new-api</p> <p># List runs with custom limit and ordering   rocketship list --limit 50 --order-by duration --ascending</p> <pre><code>rocketship list [flags]\n</code></pre>"},{"location":"reference/rocketship_list/#options","title":"Options","text":"<pre><code>      --ascending              Sort in ascending order (default: descending)\n      --branch string          Filter by git branch\n  -e, --engine string          Address of the rocketship engine (defaults to active profile)\n      --format string          Output format (table, json, yaml) (default \"table\")\n  -h, --help                   help for list\n      --limit int32            Maximum number of runs to display (default 20)\n      --order-by string        Sort by field (started_at, ended_at, duration) (default \"started_at\")\n      --project-id string      Filter by project ID\n      --schedule-name string   Filter by schedule name\n      --source string          Filter by source (cli-local, ci-branch, ci-main, scheduled)\n      --status string          Filter by status (PENDING, RUNNING, PASSED, FAILED, TIMEOUT)\n</code></pre>"},{"location":"reference/rocketship_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_list/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_list/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_login/","title":"Rocketship login","text":""},{"location":"reference/rocketship_login/#rocketship-login","title":"rocketship login","text":"<p>Authenticate the CLI via OIDC device flow</p> <pre><code>rocketship login [flags]\n</code></pre>"},{"location":"reference/rocketship_login/#options","title":"Options","text":"<pre><code>  -h, --help             help for login\n  -p, --profile string   Profile to authenticate (defaults to active profile)\n</code></pre>"},{"location":"reference/rocketship_login/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_login/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_login/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_logout/","title":"Rocketship logout","text":""},{"location":"reference/rocketship_logout/#rocketship-logout","title":"rocketship logout","text":"<p>Remove stored authentication tokens</p> <pre><code>rocketship logout [flags]\n</code></pre>"},{"location":"reference/rocketship_logout/#options","title":"Options","text":"<pre><code>  -h, --help             help for logout\n  -p, --profile string   Profile to clear (defaults to active profile)\n</code></pre>"},{"location":"reference/rocketship_logout/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_logout/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_logout/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_profile/","title":"Overview","text":""},{"location":"reference/rocketship_profile/#rocketship-profile","title":"rocketship profile","text":"<p>Manage connection profiles</p>"},{"location":"reference/rocketship_profile/#synopsis","title":"Synopsis","text":"<p>Manage connection profiles for different Rocketship environments.</p> <p>Profiles allow you to easily switch between different Rocketship deployments (local, self-hosted, cloud) without having to specify connection details every time you run a command.</p> <p>Examples:   rocketship profile list   rocketship profile create enterprise https://rocketship.company.com   rocketship profile use enterprise   rocketship profile show enterprise</p>"},{"location":"reference/rocketship_profile/#options","title":"Options","text":"<pre><code>  -h, --help   help for profile\n</code></pre>"},{"location":"reference/rocketship_profile/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_profile/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> <li>rocketship profile create  - Create a new connection profile</li> <li>rocketship profile delete  - Delete a connection profile</li> <li>rocketship profile list  - List all connection profiles</li> <li>rocketship profile show  - Show connection profile details</li> <li>rocketship profile use    - Set the default connection profile</li> </ul>"},{"location":"reference/rocketship_profile/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_profile_create/","title":"create","text":""},{"location":"reference/rocketship_profile_create/#rocketship-profile-create","title":"rocketship profile create","text":"<p>Create a new connection profile</p>"},{"location":"reference/rocketship_profile_create/#synopsis","title":"Synopsis","text":"<p>Create a new connection profile for a Rocketship deployment.</p> <p>The URL should be the base URL of your Rocketship deployment, e.g.:   https://rocketship.company.com   https://cli.rocketship.globalbank.com</p> <p>TLS settings will be automatically detected from the URL scheme.</p> <p>Examples:   rocketship profile create enterprise https://rocketship.company.com   rocketship profile create staging https://staging.company.com:8443</p> <pre><code>rocketship profile create &lt;name&gt; &lt;url&gt; [flags]\n</code></pre>"},{"location":"reference/rocketship_profile_create/#options","title":"Options","text":"<pre><code>  -h, --help          help for create\n      --port int      Override the port number\n      --team string   Associate profile with a specific team\n</code></pre>"},{"location":"reference/rocketship_profile_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_profile_create/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship profile    - Manage connection profiles</li> </ul>"},{"location":"reference/rocketship_profile_create/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_profile_delete/","title":"delete","text":""},{"location":"reference/rocketship_profile_delete/#rocketship-profile-delete","title":"rocketship profile delete","text":"<p>Delete a connection profile</p>"},{"location":"reference/rocketship_profile_delete/#synopsis","title":"Synopsis","text":"<p>Delete a connection profile. The local profile cannot be deleted.</p> <pre><code>rocketship profile delete &lt;name&gt; [flags]\n</code></pre>"},{"location":"reference/rocketship_profile_delete/#options","title":"Options","text":"<pre><code>  -h, --help   help for delete\n</code></pre>"},{"location":"reference/rocketship_profile_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_profile_delete/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship profile    - Manage connection profiles</li> </ul>"},{"location":"reference/rocketship_profile_delete/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_profile_list/","title":"list","text":""},{"location":"reference/rocketship_profile_list/#rocketship-profile-list","title":"rocketship profile list","text":"<p>List all connection profiles</p>"},{"location":"reference/rocketship_profile_list/#synopsis","title":"Synopsis","text":"<p>List all available connection profiles and show which one is currently active.</p> <pre><code>rocketship profile list [flags]\n</code></pre>"},{"location":"reference/rocketship_profile_list/#options","title":"Options","text":"<pre><code>  -h, --help   help for list\n</code></pre>"},{"location":"reference/rocketship_profile_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_profile_list/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship profile    - Manage connection profiles</li> </ul>"},{"location":"reference/rocketship_profile_list/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_profile_show/","title":"show","text":""},{"location":"reference/rocketship_profile_show/#rocketship-profile-show","title":"rocketship profile show","text":"<p>Show connection profile details</p>"},{"location":"reference/rocketship_profile_show/#synopsis","title":"Synopsis","text":"<p>Show detailed information about a connection profile. If no name is provided, shows the current active profile.</p> <pre><code>rocketship profile show [name] [flags]\n</code></pre>"},{"location":"reference/rocketship_profile_show/#options","title":"Options","text":"<pre><code>  -h, --help   help for show\n</code></pre>"},{"location":"reference/rocketship_profile_show/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_profile_show/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship profile    - Manage connection profiles</li> </ul>"},{"location":"reference/rocketship_profile_show/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_profile_use/","title":"use","text":""},{"location":"reference/rocketship_profile_use/#rocketship-profile-use","title":"rocketship profile use","text":"<p>Set the default connection profile</p>"},{"location":"reference/rocketship_profile_use/#synopsis","title":"Synopsis","text":"<p>Set the default connection profile to use for all commands.</p> <pre><code>rocketship profile use &lt;name&gt; [flags]\n</code></pre>"},{"location":"reference/rocketship_profile_use/#options","title":"Options","text":"<pre><code>  -h, --help   help for use\n</code></pre>"},{"location":"reference/rocketship_profile_use/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_profile_use/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship profile    - Manage connection profiles</li> </ul>"},{"location":"reference/rocketship_profile_use/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_run/","title":"run","text":""},{"location":"reference/rocketship_run/#rocketship-run","title":"rocketship run","text":"<p>Run rocketship tests</p>"},{"location":"reference/rocketship_run/#synopsis","title":"Synopsis","text":"<p>Run rocketship tests from YAML files. Can run a single file or all tests in a directory.</p> <pre><code>rocketship run [flags]\n</code></pre>"},{"location":"reference/rocketship_run/#options","title":"Options","text":"<pre><code>  -a, --auto                      Automatically start and stop the local server for test execution\n      --branch string             Git branch name (auto-detected if not specified)\n      --commit string             Git commit SHA (auto-detected if not specified)\n  -d, --dir string                Path to directory containing test files (will run all rocketship.yaml files recursively)\n  -e, --engine string             Address of the rocketship engine (defaults to active profile)\n      --env-file string           Load environment variables from .env file\n  -f, --file string               Path to a single test file (default: rocketship.yaml in current directory)\n  -h, --help                      help for run\n      --metadata stringToString   Additional metadata key=value pairs (default [])\n      --project-id string         Project identifier for test run tracking\n      --schedule-name string      Schedule name for scheduled runs\n      --source string             Run source: cli-local, ci-branch, ci-main, scheduled\n  -t, --timestamp                 Show timestamps in log output\n      --trigger string            Trigger type: manual, webhook, schedule\n  -v, --var stringToString        Set variables (can be used multiple times: --var key=value --var nested.key=value) (default [])\n      --var-file string           Load variables from YAML file\n</code></pre>"},{"location":"reference/rocketship_run/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_run/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_run/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_start/","title":"Overview","text":""},{"location":"reference/rocketship_start/#rocketship-start","title":"rocketship start","text":"<p>Start rocketship the rocketship server</p>"},{"location":"reference/rocketship_start/#synopsis","title":"Synopsis","text":"<p>Start rocketship components like the server.</p>"},{"location":"reference/rocketship_start/#options","title":"Options","text":"<pre><code>  -h, --help   help for start\n</code></pre>"},{"location":"reference/rocketship_start/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_start/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> <li>rocketship start server  - Start the rocketship server</li> </ul>"},{"location":"reference/rocketship_start/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_start_server/","title":"start server","text":""},{"location":"reference/rocketship_start_server/#rocketship-start-server","title":"rocketship start server","text":"<p>Start the rocketship server</p>"},{"location":"reference/rocketship_start_server/#synopsis","title":"Synopsis","text":"<p>Start a local rocketship server.</p> <pre><code>rocketship start server [flags]\n</code></pre>"},{"location":"reference/rocketship_start_server/#options","title":"Options","text":"<pre><code>  -b, --background   Start server in background mode\n  -h, --help         help for server\n</code></pre>"},{"location":"reference/rocketship_start_server/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_start_server/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship start    - Start rocketship the rocketship server</li> </ul>"},{"location":"reference/rocketship_start_server/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_status/","title":"Rocketship status","text":""},{"location":"reference/rocketship_status/#rocketship-status","title":"rocketship status","text":"<p>Show authentication status</p> <pre><code>rocketship status [flags]\n</code></pre>"},{"location":"reference/rocketship_status/#options","title":"Options","text":"<pre><code>  -h, --help             help for status\n  -p, --profile string   Profile to inspect (defaults to active profile)\n</code></pre>"},{"location":"reference/rocketship_status/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_status/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_status/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_stop/","title":"Overview","text":""},{"location":"reference/rocketship_stop/#rocketship-stop","title":"rocketship stop","text":"<p>Stop rocketship the rocketship server</p>"},{"location":"reference/rocketship_stop/#synopsis","title":"Synopsis","text":"<p>Stop rocketship components like the server.</p>"},{"location":"reference/rocketship_stop/#options","title":"Options","text":"<pre><code>  -h, --help   help for stop\n</code></pre>"},{"location":"reference/rocketship_stop/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_stop/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> <li>rocketship stop server    - Stop the rocketship server</li> </ul>"},{"location":"reference/rocketship_stop/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_stop_server/","title":"stop server","text":""},{"location":"reference/rocketship_stop_server/#rocketship-stop-server","title":"rocketship stop server","text":"<p>Stop the rocketship server</p>"},{"location":"reference/rocketship_stop_server/#synopsis","title":"Synopsis","text":"<p>Stop the rocketship server and all its components.</p> <pre><code>rocketship stop server [flags]\n</code></pre>"},{"location":"reference/rocketship_stop_server/#options","title":"Options","text":"<pre><code>  -h, --help   help for server\n</code></pre>"},{"location":"reference/rocketship_stop_server/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_stop_server/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship stop  - Stop rocketship the rocketship server</li> </ul>"},{"location":"reference/rocketship_stop_server/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_validate/","title":"validate","text":""},{"location":"reference/rocketship_validate/#rocketship-validate","title":"rocketship validate","text":"<p>Validate Rocketship test files against the JSON schema</p>"},{"location":"reference/rocketship_validate/#synopsis","title":"Synopsis","text":"<p>Validate one or more Rocketship test files against the JSON schema. This command checks test file syntax, structure, and configuration without executing tests.</p> <p>Examples:   rocketship validate test.yaml                    # Validate a single file   rocketship validate ./tests/                     # Validate all YAML files in a directory   rocketship validate test1.yaml test2.yaml       # Validate multiple files</p> <pre><code>rocketship validate [file_or_directory] [flags]\n</code></pre>"},{"location":"reference/rocketship_validate/#options","title":"Options","text":"<pre><code>  -h, --help   help for validate\n</code></pre>"},{"location":"reference/rocketship_validate/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_validate/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_validate/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"reference/rocketship_version/","title":"version","text":""},{"location":"reference/rocketship_version/#rocketship-version","title":"rocketship version","text":"<p>Print the version number of Rocketship</p>"},{"location":"reference/rocketship_version/#synopsis","title":"Synopsis","text":"<p>Print the version number of Rocketship CLI.</p> <pre><code>rocketship version [flags]\n</code></pre>"},{"location":"reference/rocketship_version/#options","title":"Options","text":"<pre><code>  -h, --help   help for version\n</code></pre>"},{"location":"reference/rocketship_version/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --debug   Enable debug logging\n</code></pre>"},{"location":"reference/rocketship_version/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_version/#auto-generated-by-spf13cobra-on-9-oct-2025","title":"Auto generated by spf13/cobra on 9-Oct-2025","text":""},{"location":"yaml-reference/lifecycle-hooks/","title":"Lifecycle Hooks","text":"<p>Rocketship test suites can run deterministic setup and teardown hooks at both the suite and test levels. Hooks reuse the same step schema you already know (<code>name</code>, <code>plugin</code>, <code>config</code>, <code>assertions</code>, <code>save</code>, <code>retry</code>) and execute linearly in the order they are declared.</p>"},{"location":"yaml-reference/lifecycle-hooks/#suite-lifecycle","title":"Suite Lifecycle","text":"<pre><code>name: \"Checkout Suite\"\ninit:\n  - name: \"Boot ephemeral stack\"\n    plugin: script\n    config: { cmd: \"./env/up.sh\" }\ntests:\n  - name: \"Happy path checkout\"\n    steps: [...]\ncleanup:\n  always:\n    - name: \"Shutdown stack\"\n      plugin: script\n      config: { cmd: \"./env/down.sh\" }\n  on_failure:\n    - name: \"Collect logs\"\n      plugin: http\n      config:\n        method: GET\n        url: \"https://ops.example.com/logs?run={{ run_id }}\"\n</code></pre> <p>Execution order:</p> <ol> <li><code>init</code> runs once before any tests. If a step fails, the suite is marked failed, tests are skipped, and cleanup runs.</li> <li>Tests run (in parallel or sequentially, matching existing run behaviour).</li> <li><code>cleanup.always</code> runs once after every test completes. If any test or the suite init failed, <code>cleanup.on_failure</code> runs first.</li> </ol> <p>Saved values from suite init steps are injected as runtime variables on every test. Reference them directly:</p> <ul> <li><code>{{ api_token }}</code> \u2013 anywhere inside tests or cleanup steps.</li> <li><code>{{ api_token }}</code> inside suite cleanup.</li> </ul> <p>These values are read-only snapshots; cleanup can rely on them but should not expect later steps to consume data emitted in cleanup.</p>"},{"location":"yaml-reference/lifecycle-hooks/#test-lifecycle","title":"Test Lifecycle","text":"<pre><code>tests:\n  - name: \"Creates an order\"\n    init:\n      - name: \"Seed user\"\n        plugin: sql\n        config: { file: \"./sql/seed_user.sql\" }\n    steps:\n      - name: \"POST /orders\"\n        plugin: http\n        config: { url: \"{{ api_url }}/orders\" }\n        save:\n          - json_path: \".id\"\n            as: \"order_id\"\n    cleanup:\n      always:\n        - name: \"Delete order\"\n          plugin: http\n          config:\n            method: DELETE\n            url: \"{{ api_url }}/orders/{{ order_id }}\"\n      on_failure:\n        - name: \"Snapshot order payload\"\n          plugin: http\n          config:\n            method: GET\n            url: \"{{ api_url }}/orders/{{ order_id }}\"\n</code></pre> <p>For each test:</p> <ol> <li><code>init</code> runs first. Failure marks the test failed, skips the main <code>steps</code>, then moves straight into cleanup.</li> <li><code>steps</code> run with the same linear semantics as before.</li> <li><code>cleanup.always</code> runs every time. If the test failed (including its init phase), <code>cleanup.on_failure</code> runs beforehand.</li> </ol> <p>Test-level hook saves behave exactly like other runtime values: reference them as <code>{{ name }}</code> within the same test (init, steps, cleanup).</p>"},{"location":"yaml-reference/lifecycle-hooks/#referencing-saved-values","title":"Referencing Saved Values","text":"Source How to reference inside tests Where available Suite <code>init</code> saved values <code>{{ &lt;name&gt; }}</code> All test init/steps/cleanup, suite cleanup Test <code>init</code> or <code>steps</code> saved values <code>{{ &lt;name&gt; }}</code> Remaining steps and cleanups for that test Cleanup saved values <code>{{ &lt;name&gt; }}</code> Later cleanup steps in the same cleanup block <p>Additional notes:</p> <ul> <li>Saved values are injected as runtime variables, so you can use them in any templated string (URLs, headers, bodies, script vars, etc.).</li> <li>Test-level values never leak across tests. Each test gets its own state map.</li> <li>Suite cleanup runs with a disconnected Temporal context. Failures are logged but do not overwrite the original test/suite outcome.</li> </ul> <p>Use lifecycle hooks to create deterministic, self-cleaning suites that still respect Rocketship\u2019s linear execution model.</p>"},{"location":"yaml-reference/plugin-reference/","title":"Overview","text":""},{"location":"yaml-reference/plugin-reference/#test-structure","title":"Test Structure","text":"Field Required Description <code>name</code> \u2705 Name of the test suite <code>description</code> Description of the test suite <code>vars</code> Configuration variables that can be referenced in test steps using {{ vars.key }} syntax <code>openapi</code> Suite-level OpenAPI contract validation defaults applied to HTTP steps <code>init</code> Suite-level initialization steps executed before any tests run <code>tests</code> \u2705 Array of test cases <code>cleanup</code> Suite-level cleanup hooks executed after all tests complete or when initialization fails"},{"location":"yaml-reference/plugin-reference/#test-step-structure","title":"Test Step Structure","text":"Field Required Description <code>name</code> \u2705 Name of the test step <code>plugin</code> \u2705 Plugin to use for this step <code>config</code> \u2705 Configuration for the plugin <code>assertions</code> Assertions to validate the response <code>save</code> Response values to save for use in later steps <code>retry</code> Retry policy for the step activity"},{"location":"yaml-reference/plugin-reference/#supported-plugins","title":"Supported Plugins","text":"<ul> <li><code>http</code></li> <li><code>delay</code></li> <li><code>script</code></li> <li><code>sql</code></li> <li><code>log</code></li> <li><code>agent</code></li> <li><code>browser</code></li> <li><code>supabase</code></li> </ul>"},{"location":"yaml-reference/plugin-reference/#plugin-configurations","title":"Plugin Configurations","text":""},{"location":"yaml-reference/plugin-reference/#plugin-http","title":"Plugin: <code>http</code>","text":"Field Required Description Type / Allowed Values Notes <code>method</code> \u2705 HTTP method to use <code>string</code> - <code>url</code> \u2705 Request URL <code>string</code> - <code>headers</code> HTTP headers to include <code>object</code> - <code>body</code> Raw request body (string). If 'form' is also provided, 'form' takes precedence. <code>string</code> - <code>form</code> Form fields to be url-encoded as application/x-www-form-urlencoded <code>object</code> - <code>openapi</code> Override OpenAPI validation behavior for this HTTP step <code>object</code> - <code>openapi.spec</code> Path or URL to an OpenAPI v3 document <code>string</code> - <code>openapi.operation_id</code> Require the request to match a specific operationId <code>string</code> - <code>openapi.version</code> Optional spec version identifier used to invalidate cached contracts <code>string</code> - <code>openapi.validate_request</code> Enable request validation for this step <code>boolean</code> - <code>openapi.validate_response</code> Enable response validation for this step <code>boolean</code> -"},{"location":"yaml-reference/plugin-reference/#plugin-script","title":"Plugin: <code>script</code>","text":"Field Required Description Type / Allowed Values Notes <code>language</code> \u2705 Script language to use <code>javascript</code>, <code>shell</code> - <code>script</code> (oneOf) Inline script content <code>string</code> - <code>file</code> (oneOf) Path to external script file <code>string</code> - <code>timeout</code> Script execution timeout <code>string</code> -"},{"location":"yaml-reference/plugin-reference/#plugin-sql","title":"Plugin: <code>sql</code>","text":"Field Required Description Type / Allowed Values Notes <code>driver</code> \u2705 Database driver to use <code>postgres</code>, <code>mysql</code>, <code>sqlite</code>, <code>sqlserver</code> - <code>dsn</code> \u2705 Database connection string (Data Source Name) <code>string</code> - <code>commands[]</code> (oneOf) Array of SQL commands to execute <code>array of string</code> - <code>file</code> (oneOf) Path to external SQL file <code>string</code> - <code>timeout</code> Query execution timeout <code>string</code> -"},{"location":"yaml-reference/plugin-reference/#sql-assertions","title":"<code>sql</code> Assertions","text":"Field Required Description Allowed Values <code>type</code> \u2705 Type of SQL assertion <code>row_count</code>, <code>query_count</code>, <code>success_count</code>, <code>column_value</code> <code>expected</code> \u2705 Expected value for the assertion - <code>query_index</code> (if <code>type</code> is <code>row_count</code>) (if <code>type</code> is <code>column_value</code>) Index of query to check (for row_count and column_value assertions) - <code>row_index</code> (if <code>type</code> is <code>column_value</code>) Index of row to check (for column_value assertion) - <code>column</code> (if <code>type</code> is <code>column_value</code>) Column name to check (for column_value assertion) -"},{"location":"yaml-reference/plugin-reference/#sql-save-fields","title":"<code>sql</code> Save Fields","text":"Field Required Description Notes <code>sql_result</code> \u2705 Path to extract from SQL result (e.g., '.queries[0].rows[0].id') - <code>as</code> Variable name to save the extracted value as - <code>required</code> Whether the value is required (defaults to true) -"},{"location":"yaml-reference/plugin-reference/#plugin-log","title":"Plugin: <code>log</code>","text":"Field Required Description Type / Allowed Values Notes <code>message</code> \u2705 Message to log (supports template variables) <code>string</code> -"},{"location":"yaml-reference/plugin-reference/#plugin-agent","title":"Plugin: <code>agent</code>","text":"Field Required Description Type / Allowed Values Notes <code>agent</code> \u2705 Type of coding agent to use <code>claude-code</code> - <code>prompt</code> \u2705 Prompt to send to the agent (supports template variables) <code>string</code> - <code>mode</code> Agent execution mode <code>single</code>, <code>continue</code>, <code>resume</code> - <code>session_id</code> Session ID for resume mode (supports template variables) <code>string</code> - <code>max_turns</code> Maximum number of conversation turns <code>integer</code> - <code>timeout</code> Agent execution timeout <code>string</code> - <code>system_prompt</code> System prompt for the agent <code>string</code> - <code>output_format</code> Output format from the agent <code>text</code>, <code>json</code>, <code>streaming-json</code> - <code>continue_recent</code> Continue the most recent conversation <code>boolean</code> - <code>save_full_response</code> Save the complete response to context <code>boolean</code> -"},{"location":"yaml-reference/plugin-reference/#plugin-browser","title":"Plugin: <code>browser</code>","text":"Field Required Description Type / Allowed Values Notes <code>task</code> \u2705 Task description for the browser agent to perform (supports template variables) <code>string</code> - <code>llm</code> \u2705 No description <code>object</code> - <code>llm.provider</code> \u2705 LLM provider to use <code>openai</code>, <code>anthropic</code> - <code>llm.model</code> \u2705 LLM model to use (e.g., gpt-4, claude-3-sonnet) <code>string</code> - <code>llm.config</code> LLM configuration (API keys, etc.) <code>object</code> - <code>executor_type</code> Browser executor type <code>python</code> - <code>timeout</code> Browser automation timeout <code>string</code> - <code>max_steps</code> Maximum number of browser automation steps <code>integer</code> - <code>browser_type</code> Browser type to use <code>chromium</code>, <code>chrome</code>, <code>edge</code> - <code>headless</code> Run browser in headless mode <code>boolean</code> - <code>use_vision</code> Enable visual processing <code>boolean</code> - <code>session_id</code> Browser session ID for session persistence (supports template variables) <code>string</code> - <code>save_screenshots</code> Save screenshots during execution <code>boolean</code> - <code>allowed_domains[]</code> List of allowed domains for browser navigation <code>array of string</code> - <code>viewport</code> Browser viewport configuration <code>object</code> - <code>viewport.width</code> Viewport width in pixels <code>integer</code> - <code>viewport.height</code> Viewport height in pixels <code>integer</code> -"},{"location":"yaml-reference/plugin-reference/#plugin-supabase","title":"Plugin: <code>supabase</code>","text":"Field Required Description Type / Allowed Values Notes <code>url</code> \u2705 Supabase project URL <code>string</code> - <code>key</code> \u2705 Supabase API key (anon or service key) <code>string</code> - <code>operation</code> \u2705 Supabase operation to perform <code>select</code>, <code>insert</code>, <code>update</code>, <code>delete</code>, <code>rpc</code>, <code>auth_create_user</code>, <code>auth_delete_user</code>, <code>auth_sign_up</code>, <code>auth_sign_in</code>, <code>storage_create_bucket</code>, <code>storage_delete_bucket</code>, <code>storage_upload</code>, <code>storage_download</code>, <code>storage_delete</code> - <code>table</code> Table name for database operations <code>string</code> - <code>select</code> Configuration for select operation <code>object</code> - <code>select.columns[]</code> Columns to select <code>array of string</code> - <code>select.filters[]</code> Filters to apply <code>array of objects</code> - <code>select.filters[].column</code> \u2705 No description <code>string</code> - <code>select.filters[].operator</code> \u2705 No description <code>eq</code>, <code>neq</code>, <code>gt</code>, <code>gte</code>, <code>lt</code>, <code>lte</code>, <code>like</code>, <code>ilike</code>, <code>is</code>, <code>in</code>, <code>contains</code>, <code>contained_by</code>, <code>range_gt</code>, <code>range_gte</code>, <code>range_lt</code>, <code>range_lte</code> - <code>select.filters[].value</code> \u2705 Filter value <code>any</code> - <code>select.order[]</code> Ordering configuration <code>array of objects</code> - <code>select.order[].column</code> \u2705 No description <code>string</code> - <code>select.order[].ascending</code> No description <code>boolean</code> - <code>select.limit</code> No description <code>integer</code> - <code>select.offset</code> No description <code>integer</code> - <code>select.count</code> Count type for query <code>exact</code>, <code>planned</code>, <code>estimated</code> - <code>insert</code> Configuration for insert operation <code>object</code> - <code>insert.data</code> \u2705 Data to insert (object or array of objects) <code>any</code> - <code>insert.upsert</code> Use upsert (insert or update) <code>boolean</code> - <code>insert.on_conflict</code> Column(s) for conflict resolution <code>string</code> - <code>update</code> Configuration for update operation <code>object</code> - <code>update.data</code> \u2705 Data to update <code>object</code> - <code>update.filters[]</code> Filters to apply for update <code>array of objects</code> - <code>update.filters[].column</code> \u2705 No description <code>string</code> - <code>update.filters[].operator</code> \u2705 No description <code>string</code> - <code>update.filters[].value</code> \u2705 Filter value <code>any</code> - <code>delete</code> Configuration for delete operation <code>object</code> - <code>delete.filters[]</code> \u2705 Filters to apply for delete <code>array of objects</code> - <code>delete.filters[].column</code> \u2705 No description <code>string</code> - <code>delete.filters[].operator</code> \u2705 No description <code>string</code> - <code>delete.filters[].value</code> \u2705 Filter value <code>any</code> - <code>rpc</code> Configuration for RPC function call <code>object</code> - <code>rpc.function</code> \u2705 Function name to call <code>string</code> - <code>rpc.params</code> Function parameters <code>object</code> - <code>auth</code> Configuration for auth operations <code>object</code> - <code>auth.email</code> No description <code>string</code> - <code>auth.password</code> No description <code>string</code> - <code>auth.user_id</code> No description <code>string</code> - <code>auth.user_metadata</code> No description <code>object</code> - <code>auth.app_metadata</code> No description <code>object</code> - <code>storage</code> Configuration for storage operations <code>object</code> - <code>storage.bucket</code> No description <code>string</code> - <code>storage.path</code> No description <code>string</code> - <code>storage.file_content</code> No description <code>string</code> - <code>storage.file_path</code> No description <code>string</code> - <code>storage.public</code> No description <code>boolean</code> - <code>storage.cache_control</code> No description <code>string</code> - <code>storage.content_type</code> No description <code>string</code> - <code>timeout</code> Operation timeout <code>string</code> -"},{"location":"yaml-reference/plugin-reference/#assertions","title":"Assertions","text":"Field Required Description Allowed Values <code>type</code> \u2705 Type of assertion <code>status_code</code>, <code>json_path</code>, <code>header</code>, <code>row_count</code>, <code>query_count</code>, <code>success_count</code>, <code>column_value</code>, <code>supabase_count</code>, <code>supabase_error</code> <code>expected</code> \u2705 Expected value for the assertion - <code>path</code> (if <code>type</code> is <code>json_path</code>) JSON path for json_path assertion type - <code>name</code> (if <code>type</code> is <code>header</code>) Header name for header assertion type - <code>query_index</code> (if <code>type</code> is <code>row_count</code>) (if <code>type</code> is <code>column_value</code>) Index of query to check (for SQL assertions) - <code>row_index</code> (if <code>type</code> is <code>column_value</code>) Index of row to check (for column_value assertion) - <code>column</code> (if <code>type</code> is <code>column_value</code>) Column name to check (for column_value assertion) -"},{"location":"yaml-reference/plugin-reference/#save-fields","title":"Save Fields","text":"Field Required Description Notes <code>json_path</code> (oneOf) JSON path to extract from response - <code>header</code> (oneOf) Header name to extract from response - <code>sql_result</code> (oneOf) Path to extract from SQL result (e.g., '.queries[0].rows[0].id') - <code>as</code> \u2705 Variable name to save the extracted value as - <code>required</code> Whether the value is required (defaults to true) -"}]}