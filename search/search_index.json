{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rocketship Documentation","text":"<p>Welcome to the Rocketship documentation! Rocketship is an open-source API testing framework designed for humans and agents.</p>"},{"location":"#what-is-rocketship","title":"What is Rocketship?","text":"<p>\ud83d\ude80 Rocketship is an open\u2011source testing framework that can verify complex, API-driven scenarios that are made by your customers\u2014 or your systems. Rocketship brings durable execution backed by Temporal to your testing infra, and offers extensible plugins so you can add the APIs and protocols that matter to you.</p> <p>Define your test scenarios as declarative YAML specs -&gt; and have Rocketship run them locally or in your cloud environment as deterministic workflows.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Rocketship CLI - Run the engine locally or connect to a remote address</li> <li>Deploy-Ready Images - Need long-running, highly-scalable tests? Or just want to save test history? Host Rocketship on your own infra</li> <li>Declarative YAML - Define your test scenarios as declarative YAML specs</li> <li>Durable Execution - Need a test step to retry? Or a test to run for 10 hours? No problem!</li> <li>Plugin Ecosystem - Add the APIs and protocols that matter to you</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Quick Start Guide</li> <li>Command Reference</li> <li>Contributing Guide</li> </ul>"},{"location":"contributing/","title":"Contributing to Rocketship","text":"<p>Thank you for your interest in contributing to Rocketship! We're excited to have you join our community. This document provides guidelines and instructions for contributing to the project.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/rocketship.git\ncd rocketship\n</code></pre> <p>Set up your development environment:</p> <pre><code>make dev-setup\n</code></pre>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":"<p>Create a new branch for your feature/fix:</p> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <p>Make your changes and ensure tests pass:</p> <pre><code>make test\nmake lint\n</code></pre> <p>Build and install your local changes:</p> <pre><code>make install    # Removes old executable and go installs the local version\n</code></pre> <p>Test your changes:</p> <pre><code># OPTION 1: this will start the local rocketship server, run all tests in the examples directory, and then stop the server\nrocketship run -ad examples\n\n# OPTION 2: run the test server in a separate session and then run the tests\nrocketship start server --local\n# in another session, run the test(s)\nrocketship run -f &lt;path/to/rocketship.yaml&gt;\n</code></pre> <p>Test Server for Development:</p> <p>Inside for-contributors/, you'll find a test HTTP server that you can run as an in-memory store to test changes. Make sure your rocketship.yaml files point to this server (localhost:8080):</p> <pre><code>cd ./for-contributors/test-server &amp;&amp; go run .\n</code></pre> <p>This will help you test your changes with an in-memory store that can preserve resources.</p>"},{"location":"contributing/#creating-plugins","title":"Creating Plugins","text":"<p>Rocketship's plugin system allows you to add support for new APIs and protocols. To create a new plugin:</p> <ol> <li>Add your plugin in <code>internal/plugins/</code></li> <li>Implement the required plugin interface</li> <li>Register your plugin in the plugin registry</li> <li>Add tests for your plugin</li> <li>Document your plugin's usage</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>If you're updating features or adding new ones, please update the documentation:</p> <ul> <li>Documentation is written in Markdown under <code>docs/src/</code></li> <li>Run the documentation server locally:</li> </ul> <pre><code>make docs-serve\n</code></pre> <p>View your changes at <code>http://localhost:8000</code></p>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow Go best practices and conventions</li> <li>Use <code>gofmt</code> to format your code</li> <li>Add comments for non-obvious code sections</li> <li>Write meaningful commit messages</li> </ul>"},{"location":"contributing/#development-tips","title":"Development Tips","text":"<ul> <li>Set the <code>ROCKETSHIP_LOG</code> env var to <code>DEBUG</code> to see more verbose logging</li> <li>Pre-commit hooks will automatically run linting and tests</li> <li>Always test your changes locally before submitting a PR</li> </ul>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>Update Default Version</p> <p>Before creating a release, update the default version in <code>internal/embedded/binaries.go</code>:</p> <pre><code># Example: For releasing v1.2.3\nsed -i '' 's/defaultVersion *= *\".*\"/defaultVersion = \"v1.2.3\"/' internal/embedded/binaries.go\ngit add internal/embedded/binaries.go\ngit commit -m \"chore: update default version to v1.2.3\"\ngit push\n</code></pre> <p>Create a Release</p> <p>Once changes are merged to main, a maintainer can create a new release:</p> <ul> <li>Go to GitHub Releases: https://github.com/rocketship-ai/rocketship/releases</li> <li>Click \"Draft a new release\"</li> <li>Create a new tag (e.g., <code>v1.2.3</code>) following semantic versioning</li> <li>Write release notes</li> <li>Publish release</li> </ul> <p>This will automatically:</p> <ul> <li>Create and push a Git tag</li> <li>Trigger the release workflow</li> <li>Build platform-specific binaries</li> <li>Attach binaries to the release</li> </ul> <p>Test Installation</p> <pre><code># Install released version\ngo install github.com/rocketship-ai/rocketship/cmd/rocketship@v1.2.3\n\n# Test basic functionality\nrocketship version\n</code></pre>"},{"location":"contributing/#release-artifacts","title":"Release Artifacts","text":"<p>Each release includes platform-specific binaries for:</p> <ul> <li>CLI (rocketship)</li> <li>Worker</li> <li>Engine</li> </ul> <p>Supported platforms:</p> <ul> <li>Linux (amd64, arm64)</li> <li>macOS (amd64, arm64)</li> <li>Windows (amd64)</li> </ul>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Open an issue on GitHub</li> <li>Reach out to me on LinkedIn</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to Rocketship, you agree that your contributions will be licensed under the MIT License.</p>"},{"location":"deploy-on-kubernetes/","title":"Deploying Rocketship on Kubernetes","text":"<p>This guide covers deploying Rocketship on Kubernetes for production use.</p>"},{"location":"deploy-on-kubernetes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster (v1.20 or later)</li> <li>kubectl configured</li> <li>Helm v3 installed</li> <li>StorageClass for persistent volumes</li> </ul>"},{"location":"deploy-on-kubernetes/#architecture","title":"Architecture","text":"<p>The Kubernetes deployment of the Rocketship architecture can be thought of like this:</p> <p></p>"},{"location":"deploy-on-kubernetes/#deployment-steps","title":"Deployment Steps","text":""},{"location":"deploy-on-kubernetes/#1-create-namespace","title":"1. Create Namespace","text":"<pre><code>kubectl create namespace rocketship\n</code></pre>"},{"location":"deploy-on-kubernetes/#2-deploy-temporal","title":"2. Deploy Temporal","text":"<p>We recommend using the official Temporal Helm chart:</p> <pre><code># Add Temporal Helm repo\nhelm repo add temporal https://temporal.github.io/helm-charts\nhelm repo update\n\n# Install Temporal\nhelm install temporal temporal/temporal \\\n  --namespace rocketship \\\n  --set server.replicaCount=1 \\\n  --set cassandra.config.cluster_size=1 \\\n  --set prometheus.enabled=true \\\n  --set grafana.enabled=true\n</code></pre>"},{"location":"deploy-on-kubernetes/#3-deploy-rocketship-engine","title":"3. Deploy Rocketship Engine","text":"<p>Create <code>engine-deployment.yaml</code>:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rocketship-engine\n  namespace: rocketship\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: rocketship-engine\n  template:\n    metadata:\n      labels:\n        app: rocketship-engine\n    spec:\n      containers:\n        - name: engine\n          image: rocketshipai/rocketship-engine:latest\n          ports:\n            - containerPort: 7700\n            - containerPort: 7701\n          env:\n            - name: TEMPORAL_HOST\n              value: temporal-frontend.rocketship:7233\n          resources:\n            requests:\n              cpu: \"100m\"\n              memory: \"128Mi\"\n            limits:\n              cpu: \"500m\"\n              memory: \"512Mi\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: rocketship-engine\n  namespace: rocketship\nspec:\n  selector:\n    app: rocketship-engine\n  ports:\n    - name: grpc\n      port: 7700\n      targetPort: 7700\n    - name: http\n      port: 7701\n      targetPort: 7701\n  type: ClusterIP\n</code></pre> <p>Apply the configuration:</p> <pre><code>kubectl apply -f engine-deployment.yaml\n</code></pre>"},{"location":"deploy-on-kubernetes/#4-deploy-rocketship-worker","title":"4. Deploy Rocketship Worker","text":"<p>Create <code>worker-deployment.yaml</code>:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rocketship-worker\n  namespace: rocketship\nspec:\n  replicas: 3 # Adjust based on your needs\n  selector:\n    matchLabels:\n      app: rocketship-worker\n  template:\n    metadata:\n      labels:\n        app: rocketship-worker\n    spec:\n      containers:\n        - name: worker\n          image: rocketshipai/rocketship-worker:latest\n          env:\n            - name: TEMPORAL_HOST\n              value: temporal-frontend.rocketship:7233\n          resources:\n            requests:\n              cpu: \"100m\"\n              memory: \"128Mi\"\n            limits:\n              cpu: \"500m\"\n              memory: \"512Mi\"\n</code></pre> <p>Apply the configuration:</p> <pre><code>kubectl apply -f worker-deployment.yaml\n</code></pre>"},{"location":"deploy-on-kubernetes/#5-configure-ingress-optional","title":"5. Configure Ingress (Optional)","text":"<p>If you need external access to the engine:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: rocketship-engine\n  namespace: rocketship\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\nspec:\n  rules:\n    - host: rocketship.your-domain.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: rocketship-engine\n                port:\n                  number: 7700\n</code></pre>"},{"location":"deploy-on-kubernetes/#monitoring","title":"Monitoring","text":""},{"location":"deploy-on-kubernetes/#1-set-up-prometheus-monitoring","title":"1. Set up Prometheus monitoring:","text":"<pre><code>apiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: rocketship\n  namespace: rocketship\nspec:\n  selector:\n    matchLabels:\n      app: rocketship-engine\n  endpoints:\n    - port: grpc\n      interval: 15s\n</code></pre>"},{"location":"deploy-on-kubernetes/#2-configure-logging","title":"2. Configure logging:","text":"<pre><code>apiVersion: logging.banzaicloud.io/v1beta1\nkind: Flow\nmetadata:\n  name: rocketship-logs\n  namespace: rocketship\nspec:\n  filters:\n    - parser:\n        remove_key_name_field: true\n        parse:\n          type: json\n  match:\n    - select:\n        labels:\n          app: rocketship-engine\n          app: rocketship-worker\n  localOutputRefs:\n    - loki-output\n</code></pre>"},{"location":"deploy-on-kubernetes/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deploy-on-kubernetes/#common-issues","title":"Common Issues","text":"<p>Worker Connection Issues:</p> <pre><code>kubectl logs -n rocketship -l app=rocketship-worker\n</code></pre> <p>Engine Service Issues:</p> <pre><code>kubectl logs -n rocketship -l app=rocketship-engine\n</code></pre> <p>Temporal Issues:</p> <pre><code>kubectl logs -n rocketship -l app=temporal-frontend\n</code></pre>"},{"location":"deploy-on-kubernetes/#health-checks","title":"Health Checks","text":"<pre><code># Check pod status\nkubectl get pods -n rocketship\n\n# Check service endpoints\nkubectl get endpoints -n rocketship\n\n# Check logs\nkubectl logs -n rocketship -l app=rocketship-engine\n</code></pre>"},{"location":"deploy-on-kubernetes/#next-steps","title":"Next Steps","text":"<ul> <li>Command Reference</li> <li>Examples</li> </ul>"},{"location":"deploy-on-your-cloud/","title":"Deploying Rocketship on Your Cloud","text":"<p>Rocketship can be deployed in your cloud environment to run tests at scale, persist test history, and leverage all of Temporal's durable execution features. This guide covers the different deployment options and considerations.</p>"},{"location":"deploy-on-your-cloud/#architecture-overview","title":"Architecture Overview","text":"<p>Rocketship consists of three main components:</p> <ol> <li>Engine: The central service that receives test requests and coordinates test execution with Temporal</li> <li>Worker: Executes test steps and reports results back to Temporal</li> <li>Temporal: Handles workflow orchestration and state management</li> </ol>"},{"location":"deploy-on-your-cloud/#deployment-options","title":"Deployment Options","text":""},{"location":"deploy-on-your-cloud/#docker-compose","title":"Docker Compose","text":"<p>The simplest way to deploy Rocketship is using Docker Compose. This is ideal for:</p> <ul> <li>Development environments</li> <li>Small-scale deployments</li> <li>Testing and evaluation</li> </ul> <p>See the Docker Compose Setup section for details.</p>"},{"location":"deploy-on-your-cloud/#kubernetes","title":"Kubernetes","text":"<p>For production deployments, we recommend using Kubernetes. This provides:</p> <ul> <li>High availability</li> <li>Automatic scaling</li> <li>Better resource management</li> <li>Production-grade monitoring</li> </ul> <p>See the Kubernetes Deployment guide for details.</p>"},{"location":"deploy-on-your-cloud/#docker-compose-setup","title":"Docker Compose Setup","text":"<p>Clone the Rocketship repository, navigate to the <code>.docker</code> directory, and run the following command:</p> <pre><code>docker compose up -d\n</code></pre> <p>Verify the deployment:</p> <pre><code># Check service status\ndocker-compose ps\n\n# Check engine logs\ndocker-compose logs engine\n\n# Check worker logs\ndocker-compose logs worker\n</code></pre> <p>Run a test:</p> <pre><code>rocketship run -f your-test.yaml -e localhost:7700\n</code></pre>"},{"location":"deploy-on-your-cloud/#next-steps","title":"Next Steps","text":"<ul> <li>Deploy on Kubernetes for production-grade deployment</li> <li>Command Reference for CLI usage</li> <li>Examples for test suite examples</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>Rocketship comes with example test suites that demonstrate different features and use cases. Each example includes detailed explanations and ready-to-use test specifications.</p>"},{"location":"examples/#available-examples","title":"Available Examples","text":""},{"location":"examples/#http-testing","title":"HTTP Testing","text":"<ul> <li>Request Chaining &amp; Delays - Learn how to chain HTTP requests, handle responses, and use delays in your test suites</li> </ul>"},{"location":"examples/#configuration-variables","title":"Configuration &amp; Variables","text":"<ul> <li>Configuration Variables - Learn how to parameterize tests with configuration variables, CLI overrides, and variable files</li> </ul>"},{"location":"examples/#database-testing","title":"Database Testing","text":"<ul> <li>SQL Testing - Learn how to test database operations with PostgreSQL, MySQL, SQLite, and SQL Server</li> </ul>"},{"location":"examples/#scripting-custom-logic","title":"Scripting &amp; Custom Logic","text":"<ul> <li>Custom Scripting - Learn how to add custom JavaScript logic to your test suites</li> </ul>"},{"location":"examples/#debugging-logging","title":"Debugging &amp; Logging","text":"<ul> <li>Log Plugin - Learn how to add custom logging messages to your test suites for debugging and monitoring</li> </ul>"},{"location":"examples/#running-the-examples","title":"Running the Examples","text":"<p>The examples use the hosted test server at <code>tryme.rocketship.sh</code>. This server provides a simple HTTP API that you can use to experiment with Rocketship's features. Details:</p> <ul> <li>Test CRUD operations for a resource type</li> <li>Resources are isolated based off a session header</li> <li>FYI: Resource cleanup is done hourly (every :00)</li> </ul> <p>Then, run an example:</p> <pre><code># Run the request chaining example\nrocketship run -af examples/request-chaining/rocketship.yaml\n\n# Run the configuration variables example\nrocketship run -af examples/config-variables/rocketship.yaml\n\n# Run with variable overrides\nrocketship run -af examples/config-variables/rocketship.yaml --var environment=production\n\n# Run the custom scripting example\nrocketship run -af examples/custom-scripting/rocketship.yaml\n\n# Run the log plugin example\nrocketship run -af examples/simple-log/rocketship.yaml\n</code></pre>"},{"location":"examples/#database-examples","title":"Database Examples","text":"<p>For SQL testing examples, you'll need to start the test databases first:</p> <pre><code># Start test databases with Docker Compose\ncd .docker &amp;&amp; docker-compose up postgres-test mysql-test -d\n\n# Wait for databases to be ready, then run SQL tests\nrocketship run -f examples/sql-testing/rocketship.yaml -e localhost:7700\n</code></pre> <p>The SQL examples use local test databases with pre-populated sample data: - PostgreSQL: Available at <code>localhost:5433</code>  - MySQL: Available at <code>localhost:3307</code></p> <p>You can find the test server's source code in the <code>for-contributors/test-server</code> directory.</p>"},{"location":"installation/","title":"Installation","text":"<p>Rocketship CLI is available for macOS, Linux, and Windows. Choose your platform below for installation instructions.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>If you want to run tests without needing to connect to a remote engine, you need to install Temporal which is required for the local engine:</p> <pre><code>brew install temporal  # macOS\n</code></pre> <p>For other platforms, please follow the Temporal installation guide.</p>"},{"location":"installation/#macos","title":"macOS","text":""},{"location":"installation/#apple-silicon","title":"Apple Silicon","text":"<pre><code>curl -Lo /usr/local/bin/rocketship https://github.com/rocketship-ai/rocketship/releases/latest/download/rocketship-darwin-arm64\nchmod +x /usr/local/bin/rocketship\n</code></pre>"},{"location":"installation/#intel","title":"Intel","text":"<pre><code>curl -Lo /usr/local/bin/rocketship https://github.com/rocketship-ai/rocketship/releases/latest/download/rocketship-darwin-amd64\nchmod +x /usr/local/bin/rocketship\n</code></pre>"},{"location":"installation/#linux","title":"Linux","text":""},{"location":"installation/#amd64","title":"AMD64","text":"<pre><code>curl -Lo /usr/local/bin/rocketship https://github.com/rocketship-ai/rocketship/releases/latest/download/rocketship-linux-amd64\nchmod +x /usr/local/bin/rocketship\n</code></pre>"},{"location":"installation/#arm64","title":"ARM64","text":"<pre><code>curl -Lo /usr/local/bin/rocketship https://github.com/rocketship-ai/rocketship/releases/latest/download/rocketship-linux-arm64\nchmod +x /usr/local/bin/rocketship\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<ol> <li>Download the latest Windows executable from our releases page</li> <li>Rename it to <code>rocketship.exe</code></li> <li>Move it to a directory in your PATH (e.g., <code>C:\\Windows\\System32\\</code>)</li> </ol>"},{"location":"installation/#docker","title":"Docker","text":"<p>Rocketship is also available as a Docker image. It will run the tests you specify then exit:</p> <pre><code>docker pull rocketshipai/rocketship:latest\n</code></pre> <p>To run Rocketship using Docker:</p> <pre><code>docker run rocketshipai/rocketship:latest\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify your installation, run:</p> <pre><code>rocketship version\n</code></pre>"},{"location":"installation/#optional-creating-an-alias","title":"Optional: Creating an Alias","text":"<p>If you prefer a shorter command, you can create an alias for the <code>rocketship</code> command. Here's how to do it on different platforms:</p>"},{"location":"installation/#unix-like-systems-macos-linux","title":"Unix-like Systems (macOS, Linux)","text":"<p>Add one of these to your shell's configuration file (<code>.bashrc</code>, <code>.zshrc</code>, etc.):</p> <pre><code># Alias to \"rs\"\nalias rs=\"rocketship\"\n</code></pre>"},{"location":"installation/#windows-powershell","title":"Windows (PowerShell)","text":"<p>Add this to your PowerShell profile:</p> <pre><code>Set-Alias -Name rs -Value rocketship\n</code></pre> <p>Remember to restart your shell or run <code>source ~/.bashrc</code> (or equivalent) to apply the changes.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ul> <li>Check out our Quick Start Guide to run your first test</li> <li>Learn about test specifications</li> <li>Explore our examples</li> </ul>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Get started with Rocketship in minutes! This guide will help you install Rocketship and run your first test.</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<p>First, install Temporal (required for the local engine):</p> <pre><code>brew install temporal\n</code></pre> <p>Then install the Rocketship CLI:</p> <pre><code># for arm64 macos\ncurl -Lo /usr/local/bin/rocketship https://github.com/rocketship-ai/rocketship/releases/latest/download/rocketship-darwin-arm64\nchmod +x /usr/local/bin/rocketship\n</code></pre> <p>For detailed installation instructions for other platforms and optional aliases, see the Installation Guide.</p>"},{"location":"quickstart/#your-first-test","title":"Your First Test","text":"<p>Create a test file:</p> <pre><code>cat &gt; simple-test.yaml &lt;&lt; 'EOF'\nname: \"Simple Test Suite\"\ndescription: \"A simple test suite!\"\nversion: \"v1.0.0\"\ntests:\n  - name: \"API Health Check\"\n    steps:\n      - name: \"Check API status\"\n        plugin: \"http\"\n        config:\n          method: \"GET\"\n          url: \"https://httpbin.org/status/200\"\n        assertions:\n          - type: \"status_code\"\n            expected: 200\nEOF\n</code></pre> <p>Run the test:</p> <pre><code>rocketship run -af simple-test.yaml\n</code></pre> <p>The <code>-a</code> flag tells Rocketship to automatically start and stop the local server, and <code>-f</code> specifies the test file to run.</p>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the CLI reference</li> <li>Check out example tests</li> </ul>"},{"location":"examples/config-variables/","title":"Configuration Variables Example","text":"<p>This example demonstrates how to use configuration variables in Rocketship test suites. Configuration variables allow you to parameterize your tests, making them reusable across different environments and configurations.</p>"},{"location":"examples/config-variables/#key-features-demonstrated","title":"Key Features Demonstrated","text":"<ul> <li>Configuration Variables: Define reusable variables in the <code>vars</code> section using <code>{{ .vars.variable_name }}</code></li> <li>Runtime Variables: Use variables generated during test execution using <code>{{ variable_name }}</code></li> <li>Nested Variables: Support for nested structures like <code>{{ .vars.auth.token }}</code></li> <li>Mixed Variables: Combine config and runtime variables in the same test</li> <li>CLI Overrides: Override config variables from the command line</li> <li>Variable Files: Load variables from external files</li> </ul> <p>For information about environment variables, see the Environment Variables guide.</p>"},{"location":"examples/config-variables/#configuration-variables-section","title":"Configuration Variables Section","text":"<pre><code>vars:\n  base_url: \"https://tryme.rocketship.sh\"\n  environment: \"staging\"\n  timeout: 2\n  auth:\n    header_name: \"X-API-Key\"\n    token: \"test-api-key-123\"\n  book:\n    title: \"The Go Programming Language\"\n    author: \"Alan Donovan\"\n    isbn: \"978-0134190440\"\ntests: ...\n</code></pre>"},{"location":"examples/config-variables/#variable-usage-patterns","title":"Variable Usage Patterns","text":""},{"location":"examples/config-variables/#1-basic-config-variables","title":"1. Basic Config Variables","text":"<pre><code>- name: \"Create book\"\n  plugin: \"http\"\n  config:\n    method: \"POST\"\n    url: \"{{ .vars.base_url }}/books\"\n    headers:\n      \"{{ .vars.auth.header_name }}\": \"{{ .vars.auth.token }}\"\n</code></pre>"},{"location":"examples/config-variables/#2-mixed-config-and-runtime-variables","title":"2. Mixed Config and Runtime Variables","text":"<pre><code>- name: \"Get book\"\n  plugin: \"http\"\n  config:\n    url: \"{{ .vars.base_url }}/books/{{ book_id }}\" # Config + Runtime\n  assertions:\n    - type: \"json_path\"\n      path: \".environment\"\n      expected: \"{{ .vars.environment }}\" # Config variable\n    - type: \"json_path\"\n      path: \".id\"\n      expected: \"{{ book_id }}\" # Runtime variable (from save)\n</code></pre>"},{"location":"examples/config-variables/#3-config-variables-in-plugin-configuration","title":"3. Config Variables in Plugin Configuration","text":"<pre><code>- name: \"Wait with config timeout\"\n  plugin: \"delay\"\n  config:\n    duration: \"{{ .vars.timeout }}s\"\n</code></pre>"},{"location":"examples/config-variables/#running-the-example","title":"Running the Example","text":""},{"location":"examples/config-variables/#basic-usage","title":"Basic Usage","text":"<pre><code># Run with default variables\nrocketship run -af examples/config-variables/rocketship.yaml\n</code></pre>"},{"location":"examples/config-variables/#cli-variable-overrides","title":"CLI Variable Overrides","text":"<pre><code># Override single variables\nrocketship run -af examples/config-variables/rocketship.yaml \\\n  --var base_url=https://api.production.com \\\n  --var environment=production\n\n# Override nested variables\nrocketship run -af examples/config-variables/rocketship.yaml \\\n  --var auth.token=prod-api-key-456 \\\n  --var book.title=\"Advanced Go Programming\"\n</code></pre>"},{"location":"examples/config-variables/#using-variable-files","title":"Using Variable Files","text":"<p>Create a <code>prod-vars.yaml</code> file:</p> <pre><code>base_url: \"https://api.production.com\"\nenvironment: \"production\"\nauth:\n  token: \"prod-api-key-456\"\ntimeout: 60\n</code></pre> <p>Then run:</p> <pre><code>rocketship run -af examples/config-variables/rocketship.yaml --var-file prod-vars.yaml\n</code></pre>"},{"location":"examples/config-variables/#variable-precedence","title":"Variable Precedence","text":"<p>Variables are resolved in this order (highest to lowest precedence):</p> <ol> <li>CLI Variables (<code>--var key=value</code>)</li> <li>Variable Files (<code>--var-file vars.yaml</code>)</li> <li>YAML vars section (built into test file)</li> </ol>"},{"location":"examples/config-variables/#best-practices","title":"Best Practices","text":""},{"location":"examples/config-variables/#1-clear-variable-naming","title":"1. Clear Variable Naming","text":"<p>Use descriptive names that indicate purpose:</p> <pre><code>vars:\n  api_base_url: \"https://api.staging.com\"\n  max_retry_count: 3\n  test_user_email: \"test@example.com\"\n</code></pre>"},{"location":"examples/config-variables/#2-environment-specific-configurations","title":"2. Environment-Specific Configurations","text":"<p>Structure variables for easy environment switching:</p> <pre><code>vars:\n  environment: \"staging\"\n  api:\n    base_url: \"https://api.staging.com\"\n    timeout: 30\n  database:\n    host: \"db.staging.com\"\n    port: 5432\n</code></pre>"},{"location":"examples/config-variables/#3-separate-config-from-runtime","title":"3. Separate Config from Runtime","text":"<ul> <li>Config variables: Use <code>{{ .vars.* }}</code> for environment/configuration values</li> <li>Runtime variables: Use <code>{{ variable }}</code> for values captured during test execution</li> </ul>"},{"location":"examples/config-variables/#4-variable-files-for-environments","title":"4. Variable Files for Environments","text":"<p>Create separate variable files for each environment:</p> <ul> <li><code>vars/staging.yaml</code></li> <li><code>vars/production.yaml</code></li> <li><code>vars/development.yaml</code></li> </ul>"},{"location":"examples/config-variables/#variable-types-supported","title":"Variable Types Supported","text":"<ul> <li>Strings: <code>\"value\"</code></li> <li>Numbers: <code>42</code>, <code>3.14</code></li> <li>Booleans: <code>true</code>, <code>false</code></li> <li>Objects: Nested key-value structures</li> <li>Arrays: Lists of values</li> </ul>"},{"location":"examples/config-variables/#integration-with-test-flow","title":"Integration with Test Flow","text":"<p>The configuration variables example demonstrates a complete CRUD flow:</p> <ol> <li>Create a book with config variables for API endpoint and auth</li> <li>Read the book using mixed config and runtime variables</li> <li>Update the book with runtime data from previous steps</li> <li>Delete the book for cleanup</li> </ol> <p>This pattern shows how config variables work seamlessly with Rocketship's existing runtime variable system from <code>save</code> blocks.</p>"},{"location":"examples/custom-scripting/","title":"Custom Scripting - JavaScript Integration","text":"<p>This example demonstrates how to use custom scripting in Rocketship test suites. The script plugin allows you to execute custom JavaScript code within your test workflows, enabling complex data processing, validation, and business logic that goes beyond simple HTTP assertions.</p>"},{"location":"examples/custom-scripting/#key-features-demonstrated","title":"Key Features Demonstrated","text":"<ul> <li>Inline JavaScript: Execute scripts directly in your YAML test files</li> <li>External JavaScript Files: Reference external <code>.js</code> files for complex logic</li> <li>State Integration: Access and modify test state between HTTP and script steps</li> <li>Configuration Variables: Access config variables from script code</li> <li>Bidirectional Data Flow: Pass data from HTTP \u2192 Script \u2192 HTTP seamlessly</li> <li>Built-in Functions: Use <code>save()</code> and <code>assert()</code> functions</li> <li>Business Logic: Implement complex data validation and transformation</li> </ul>"},{"location":"examples/custom-scripting/#script-plugin-configuration","title":"Script Plugin Configuration","text":"<p>The script plugin supports two execution modes:</p>"},{"location":"examples/custom-scripting/#inline-scripts","title":"Inline Scripts","text":"<pre><code>- name: \"Process data with inline JavaScript\"\n  plugin: \"script\"\n  config:\n    language: \"javascript\"\n    script: |\n      // Access config variables\n      let apiUrl = vars.api_url;\n\n      // Access state from previous steps\n      let userName = state.user_name;\n\n      // Process and save data\n      let processedName = state.user_name.toUpperCase();\n      save(\"processed_name\", processedName);\n\n      // Validate data\n      assert(state.user_name, \"User name must be present\");\n</code></pre>"},{"location":"examples/custom-scripting/#external-javascript-files","title":"External JavaScript Files","text":"<pre><code>- name: \"Process data with external file\"\n  plugin: \"script\"\n  config:\n    language: \"javascript\"\n    file: \"examples/custom-scripting/validate-and-process.js\"\n</code></pre>"},{"location":"examples/custom-scripting/#complete-integration-example","title":"Complete Integration Example","text":"<p>The example demonstrates a complete HTTP \u2194 Script integration workflow:</p> <pre><code>name: \"Custom Scripting Demo - HTTP\u2194Script State Integration\"\nvars:\n  api_url: \"https://tryme.rocketship.sh\"\n  max_retries: 3\n  user_name: \"test_user\"\n\ntests:\n  - name: \"Complete HTTP and Script State Integration\"\n    steps:\n      # 1. HTTP: Create initial data\n      - name: \"HTTP Step 1 - Create Animal Data\"\n        plugin: \"http\"\n        config:\n          method: \"POST\"\n          url: \"{{ .vars.api_url }}/animals\"\n          body: |\n            {\n              \"name\": \"African Elephant\",\n              \"species\": \"Loxodonta africana\",\n              \"habitat\": \"Savanna\",\n              \"weight_kg\": 6000,\n              \"conservation_status\": \"Endangered\"\n            }\n        save:\n          - json_path: \".id\"\n            as: \"animal_id\"\n          - json_path: \".name\"\n            as: \"animal_name\"\n\n      # 2. Script: Process HTTP data\n      - name: \"Script Step 1 - Initial Processing\"\n        plugin: \"script\"\n        config:\n          language: \"javascript\"\n          script: |\n            // Access config variables and HTTP data\n            let apiUrl = vars.api_url;\n            let userName = vars.user_name;\n            let animalName = state.animal_name;\n            let animalId = state.animal_id;\n\n            // Process user and config data\n            let processedUserName = vars.user_name.toUpperCase();\n            let animalWeight = parseInt(state.animal_weight);\n            let weightCategory = animalWeight &gt; 1000 ? \"large\" : \"medium\";\n\n            // Save processed results for next steps\n            save(\"processed_user_name\", processedUserName);\n            save(\"weight_category\", weightCategory);\n\n      # 3. Script: External file processing\n      - name: \"Script Step 2 - External File Processing\"\n        plugin: \"script\"\n        config:\n          language: \"javascript\"\n          file: \"examples/custom-scripting/validate-and-process.js\"\n\n      # 4. HTTP: Use script data\n      - name: \"HTTP Step 2 - Create Assessment\"\n        plugin: \"http\"\n        config:\n          method: \"POST\"\n          url: \"{{ .vars.api_url }}/animals/assessments\"\n          headers:\n            X-Processed-By: \"{{ processed_user_name }}\"\n          body: |\n            {\n              \"animal_id\": \"{{ animal_id }}\",\n              \"category\": \"{{ animal_category }}\",\n              \"score\": {{ animal_score }},\n              \"weight_category\": \"{{ weight_category }}\"\n            }\n</code></pre>"},{"location":"examples/custom-scripting/#built-in-functions","title":"Built-in Functions","text":""},{"location":"examples/custom-scripting/#savekey-value","title":"<code>save(key, value)</code>","text":"<p>Save data to the test state for use in subsequent steps:</p> <pre><code>// Save simple values\nsave(\"user_count\", \"42\");\nsave(\"status\", \"active\");\n\n// Save complex data as JSON\nconst profile = { name: \"John\", age: 30 };\nsave(\"user_profile\", JSON.stringify(profile));\n</code></pre>"},{"location":"examples/custom-scripting/#assertcondition-message","title":"<code>assert(condition, message)</code>","text":"<p>Validate data and fail the test if conditions aren't met:</p> <pre><code>// Basic assertions\nassert(state.user_id, \"User ID must be present\");\nassert(state.score &gt; 0, \"Score must be positive\");\n\n// Complex validations\nassert(state.email.includes(\"@\"), \"Email must be valid\");\nassert(Array.isArray(JSON.parse(state.items)), \"Items must be an array\");\n</code></pre>"},{"location":"examples/custom-scripting/#state-and-variable-access","title":"State and Variable Access","text":""},{"location":"examples/custom-scripting/#configuration-variables","title":"Configuration Variables","text":"<p>Access variables defined in the <code>vars</code> section:</p> <pre><code>// Simple variables\nlet apiUrl = vars.api_url;\nlet timeout = vars.timeout;\n\n// Nested variables\nlet authToken = vars.auth.token;\nlet dbHost = vars.database.host;\n</code></pre>"},{"location":"examples/custom-scripting/#test-state","title":"Test State","text":"<p>Access data saved from previous HTTP or script steps:</p> <pre><code>// Data from HTTP responses\nlet userId = state.user_id;        // From save: json_path: \".id\"\nlet userName = state.user_name;    // From save: json_path: \".name\"\n\n// Data from previous scripts\nlet processed = state.processed_flag;  // From save(\"processed_flag\", \"true\")\nlet score = parseInt(state.user_score); // Convert saved strings to numbers\n</code></pre>"},{"location":"examples/custom-scripting/#external-javascript-files_1","title":"External JavaScript Files","text":"<p>For complex logic, use external JavaScript files:</p> <pre><code>// validate-and-process.js\n\n// Validate required data\nif (!state.animal_name || !state.animal_species) {\n    assert(false, \"Missing required animal data\");\n}\n\n// Complex business logic\nlet animalCategory = \"unknown\";\nconst domesticAnimals = [\"dog\", \"cat\", \"horse\"];\nconst wildAnimals = [\"lion\", \"tiger\", \"elephant\", \"bear\"];\n\nif (domesticAnimals.some(animal =&gt; state.animal_name.toLowerCase().includes(animal))) {\n    animalCategory = \"domestic\";\n} else if (wildAnimals.some(animal =&gt; state.animal_name.toLowerCase().includes(animal))) {\n    animalCategory = \"wild\";\n} else {\n    animalCategory = \"exotic\";\n}\n\n// Calculate scores\nlet animalScore = state.animal_name.length + state.animal_species.length;\nif (animalCategory === \"wild\") animalScore += 10;\n\n// Generate recommendations\nlet recommendations = [];\nif (animalCategory === \"domestic\") {\n    recommendations.push(\"suitable_for_families\");\n} else if (animalCategory === \"wild\") {\n    recommendations.push(\"observe_from_distance\");\n}\n\n// Save results for HTTP steps\nsave(\"animal_category\", animalCategory);\nsave(\"animal_score\", animalScore.toString());\nsave(\"recommendations_count\", recommendations.length.toString());\n\n// Save individual recommendations for template access\nrecommendations.forEach((rec, index) =&gt; {\n    save(`recommendation_${index + 1}`, rec);\n});\n</code></pre>"},{"location":"examples/custom-scripting/#running-the-example","title":"Running the Example","text":"<pre><code># Run the complete custom scripting example\nrocketship run -af examples/custom-scripting/rocketship.yaml\n</code></pre>"},{"location":"examples/custom-scripting/#understanding-the-data-flow","title":"Understanding the Data Flow","text":"<p>The example demonstrates a complete data processing pipeline:</p> <ol> <li>HTTP Step 1: Create animal data via API, save ID and attributes</li> <li>Script Step 1: Process config variables and HTTP data, create derived values</li> <li>Script Step 2: External file performs complex business logic and categorization</li> <li>HTTP Step 2: Use script-processed data to create a comprehensive assessment</li> <li>Script Step 3: Final validation ensures all data flows worked correctly</li> </ol> <p>Each step builds on the previous ones, showing:</p> <ul> <li>HTTP \u2192 Script: Pass API response data to JavaScript for processing</li> <li>Script \u2192 Script: Share state between inline and external scripts</li> <li>Script \u2192 HTTP: Use processed data in API requests</li> <li>Config Integration: Mix configuration variables with runtime processing</li> </ul>"},{"location":"examples/custom-scripting/#use-cases-for-custom-scripting","title":"Use Cases for Custom Scripting","text":""},{"location":"examples/custom-scripting/#data-transformation","title":"Data Transformation","text":"<pre><code>// Transform API responses\nlet rawData = JSON.parse(state.api_response);\nlet transformedData = rawData.map(item =&gt; ({\n    id: item.identifier,\n    name: item.display_name.toUpperCase(),\n    active: item.status === \"enabled\"\n}));\nsave(\"transformed_data\", JSON.stringify(transformedData));\n</code></pre>"},{"location":"examples/custom-scripting/#complex-validations","title":"Complex Validations","text":"<pre><code>// Business rule validation\nlet orderData = JSON.parse(state.order_details);\nlet isValidOrder = orderData.items.length &gt; 0 &amp;&amp; \n                   orderData.total &gt; 0 &amp;&amp; \n                   orderData.customer_id;\n\nassert(isValidOrder, \"Order must have items, positive total, and customer ID\");\n\n// Multi-step validation logic\nif (orderData.total &gt; 1000) {\n    assert(orderData.approval_required, \"High-value orders require approval\");\n}\n</code></pre>"},{"location":"examples/custom-scripting/#dynamic-test-data-generation","title":"Dynamic Test Data Generation","text":"<pre><code>// Generate test data based on conditions\nlet testUsers = [];\nfor (let i = 0; i &lt; vars.user_count; i++) {\n    testUsers.push({\n        id: `user_${i}`,\n        email: `test${i}@example.com`,\n        role: i % 2 === 0 ? \"admin\" : \"user\"\n    });\n}\nsave(\"test_users\", JSON.stringify(testUsers));\n</code></pre>"},{"location":"examples/custom-scripting/#api-response-analysis","title":"API Response Analysis","text":"<pre><code>// Analyze API performance and content\nlet responseTime = parseInt(state.response_time_ms);\nlet responseSize = state.response_body.length;\n\nsave(\"performance_category\", \n     responseTime &lt; 100 ? \"fast\" : \n     responseTime &lt; 500 ? \"medium\" : \"slow\");\n\nassert(responseTime &lt; 2000, \"Response time must be under 2 seconds\");\nassert(responseSize &gt; 0, \"Response must not be empty\");\n</code></pre>"},{"location":"examples/custom-scripting/#best-practices","title":"Best Practices","text":""},{"location":"examples/custom-scripting/#1-keep-scripts-focused","title":"1. Keep Scripts Focused","text":"<p>Use scripts for data processing and validation, not for replacing HTTP operations:</p> <pre><code>// Good: Data processing\nlet processedData = state.raw_data.toUpperCase().trim();\nsave(\"clean_data\", processedData);\n\n// Avoid: HTTP operations (use http plugin instead)\n// Don't try to make HTTP requests from scripts\n</code></pre>"},{"location":"examples/custom-scripting/#2-use-external-files-for-complex-logic","title":"2. Use External Files for Complex Logic","text":"<p>Move complex business logic to external files:</p> <pre><code># Simple processing: inline\n- plugin: \"script\"\n  config:\n    script: 'save(\"doubled\", (parseInt(state.value) * 2).toString());'\n\n# Complex processing: external file\n- plugin: \"script\"\n  config:\n    file: \"scripts/complex-analysis.js\"\n</code></pre>"},{"location":"examples/custom-scripting/#3-clear-error-messages","title":"3. Clear Error Messages","text":"<p>Provide helpful assertion messages:</p> <pre><code>// Good: Descriptive messages\nassert(state.user_id, \"User ID is required for profile operations\");\nassert(state.email.includes(\"@\"), \"Email format validation failed\");\n\n// Poor: Vague messages\nassert(state.user_id, \"Missing data\");\n</code></pre>"},{"location":"examples/custom-scripting/#4-type-conversions","title":"4. Type Conversions","text":"<p>Remember that saved state is always strings:</p> <pre><code>// Convert types when needed\nlet count = parseInt(state.item_count);\nlet price = parseFloat(state.price);\nlet isActive = state.active === \"true\";\n\n// Save with explicit string conversion\nsave(\"calculated_total\", (price * count).toString());\n</code></pre> <p>The custom scripting plugin enables powerful data processing and validation workflows while maintaining the simplicity and clarity of Rocketship's declarative test approach.</p>"},{"location":"examples/environment-variables/","title":"Environment Variables","text":"<p>Access system environment variables in your tests using <code>{{ .env.VARIABLE_NAME }}</code> syntax.</p>"},{"location":"examples/environment-variables/#basic-usage","title":"Basic Usage","text":"<pre><code>- name: \"API request with environment variables\"\n  plugin: \"http\"\n  config:\n    method: \"POST\"\n    url: \"{{ .env.API_BASE_URL }}/users\"\n    headers:\n      \"Authorization\": \"Bearer {{ .env.API_TOKEN }}\"\n      \"X-User\": \"{{ .env.USER }}\"\n    body: |-\n      {\n        \"username\": \"{{ .env.USER }}\",\n        \"api_key\": \"{{ .env.API_KEY }}\"\n      }\n</code></pre>"},{"location":"examples/environment-variables/#sql-connections","title":"SQL Connections","text":"<pre><code>- name: \"Database query\"\n  plugin: \"sql\"\n  config:\n    driver: \"postgres\"\n    dsn: \"postgres://{{ .env.DB_USER }}:{{ .env.DB_PASSWORD }}@{{ .env.DB_HOST }}/{{ .env.DB_NAME }}\"\n    commands:\n      - \"SELECT * FROM users WHERE created_by = '{{ .env.USER }}';\"\n</code></pre>"},{"location":"examples/environment-variables/#script-integration","title":"Script Integration","text":"<p>Environment variables work in JavaScript code:</p> <pre><code>- name: \"Process environment data\"\n  plugin: \"script\"\n  config:\n    language: \"javascript\"\n    script: |\n      // Access environment variables\n      let systemUser = \"{{ .env.USER }}\";\n      let homeDir = \"{{ .env.HOME }}\";\n      let shell = \"{{ .env.SHELL }}\";\n\n      // Process and save for later steps\n      save(\"processed_user\", systemUser.toUpperCase());\n      save(\"user_home\", homeDir);\n      save(\"user_shell\", shell);\n</code></pre>"},{"location":"examples/environment-variables/#mixed-with-other-variables","title":"Mixed with Other Variables","text":"<pre><code>vars:\n  api_version: \"v1\"\n\ntests:\n  - name: \"Mixed variables\"\n    steps:\n      - name: \"Create resource\"\n        plugin: \"http\"\n        config:\n          url: \"{{ .env.API_BASE_URL }}/{{ .vars.api_version }}/resources\"\n          headers:\n            \"Authorization\": \"Bearer {{ .env.API_TOKEN }}\"\n        save:\n          - json_path: \".id\"\n            as: \"resource_id\"\n\n      - name: \"Get resource\"\n        plugin: \"http\"\n        config:\n          url: \"{{ .env.API_BASE_URL }}/{{ .vars.api_version }}/resources/{{ resource_id }}\"\n</code></pre>"},{"location":"examples/environment-variables/#escaping","title":"Escaping","text":"<p>Environment variables support handlebars escaping:</p> <pre><code>body: |-\n  {\n    \"user\": \"{{ .env.USER }}\",\n    \"docs\": \"Set \\\\{{ .env.API_KEY }} to configure\"\n  }\n</code></pre>"},{"location":"examples/environment-variables/#setting-environment-variables","title":"Setting Environment Variables","text":"<pre><code># Command line\nAPI_TOKEN=your_token rocketship run -af test.yaml\n\n# Export for session\nexport API_TOKEN=your_token\nexport DB_URL=postgres://user:pass@localhost/db\nrocketship run -af test.yaml\n</code></pre>"},{"location":"examples/environment-variables/#common-variables","title":"Common Variables","text":"<pre><code>\"{{ .env.USER }}\"         # Current username\n\"{{ .env.HOME }}\"         # Home directory\n\"{{ .env.API_KEY }}\"      # API key\n\"{{ .env.API_TOKEN }}\"    # Bearer token\n\"{{ .env.DATABASE_URL }}\" # Database connection\n\"{{ .env.NODE_ENV }}\"     # Environment name\n</code></pre> <p>Missing environment variables are treated as empty strings.</p>"},{"location":"examples/environment-variables/#working-examples","title":"Working Examples","text":"<p>See environment variables in action in these examples:</p> <pre><code># HTTP plugin with environment variables\nrocketship run -af examples/config-variables/rocketship.yaml\n\n# SQL plugin with environment variables\nrocketship run -af examples/sql-testing/rocketship.yaml\n\n# Script plugin with environment variables  \nrocketship run -af examples/custom-scripting/rocketship.yaml\n</code></pre> <p>These examples demonstrate: - Environment variables in HTTP headers and request bodies - Database connection strings using environment variables - JavaScript code processing environment variables - Mixed usage with config and runtime variables</p>"},{"location":"examples/handlebars-escaping/","title":"Handlebars Escaping","text":"<p>When your APIs or databases use handlebars syntax (<code>{{ }}</code>) for their own templating, you need a way to include literal handlebars in your test data without Rocketship trying to process them as variables. Rocketship provides unlimited-level handlebars escaping using backslashes.</p>"},{"location":"examples/handlebars-escaping/#variable-types","title":"Variable Types","text":"<p>Rocketship supports multiple types of variables:</p> <ul> <li>Config variables: <code>{{ .vars.variable_name }}</code> - Defined in the <code>vars</code> section</li> <li>Runtime variables: <code>{{ variable_name }}</code> - Generated during test execution (from <code>save</code> operations)</li> <li>Environment variables: <code>{{ .env.VARIABLE_NAME }}</code> - System environment variables</li> </ul> <p>All variable types support escaping using the same backslash syntax. For detailed information about environment variables, see the Environment Variables guide.</p>"},{"location":"examples/handlebars-escaping/#basic-escaping-syntax","title":"Basic Escaping Syntax","text":"<p>Use backslashes (<code>\\</code>) before handlebars to escape them:</p> <pre><code># Normal variable processing\n\"message\": \"Hello {{ user_name }}\"           # Processes as variable\n\n# Escaped handlebars (literal)\n\"template\": \"Use \\\\{{ user_id }} in API\"    # Outputs: Use {{ user_id }} in API\n</code></pre>"},{"location":"examples/handlebars-escaping/#unlimited-escape-levels","title":"Unlimited Escape Levels","text":"<p>Rocketship supports unlimited levels of backslash escaping using a mathematical algorithm:</p> <ul> <li>Odd number of backslashes: Produces literal handlebars</li> <li>Even number of backslashes: Processes variables with remaining backslashes</li> </ul>"},{"location":"examples/handlebars-escaping/#examples","title":"Examples","text":"<pre><code># 1 backslash (odd) \u2192 literal handlebars\n\"example1\": \"Template: \\\\{{ user_id }}\"\n# Output: Template: {{ user_id }}\n\n# 2 backslashes (even) \u2192 backslash + processed variable  \n\"example2\": \"Path: \\\\\\\\{{ .vars.api_path }}\"\n# Output: Path: \\staging/api\n\n# 3 backslashes (odd) \u2192 backslash + literal handlebars\n\"example3\": \"Docs: \\\\\\\\\\\\{{ variable_name }}\"\n# Output: Docs: \\{{ variable_name }}\n\n# 4 backslashes (even) \u2192 double backslash + processed variable\n\"example4\": \"Config: \\\\\\\\\\\\\\\\{{ .vars.environment }}\"\n# Output: Config: \\\\staging\n</code></pre>"},{"location":"examples/handlebars-escaping/#json-context-considerations","title":"JSON Context Considerations","text":"<p>When using escaped handlebars in JSON, remember that JSON has its own escaping rules. In YAML files, you may need to double backslashes:</p> <pre><code># In YAML block literal (recommended)\nbody: |-\n  {\n    \"instructions\": \"Use \\\\{{ user_id }} in your requests\",\n    \"template_guide\": \"Syntax: \\\\{{ variable_name }} for literals\"\n  }\n\n# In YAML quoted strings (requires more escaping)\nbody: |\n  {\n    \"instructions\": \"Use \\\\\\\\{{ user_id }} in your requests\"\n  }\n</code></pre>"},{"location":"examples/handlebars-escaping/#complete-working-example","title":"Complete Working Example","text":"<p>Here's a real example from the config-variables test suite:</p> <pre><code>name: \"Handlebars Escaping Demo\"\nversion: \"v1.0.0\"\n\nvars:\n  base_url: \"https://tryme.rocketship.sh\"\n  environment: \"staging\"\n\ntests:\n  - name: \"Config Variables Demo\"\n    steps:\n      - name: \"Demo handlebars escaping in JSON body\"\n        plugin: \"http\"\n        config:\n          method: \"POST\"\n          url: \"{{ .vars.base_url }}/books\"\n          headers:\n            \"Content-Type\": \"application/json\"\n          body: |-\n            {\n              \"title\": \"Handlebars Escaping Demo\",\n              \"author\": \"{{ .vars.environment }}\",\n              \"description\": \"Normal var: {{ .vars.environment }}, Escaped: \\\\{{ user_id }}\",\n              \"api_docs\": \"Use \\\\{{ user_id }} in your requests\",\n              \"template_guide\": \"Syntax: \\\\{{ variable_name }} for literals\",\n              \"mixed_example\": \"Real: {{ .vars.environment }}, Literal: \\\\{{ placeholder }}\"\n            }\n        assertions:\n          - type: \"status_code\"\n            expected: 200\n          - type: \"json_path\"\n            path: \".description\"\n            expected: \"Normal var: staging, Escaped: {{ user_id }}\"\n          - type: \"json_path\"\n            path: \".api_docs\"\n            expected: \"Use {{ user_id }} in your requests\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#sql-context-example","title":"SQL Context Example","text":"<p>Handlebars escaping also works in SQL statements:</p> <pre><code>- name: \"Demo handlebars escaping in SQL\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"{{ .vars.postgres_dsn }}\"\n    commands:\n      - |-\n        INSERT INTO users (name, instructions) \n        VALUES ('{{ .vars.test_user_name }}', 'Use \\\\{{ user_token }} for auth');\n  assertions:\n    - type: column_value\n      query_index: 0\n      row_index: 0\n      column: \"instructions\"\n      expected: \"Use {{ user_token }} for auth\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#common-use-cases","title":"Common Use Cases","text":""},{"location":"examples/handlebars-escaping/#1-api-documentation","title":"1. API Documentation","text":"<p>When testing APIs that return documentation containing template syntax:</p> <pre><code>\"help_text\": \"Use \\\\{{ user_id }} and \\\\{{ api_key }} in your requests\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#2-template-systems","title":"2. Template Systems","text":"<p>When testing systems that process their own templates:</p> <pre><code>\"mustache_template\": \"Hello \\\\{{ name }}, welcome to \\\\{{ site_name }}\"\n\"handlebars_template\": \"{{#each items}}\\\\{{ this.name }}{{/each}}\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#3-configuration-examples","title":"3. Configuration Examples","text":"<p>When testing APIs that return configuration examples:</p> <pre><code>\"config_example\": \"api_url: \\\\{{ environment.api_url }}\"\n\"yaml_template\": \"name: \\\\{{ project.name }}\\\\nversion: \\\\{{ project.version }}\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#4-code-generation","title":"4. Code Generation","text":"<p>When testing code generation APIs:</p> <pre><code>\"javascript_template\": \"const userId = \\\\{{ user.id }};\"\n\"go_template\": \"UserID: \\\\{{ .User.ID }}\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#how-it-works","title":"How It Works","text":"<p>Rocketship's escaping algorithm:</p> <ol> <li>Counts consecutive backslashes before <code>{{ }}</code></li> <li>Determines behavior based on count:</li> <li>Odd count: Treat as literal handlebars</li> <li>Even count: Process as variable</li> <li>Calculates remaining backslashes: <code>count / 2</code> (integer division)</li> <li>Outputs result with appropriate backslashes</li> </ol> <p>This mathematical approach enables unlimited nesting levels, giving you complete control over handlebars rendering.</p>"},{"location":"examples/handlebars-escaping/#best-practices","title":"Best Practices","text":""},{"location":"examples/handlebars-escaping/#1-use-block-literals-for-json","title":"1. Use Block Literals for JSON","text":"<p>Use YAML block literal syntax (<code>|-</code>) for cleaner JSON:</p> <pre><code>body: |-\n  {\n    \"template\": \"Use \\\\{{ variable }} here\"\n  }\n</code></pre>"},{"location":"examples/handlebars-escaping/#2-test-your-escaping","title":"2. Test Your Escaping","text":"<p>Always verify your escaping works by checking the actual output:</p> <pre><code>assertions:\n  - type: \"json_path\"\n    path: \".template\"\n    expected: \"Use {{ variable }} here\"  # Verify literal handlebars\n</code></pre>"},{"location":"examples/handlebars-escaping/#3-document-your-intent","title":"3. Document Your Intent","text":"<p>Add comments to clarify when you're using escaping:</p> <pre><code># This should output literal {{ user_id }}, not process as variable\n\"instructions\": \"Use \\\\{{ user_id }} in your API calls\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#4-start-simple","title":"4. Start Simple","text":"<p>Begin with single backslash escaping and only use multiple levels if needed:</p> <pre><code># Usually sufficient for most cases\n\"example\": \"Template: \\\\{{ variable }}\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#running-the-examples","title":"Running the Examples","text":"<p>Test the handlebars escaping functionality:</p> <pre><code># Run config-variables example (includes escaping demo)\nrocketship run -af examples/config-variables/rocketship.yaml\n\n# Run SQL escaping example  \nrocketship run -af examples/sql-testing/rocketship.yaml\n</code></pre> <p>The examples demonstrate real-world usage of handlebars escaping in both HTTP and SQL contexts.</p>"},{"location":"examples/log-plugin/","title":"Log Plugin","text":"<p>The log plugin allows you to add custom logging messages to your test suites for debugging, monitoring, and progress tracking. Log messages appear in the CLI output during test execution.</p>"},{"location":"examples/log-plugin/#configuration","title":"Configuration","text":"<pre><code>plugin: log\nconfig:\n  message: \"Your log message here\"\n</code></pre>"},{"location":"examples/log-plugin/#basic-usage","title":"Basic Usage","text":"<pre><code>name: Basic Logging Example\ntests:\n  - name: Test with logging\n    steps:\n      - plugin: log\n        config:\n          message: \"Starting test execution\"\n\n      - plugin: http\n        config:\n          url: \"https://httpbin.org/get\"\n          method: \"GET\"\n\n      - plugin: log\n        config:\n          message: \"HTTP request completed\"\n</code></pre>"},{"location":"examples/log-plugin/#variable-support","title":"Variable Support","text":"<p>The log plugin supports all variable types including configuration variables, environment variables, and runtime variables:</p> <pre><code>name: Logging with Variables\nconfig:\n  session: \"test-session-123\"\ntests:\n  - name: Variable logging example\n    steps:\n      - plugin: log\n        config:\n          message: \"Starting test for session: {{ .vars.session }}\"\n\n      - plugin: http\n        config:\n          url: \"https://httpbin.org/get\"\n          method: \"GET\"\n        save:\n          - key: \"response_data\"\n            value: \"{{ .response.json }}\"\n\n      - plugin: log\n        config:\n          message: \"User agent: {{ .runtime.response_data.headers.User-Agent }}\"\n\n      - plugin: log\n        config:\n          message: \"Test running on: {{ .env.HOSTNAME }}\"\n</code></pre>"},{"location":"examples/log-plugin/#example-output","title":"Example Output","text":"<p>When running tests:</p> <pre><code>rocketship run -af examples/simple-log/rocketship.yaml\n</code></pre> <p>You'll see log messages in the output: <pre><code>\ud83d\ude80 Starting user-service tests in staging environment\nRunning on user's machine at /home/user\nCreated test data with ID: test_1234567890, Status: active\n\u26a0\ufe0f  Warning: This is a simulated warning during testing\n\u2705 Test completed successfully for user-service\n</code></pre></p>"},{"location":"examples/log-plugin/#use-cases","title":"Use Cases","text":"<ul> <li>Progress Tracking: Log milestones in long-running tests</li> <li>Debug Information: Output variable values and intermediate results</li> <li>Test Documentation: Add context about what each step is doing</li> <li>Monitoring: Track important events during test execution</li> </ul> <p>Log messages always appear in the CLI output regardless of the logging level, making them perfect for providing real-time feedback during test execution.</p>"},{"location":"examples/request-chaining/","title":"Request Chaining &amp; Delays","text":"<p>This example demonstrates how to chain HTTP requests and use delays in your test suites. It uses our hosted test server at <code>tryme.rocketship.sh</code> to show real-world API testing scenarios.</p>"},{"location":"examples/request-chaining/#test-specification","title":"Test Specification","text":"<pre><code>name: \"Request Chaining &amp; Delays Example\"\ndescription: \"A test suite demonstrating request chaining and delays with the test server\"\nversion: \"v1.0.0\"\ntests:\n  - name: \"Car Management Flow\"\n    steps:\n      - name: \"Create first car\"\n        plugin: \"http\"\n        config:\n          method: \"POST\"\n          url: \"https://tryme.rocketship.sh/cars\"\n          body: |\n            {\n              \"make\": \"Toyota\",\n              \"model\": \"Corolla\",\n              \"year\": 2020\n            }\n        assertions:\n          - type: \"status_code\"\n            expected: 200\n          - type: \"header\"\n            name: \"content-type\"\n            expected: \"application/json\"\n          - type: \"json_path\"\n            path: \".make\"\n            expected: \"Toyota\"\n        save:\n          - json_path: \".id\"\n            as: \"first_car_id\"\n          - json_path: \".model\"\n            as: \"first_car_model\"\n          - header: \"server\"\n            as: \"server_info\"\n\n      - name: \"Wait for system processing\"\n        plugin: \"delay\"\n        config:\n          duration: \"1s\"\n\n      - name: \"Create second car\"\n        plugin: \"http\"\n        config:\n          method: \"POST\"\n          url: \"https://tryme.rocketship.sh/cars\"\n          body: |\n            {\n              \"make\": \"Honda\",\n              \"model\": \"Civic\", \n              \"year\": 2022,\n              \"server_used\": \"{{ server_info }}\"\n            }\n        assertions:\n          - type: \"status_code\"\n            expected: 200\n        save:\n          - json_path: \".id\"\n            as: \"second_car_id\"\n\n      - name: \"Short delay for consistency\"\n        plugin: \"delay\"\n        config:\n          duration: \"500ms\"\n\n      - name: \"List all cars\"\n        plugin: \"http\"\n        config:\n          method: \"GET\"\n          url: \"https://tryme.rocketship.sh/cars\"\n        assertions:\n          - type: \"status_code\"\n            expected: 200\n          - type: \"json_path\"\n            path: \".cars_0.make\"\n            expected: \"Toyota\"\n          - type: \"json_path\"\n            path: \".cars_1.make\"\n            expected: \"Honda\"\n          - type: \"json_path\"\n            path: \".cars_1.server_used\"\n            expected: \"{{ server_info }}\"\n\n      - name: \"Cleanup - Delete first car\"\n        plugin: \"http\"\n        config:\n          method: \"DELETE\"\n          url: \"https://tryme.rocketship.sh/cars/{{ first_car_id }}\"\n        assertions:\n          - type: \"status_code\"\n            expected: 204\n\n      - name: \"Cleanup - Delete second car\"\n        plugin: \"http\"\n        config:\n          method: \"DELETE\"\n          url: \"https://tryme.rocketship.sh/cars/{{ second_car_id }}\"\n        assertions:\n          - type: \"status_code\"\n            expected: 204\n</code></pre>"},{"location":"examples/request-chaining/#key-features-demonstrated","title":"Key Features Demonstrated","text":"<p>Request Chaining:</p> <ol> <li>Creating multiple cars with different data</li> <li>Saving response values (JSON and headers) for later use  </li> <li>Using saved header values in subsequent request bodies</li> <li>Verifying changes across requests with variable substitution</li> </ol> <p>Header Operations:</p> <ol> <li>Header validation with <code>type: \"header\"</code> assertions</li> <li>Header value extraction with <code>header: \"server\"</code> saves</li> <li>Using saved header values in request body: <code>\"server_used\": \"{{ server_info }}\"</code></li> </ol> <p>Delays:</p> <ol> <li>Using delays between operations</li> <li>Different delay durations (1s, 500ms)</li> <li>Strategic placement for system consistency</li> </ol> <p>Assertions:</p> <ol> <li>Status code validation</li> <li>Header validation (content-type)</li> <li>JSON response validation using JSONPath</li> <li>Variable substitution validation</li> </ol>"},{"location":"examples/request-chaining/#running-the-example","title":"Running the Example","text":"<p>Run the test suite:</p> <pre><code>rocketship run -af examples/request-chaining/rocketship.yaml\n</code></pre>"},{"location":"examples/request-chaining/#understanding-the-flow","title":"Understanding the Flow","text":"<p>The example demonstrates a complete car management workflow with header operations:</p> <ol> <li>Create first car - Save car ID, model (JSON) and server header value</li> <li>Wait for system processing - 1 second delay</li> <li>Create second car - Use saved header value in request body</li> <li>Short delay - 500ms for consistency </li> <li>List all cars - Verify both cars exist and header value was passed through</li> <li>Cleanup - Delete both cars using saved IDs</li> </ol> <p>Each step builds on the previous ones, showing how to:</p> <ul> <li>Chain requests together with variable substitution</li> <li>Save and use response data from both JSON and headers</li> <li>Pass header values through request workflows</li> <li>Verify state changes across multiple operations</li> <li>Handle different HTTP methods (POST, GET, DELETE)</li> <li>Work with multiple resources and lifecycle management</li> <li>Use strategic delays for system consistency</li> </ul> <p>The delays in this example are for demonstration purposes. In real-world scenarios, you might use delays when:</p> <ul> <li>Waiting for asynchronous operations to complete</li> <li>Ensuring system consistency in distributed systems</li> <li>Rate limiting your API requests</li> <li>Testing timeout scenarios</li> </ul>"},{"location":"examples/request-chaining/#handlebars-escaping-in-request-bodies","title":"Handlebars Escaping in Request Bodies","text":"<p>When your APIs return or expect handlebars syntax (<code>{{ }}</code>), use backslash escaping to include literal handlebars:</p> <pre><code>- name: \"Send template documentation\"\n  plugin: \"http\"\n  config:\n    method: \"POST\"\n    url: \"https://tryme.rocketship.sh/docs\"\n    body: |-\n      {\n        \"instructions\": \"Use \\\\{{ user_id }} in your API calls\",\n        \"template_example\": \"Welcome \\\\{{ user_name }}!\",\n        \"processed_value\": \"Current environment: {{ .vars.environment }}\"\n      }\n  assertions:\n    - type: \"json_path\"\n      path: \".instructions\"\n      expected: \"Use {{ user_id }} in your API calls\"\n</code></pre> <p>The backslash (<code>\\</code>) escapes the handlebars, making <code>\\\\{{ user_id }}</code> output literal <code>{{ user_id }}</code> instead of trying to process it as a variable.</p> <p>See the Handlebars Escaping guide for complete details and advanced usage.</p>"},{"location":"examples/sql-testing/","title":"SQL Testing","text":"<p>The SQL plugin enables database operations and testing within Rocketship workflows. It supports multiple database engines and provides comprehensive assertion capabilities for validating query results.</p>"},{"location":"examples/sql-testing/#supported-databases","title":"Supported Databases","text":"<ul> <li>PostgreSQL - <code>driver: postgres</code></li> <li>MySQL - <code>driver: mysql</code></li> <li>SQLite - <code>driver: sqlite</code></li> <li>SQL Server - <code>driver: sqlserver</code></li> </ul>"},{"location":"examples/sql-testing/#configuration","title":"Configuration","text":""},{"location":"examples/sql-testing/#basic-configuration","title":"Basic Configuration","text":"<pre><code>- name: \"Query users\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"postgres://user:password@localhost:5432/database?sslmode=disable\"\n    commands:\n      - \"SELECT id, name, email FROM users WHERE active = true;\"\n</code></pre>"},{"location":"examples/sql-testing/#configuration-with-variables","title":"Configuration with Variables","text":"<pre><code>vars:\n  db_host: \"localhost:5432\"\n  db_user: \"testuser\"\n  db_password: \"testpass\"\n  db_name: \"testdb\"\n\nsteps:\n  - name: \"Create user\"\n    plugin: sql\n    config:\n      driver: postgres\n      dsn: \"postgres://{{ .vars.db_user }}:{{ .vars.db_password }}@{{ .vars.db_host }}/{{ .vars.db_name }}?sslmode=disable\"\n      commands:\n        - \"INSERT INTO users (name, email) VALUES ('{{ .vars.user_name }}', '{{ .vars.user_email }}') RETURNING id;\"\n</code></pre>"},{"location":"examples/sql-testing/#external-sql-files","title":"External SQL Files","text":"<pre><code>- name: \"Run migration\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"{{ .vars.postgres_dsn }}\"\n    file: \"./migrations/001_create_tables.sql\"\n    timeout: \"60s\"\n</code></pre>"},{"location":"examples/sql-testing/#database-connection-strings-dsn","title":"Database Connection Strings (DSN)","text":""},{"location":"examples/sql-testing/#postgresql","title":"PostgreSQL","text":"<pre><code>postgres://username:password@host:port/database?sslmode=disable\n</code></pre>"},{"location":"examples/sql-testing/#mysql","title":"MySQL","text":"<pre><code>username:password@tcp(host:port)/database\n</code></pre>"},{"location":"examples/sql-testing/#sqlite","title":"SQLite","text":"<pre><code>./path/to/database.db\n</code></pre>"},{"location":"examples/sql-testing/#sql-server","title":"SQL Server","text":"<pre><code>sqlserver://username:password@host:port?database=dbname\n</code></pre>"},{"location":"examples/sql-testing/#assertions","title":"Assertions","text":"<p>The SQL plugin supports several assertion types for validating query results:</p>"},{"location":"examples/sql-testing/#row-count-assertion","title":"Row Count Assertion","text":"<p>Validates the number of rows returned by a specific query:</p> <pre><code>assertions:\n  - type: row_count\n    query_index: 0\n    expected: 5\n</code></pre>"},{"location":"examples/sql-testing/#query-count-assertion","title":"Query Count Assertion","text":"<p>Validates the total number of queries executed:</p> <pre><code>assertions:\n  - type: query_count\n    expected: 3\n</code></pre>"},{"location":"examples/sql-testing/#success-count-assertion","title":"Success Count Assertion","text":"<p>Validates the number of successful queries:</p> <pre><code>assertions:\n  - type: success_count\n    expected: 2\n</code></pre>"},{"location":"examples/sql-testing/#column-value-assertion","title":"Column Value Assertion","text":"<p>Validates specific column values in query results:</p> <pre><code>assertions:\n  - type: column_value\n    query_index: 0\n    row_index: 0\n    column: \"status\"\n    expected: \"active\"\n</code></pre>"},{"location":"examples/sql-testing/#saving-query-results","title":"Saving Query Results","text":"<p>Extract values from query results for use in subsequent steps:</p> <pre><code>save:\n  - sql_result: \".queries[0].rows[0].id\"\n    as: \"user_id\"\n  - sql_result: \".queries[0].rows_affected\"\n    as: \"affected_count\"\n  - sql_result: \".stats.success_count\"\n    as: \"successful_queries\"\n</code></pre>"},{"location":"examples/sql-testing/#save-path-syntax","title":"Save Path Syntax","text":"<ul> <li><code>.queries[0].rows[0].column_name</code> - Extract column value from first query, first row</li> <li><code>.queries[0].rows_affected</code> - Number of rows affected by first query</li> <li><code>.stats.success_count</code> - Total number of successful queries</li> <li><code>.stats.total_queries</code> - Total number of queries executed</li> </ul>"},{"location":"examples/sql-testing/#handlebars-escaping-in-sql-queries","title":"Handlebars Escaping in SQL Queries","text":"<p>When your SQL queries contain literal handlebars syntax (e.g., for stored procedures or database functions that use <code>{{ }}</code> syntax), you can escape them using backslashes:</p> <pre><code>- name: \"Query with escaped handlebars\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"{{ .vars.db_dsn }}\"\n    commands:\n      - \"SELECT 'Normal: {{ .vars.test_user_name }}, Escaped: \\\\{{ placeholder }}' as mixed_example;\"\n</code></pre> <p>In this example: - <code>{{ .vars.test_user_name }}</code> will be replaced with the actual variable value - <code>\\\\{{ placeholder }}</code> will render as literal <code>{{ placeholder }}</code> in the SQL query</p> <p>For multiple levels of escaping: - <code>\\\\{{ }}</code> \u2192 <code>{{ }}</code> (literal handlebars) - <code>\\\\\\\\{{ }}</code> \u2192 <code>\\\\{{ }}</code> (escaped backslash + handlebars variable) - <code>\\\\\\\\\\\\{{ }}</code> \u2192 <code>\\\\{{ }}</code> (literal escaped handlebars)</p> <p>See the Handlebars Escaping guide for more detailed examples and use cases.</p>"},{"location":"examples/sql-testing/#complete-example","title":"Complete Example","text":"<pre><code>name: \"User Management Test\"\nversion: \"v1.0.0\"\n\nvars:\n  db_dsn: \"postgres://testuser:testpass@localhost:5433/testdb?sslmode=disable\"\n  test_email: \"test@example.com\"\n\ntests:\n  - name: \"User CRUD Operations\"\n    steps:\n      - name: \"Create user\"\n        plugin: sql\n        config:\n          driver: postgres\n          dsn: \"{{ .vars.db_dsn }}\"\n          commands:\n            - \"INSERT INTO users (name, email, active) VALUES ('Test User', '{{ .vars.test_email }}', true) RETURNING id;\"\n        assertions:\n          - type: row_count\n            query_index: 0\n            expected: 1\n        save:\n          - sql_result: \".queries[0].rows[0].id\"\n            as: \"user_id\"\n\n      - name: \"Verify user exists\"\n        plugin: sql\n        config:\n          driver: postgres\n          dsn: \"{{ .vars.db_dsn }}\"\n          commands:\n            - \"SELECT id, name, email, active FROM users WHERE id = {{ user_id }};\"\n        assertions:\n          - type: row_count\n            query_index: 0\n            expected: 1\n          - type: column_value\n            query_index: 0\n            row_index: 0\n            column: \"email\"\n            expected: \"{{ .vars.test_email }}\"\n          - type: column_value\n            query_index: 0\n            row_index: 0\n            column: \"active\"\n            expected: true\n\n      - name: \"Update user status\"\n        plugin: sql\n        config:\n          driver: postgres\n          dsn: \"{{ .vars.db_dsn }}\"\n          commands:\n            - \"UPDATE users SET active = false WHERE id = {{ user_id }};\"\n        assertions:\n          - type: success_count\n            expected: 1\n\n      - name: \"Delete user\"\n        plugin: sql\n        config:\n          driver: postgres\n          dsn: \"{{ .vars.db_dsn }}\"\n          commands:\n            - \"DELETE FROM users WHERE id = {{ user_id }};\"\n        assertions:\n          - type: success_count\n            expected: 1\n</code></pre>"},{"location":"examples/sql-testing/#testing-with-docker","title":"Testing with Docker","text":"<p>For local testing, use the provided Docker Compose setup:</p> <pre><code># Start test databases\ncd .docker &amp;&amp; docker-compose up postgres-test mysql-test -d\n\n# Run SQL tests\nrocketship run -af examples/sql-testing/rocketship.yaml\n</code></pre> <p>The test databases include:</p> <ul> <li>PostgreSQL: <code>localhost:5433</code> with sample data</li> <li>MySQL: <code>localhost:3307</code> with sample data</li> </ul>"},{"location":"examples/sql-testing/#best-practices","title":"Best Practices","text":""},{"location":"examples/sql-testing/#security","title":"Security","text":"<ul> <li>Use variables for connection strings to avoid hardcoding credentials</li> <li>Use least-privilege database users for testing</li> <li>Never commit real database credentials to version control</li> </ul>"},{"location":"examples/sql-testing/#performance","title":"Performance","text":"<ul> <li>Set appropriate timeouts for long-running queries</li> <li>Use connection pooling (handled automatically by the plugin)</li> <li>Test with realistic data volumes</li> </ul>"},{"location":"examples/sql-testing/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Test both successful and error scenarios</li> <li>Validate data integrity with assertions</li> <li>Use transactions when testing modifications</li> <li>Clean up test data to maintain test isolation</li> </ul>"},{"location":"examples/sql-testing/#error-handling","title":"Error Handling","text":"<pre><code>- name: \"Handle expected errors\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"{{ .vars.db_dsn }}\"\n    commands:\n      - \"SELECT * FROM nonexistent_table;\"\n  # This step will fail, which might be expected for negative testing\n</code></pre>"},{"location":"examples/sql-testing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/sql-testing/#connection-issues","title":"Connection Issues","text":"<ul> <li>Verify database service is running</li> <li>Check connection string format for your database type</li> <li>Ensure network connectivity and firewall settings</li> <li>Validate credentials and database permissions</li> </ul>"},{"location":"examples/sql-testing/#query-errors","title":"Query Errors","text":"<ul> <li>Check SQL syntax for your specific database</li> <li>Verify table and column names exist</li> <li>Ensure proper data types in INSERT/UPDATE operations</li> <li>Review database logs for detailed error messages</li> </ul>"},{"location":"examples/sql-testing/#assertion-failures","title":"Assertion Failures","text":"<ul> <li>Verify expected values match actual query results</li> <li>Check query indices and row indices in assertions</li> <li>Ensure column names are spelled correctly</li> <li>Review query results in logs for debugging</li> </ul>"},{"location":"reference/rocketship/","title":"Overview","text":""},{"location":"reference/rocketship/#rocketship","title":"rocketship","text":"<p>Rocketship CLI</p>"},{"location":"reference/rocketship/#synopsis","title":"Synopsis","text":"<p>Rocketship is a CLI tool for running automated tests.</p>"},{"location":"reference/rocketship/#options","title":"Options","text":"<pre><code>  -h, --help   help for rocketship\n</code></pre>"},{"location":"reference/rocketship/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship run    - Run rocketship tests</li> <li>rocketship start    - Start rocketship the rocketship server</li> <li>rocketship stop  - Stop rocketship the rocketship server</li> <li>rocketship validate  - Validate Rocketship test files against the JSON schema</li> <li>rocketship version    - Print the version number of Rocketship</li> </ul>"},{"location":"reference/rocketship/#auto-generated-by-spf13cobra-on-30-may-2025","title":"Auto generated by spf13/cobra on 30-May-2025","text":""},{"location":"reference/rocketship_run/","title":"run","text":""},{"location":"reference/rocketship_run/#rocketship-run","title":"rocketship run","text":"<p>Run rocketship tests</p>"},{"location":"reference/rocketship_run/#synopsis","title":"Synopsis","text":"<p>Run rocketship tests from YAML files. Can run a single file or all tests in a directory.</p> <pre><code>rocketship run [flags]\n</code></pre>"},{"location":"reference/rocketship_run/#options","title":"Options","text":"<pre><code>  -a, --auto                 Automatically start and stop the local server for test execution\n  -d, --dir string           Path to directory containing test files (will run all rocketship.yaml files recursively)\n  -e, --engine string        Address of the rocketship engine (default: localhost:7700)\n  -f, --file string          Path to a single test file (default: rocketship.yaml in current directory)\n  -h, --help                 help for run\n  -t, --timestamp            Show timestamps in log output\n  -v, --var stringToString   Set variables (can be used multiple times: --var key=value --var nested.key=value) (default [])\n      --var-file string      Load variables from YAML file\n</code></pre>"},{"location":"reference/rocketship_run/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_run/#auto-generated-by-spf13cobra-on-30-may-2025","title":"Auto generated by spf13/cobra on 30-May-2025","text":""},{"location":"reference/rocketship_start/","title":"Overview","text":""},{"location":"reference/rocketship_start/#rocketship-start","title":"rocketship start","text":"<p>Start rocketship the rocketship server</p>"},{"location":"reference/rocketship_start/#synopsis","title":"Synopsis","text":"<p>Start rocketship components like the server.</p>"},{"location":"reference/rocketship_start/#options","title":"Options","text":"<pre><code>  -h, --help   help for start\n</code></pre>"},{"location":"reference/rocketship_start/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> <li>rocketship start server  - Start the rocketship server</li> </ul>"},{"location":"reference/rocketship_start/#auto-generated-by-spf13cobra-on-30-may-2025","title":"Auto generated by spf13/cobra on 30-May-2025","text":""},{"location":"reference/rocketship_start_server/","title":"start server","text":""},{"location":"reference/rocketship_start_server/#rocketship-start-server","title":"rocketship start server","text":"<p>Start the rocketship server</p>"},{"location":"reference/rocketship_start_server/#synopsis","title":"Synopsis","text":"<p>Start the rocketship server either locally or connect to a remote instance.</p> <pre><code>rocketship start server [flags]\n</code></pre>"},{"location":"reference/rocketship_start_server/#options","title":"Options","text":"<pre><code>  -b, --background   Start server in background mode\n  -h, --help         help for server\n  -l, --local        Start a local rocketship server\n</code></pre>"},{"location":"reference/rocketship_start_server/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship start    - Start rocketship the rocketship server</li> </ul>"},{"location":"reference/rocketship_start_server/#auto-generated-by-spf13cobra-on-30-may-2025","title":"Auto generated by spf13/cobra on 30-May-2025","text":""},{"location":"reference/rocketship_stop/","title":"Overview","text":""},{"location":"reference/rocketship_stop/#rocketship-stop","title":"rocketship stop","text":"<p>Stop rocketship the rocketship server</p>"},{"location":"reference/rocketship_stop/#synopsis","title":"Synopsis","text":"<p>Stop rocketship components like the server.</p>"},{"location":"reference/rocketship_stop/#options","title":"Options","text":"<pre><code>  -h, --help   help for stop\n</code></pre>"},{"location":"reference/rocketship_stop/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> <li>rocketship stop server    - Stop the rocketship server</li> </ul>"},{"location":"reference/rocketship_stop/#auto-generated-by-spf13cobra-on-30-may-2025","title":"Auto generated by spf13/cobra on 30-May-2025","text":""},{"location":"reference/rocketship_stop_server/","title":"stop server","text":""},{"location":"reference/rocketship_stop_server/#rocketship-stop-server","title":"rocketship stop server","text":"<p>Stop the rocketship server</p>"},{"location":"reference/rocketship_stop_server/#synopsis","title":"Synopsis","text":"<p>Stop the rocketship server and all its components.</p> <pre><code>rocketship stop server [flags]\n</code></pre>"},{"location":"reference/rocketship_stop_server/#options","title":"Options","text":"<pre><code>  -h, --help   help for server\n</code></pre>"},{"location":"reference/rocketship_stop_server/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship stop  - Stop rocketship the rocketship server</li> </ul>"},{"location":"reference/rocketship_stop_server/#auto-generated-by-spf13cobra-on-30-may-2025","title":"Auto generated by spf13/cobra on 30-May-2025","text":""},{"location":"reference/rocketship_validate/","title":"validate","text":""},{"location":"reference/rocketship_validate/#rocketship-validate","title":"rocketship validate","text":"<p>Validate Rocketship test files against the JSON schema</p>"},{"location":"reference/rocketship_validate/#synopsis","title":"Synopsis","text":"<p>Validate one or more Rocketship test files against the JSON schema. This command checks test file syntax, structure, and configuration without executing tests.</p> <p>Examples:   rocketship validate test.yaml                    # Validate a single file   rocketship validate ./tests/                     # Validate all YAML files in a directory   rocketship validate test1.yaml test2.yaml       # Validate multiple files</p> <pre><code>rocketship validate [file_or_directory] [flags]\n</code></pre>"},{"location":"reference/rocketship_validate/#options","title":"Options","text":"<pre><code>  -h, --help   help for validate\n</code></pre>"},{"location":"reference/rocketship_validate/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_validate/#auto-generated-by-spf13cobra-on-30-may-2025","title":"Auto generated by spf13/cobra on 30-May-2025","text":""},{"location":"reference/rocketship_version/","title":"version","text":""},{"location":"reference/rocketship_version/#rocketship-version","title":"rocketship version","text":"<p>Print the version number of Rocketship</p>"},{"location":"reference/rocketship_version/#synopsis","title":"Synopsis","text":"<p>Print the version number of Rocketship CLI.</p> <pre><code>rocketship version [flags]\n</code></pre>"},{"location":"reference/rocketship_version/#options","title":"Options","text":"<pre><code>  -h, --help   help for version\n</code></pre>"},{"location":"reference/rocketship_version/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_version/#auto-generated-by-spf13cobra-on-30-may-2025","title":"Auto generated by spf13/cobra on 30-May-2025","text":""}]}