{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rocketship Documentation","text":"<p>Welcome to the Rocketship documentation! Rocketship is an open-source API testing framework designed for humans and agents.</p>"},{"location":"#what-is-rocketship","title":"What is Rocketship?","text":"<p>\ud83d\ude80 Rocketship is an open\u2011source testing framework that can verify complex, API-driven scenarios that are made by your customers\u2014 or your systems. Rocketship brings durable execution backed by Temporal to your testing infra, and offers extensible plugins so you can add the APIs and protocols that matter to you.</p> <p>Define your test scenarios as declarative YAML specs -&gt; and have Rocketship run them locally or in your cloud environment as deterministic workflows.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Rocketship CLI - Run the engine locally or connect to a remote address</li> <li>Deploy-Ready Images - Need long-running, highly-scalable tests? Or just want to save test history? Host Rocketship on your own infra</li> <li>Declarative YAML - Define your test scenarios as declarative YAML specs</li> <li>Durable Execution - Need a test step to retry? Or a test to run for 10 hours? No problem!</li> <li>Plugin Ecosystem - Add the APIs and protocols that matter to you</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Quick Start Guide</li> <li>Command Reference</li> <li>Contributing Guide</li> </ul>"},{"location":"contributing/","title":"Contributing to Rocketship","text":"<p>Thank you for your interest in contributing to Rocketship! We're excited to have you join our community. This document provides guidelines and instructions for contributing to the project.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/rocketship.git\ncd rocketship\n</code></pre> <p>Set up your development environment:</p> <pre><code>make dev-setup\n</code></pre>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":"<p>Create a new branch for your feature/fix:</p> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <p>Make your changes and ensure tests pass:</p> <pre><code>make test\nmake lint\n</code></pre> <p>Build and install your local changes:</p> <pre><code>make install    # Removes old executable and go installs the local version\n</code></pre> <p>Test your changes:</p> <pre><code># OPTION 1: this will start the local rocketship server, run all tests in the examples directory, and then stop the server\nrocketship run -ad examples\n\n# OPTION 2: run the test server in a separate session and then run the tests\nrocketship start server --local\n# in another session, run the test(s)\nrocketship run -f &lt;path/to/rocketship.yaml&gt;\n</code></pre> <p>Test Server for Development:</p> <p>Inside for-contributors/, you'll find a test HTTP server that you can run as an in-memory store to test changes. Make sure your rocketship.yaml files point to this server (localhost:8080):</p> <pre><code>cd ./for-contributors/test-server &amp;&amp; go run .\n</code></pre> <p>This will help you test your changes with an in-memory store that can preserve resources.</p>"},{"location":"contributing/#creating-plugins","title":"Creating Plugins","text":"<p>Rocketship's plugin system allows you to add support for new APIs and protocols. To create a new plugin:</p> <ol> <li>Add your plugin in <code>internal/plugins/</code></li> <li>Implement the required plugin interface</li> <li>Register your plugin in the plugin registry</li> <li>Add tests for your plugin</li> <li>Document your plugin's usage</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>If you're updating features or adding new ones, please update the documentation:</p> <ul> <li>Documentation is written in Markdown under <code>docs/src/</code></li> <li>Run the documentation server locally:</li> </ul> <pre><code>make docs-serve\n</code></pre> <p>View your changes at <code>http://localhost:8000</code></p>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow Go best practices and conventions</li> <li>Use <code>gofmt</code> to format your code</li> <li>Add comments for non-obvious code sections</li> <li>Write meaningful commit messages</li> </ul>"},{"location":"contributing/#development-tips","title":"Development Tips","text":"<ul> <li>Set the <code>ROCKETSHIP_LOG</code> env var to <code>DEBUG</code> to see more verbose logging</li> <li>Pre-commit hooks will automatically run linting and tests</li> <li>Always test your changes locally before submitting a PR</li> </ul>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>Update Default Version</p> <p>Before creating a release, update the default version in <code>internal/embedded/binaries.go</code>:</p> <pre><code># Example: For releasing v1.2.3\nsed -i '' 's/defaultVersion *= *\".*\"/defaultVersion = \"v1.2.3\"/' internal/embedded/binaries.go\ngit add internal/embedded/binaries.go\ngit commit -m \"chore: update default version to v1.2.3\"\ngit push\n</code></pre> <p>Create a Release</p> <p>Once changes are merged to main, a maintainer can create a new release:</p> <ul> <li>Go to GitHub Releases: https://github.com/rocketship-ai/rocketship/releases</li> <li>Click \"Draft a new release\"</li> <li>Create a new tag (e.g., <code>v1.2.3</code>) following semantic versioning</li> <li>Write release notes</li> <li>Publish release</li> </ul> <p>This will automatically:</p> <ul> <li>Create and push a Git tag</li> <li>Trigger the release workflow</li> <li>Build platform-specific binaries</li> <li>Attach binaries to the release</li> </ul> <p>Test Installation</p> <pre><code># Install released version\ngo install github.com/rocketship-ai/rocketship/cmd/rocketship@v1.2.3\n\n# Test basic functionality\nrocketship version\n</code></pre>"},{"location":"contributing/#release-artifacts","title":"Release Artifacts","text":"<p>Each release includes platform-specific binaries for:</p> <ul> <li>CLI (rocketship)</li> <li>Worker</li> <li>Engine</li> </ul> <p>Supported platforms:</p> <ul> <li>Linux (amd64, arm64)</li> <li>macOS (amd64, arm64)</li> <li>Windows (amd64)</li> </ul>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Open an issue on GitHub</li> <li>Reach out to me on LinkedIn</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to Rocketship, you agree that your contributions will be licensed under the MIT License.</p>"},{"location":"deploy-on-kubernetes/","title":"Deploying Rocketship on Kubernetes","text":"<p>This guide covers deploying Rocketship on Kubernetes for production use.</p>"},{"location":"deploy-on-kubernetes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster (v1.20 or later)</li> <li>kubectl configured</li> <li>Helm v3 installed</li> <li>StorageClass for persistent volumes</li> </ul>"},{"location":"deploy-on-kubernetes/#architecture","title":"Architecture","text":"<p>The Kubernetes deployment of the Rocketship architecture can be thought of like this:</p> <p></p>"},{"location":"deploy-on-kubernetes/#deployment-steps","title":"Deployment Steps","text":""},{"location":"deploy-on-kubernetes/#1-create-namespace","title":"1. Create Namespace","text":"<pre><code>kubectl create namespace rocketship\n</code></pre>"},{"location":"deploy-on-kubernetes/#2-deploy-temporal","title":"2. Deploy Temporal","text":"<p>We recommend using the official Temporal Helm chart:</p> <pre><code># Add Temporal Helm repo\nhelm repo add temporal https://temporal.github.io/helm-charts\nhelm repo update\n\n# Install Temporal\nhelm install temporal temporal/temporal \\\n  --namespace rocketship \\\n  --set server.replicaCount=1 \\\n  --set cassandra.config.cluster_size=1 \\\n  --set prometheus.enabled=true \\\n  --set grafana.enabled=true\n</code></pre>"},{"location":"deploy-on-kubernetes/#3-deploy-rocketship-engine","title":"3. Deploy Rocketship Engine","text":"<p>Create <code>engine-deployment.yaml</code>:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rocketship-engine\n  namespace: rocketship\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: rocketship-engine\n  template:\n    metadata:\n      labels:\n        app: rocketship-engine\n    spec:\n      containers:\n        - name: engine\n          image: rocketshipai/rocketship-engine:latest\n          ports:\n            - containerPort: 7700\n            - containerPort: 7701\n          env:\n            - name: TEMPORAL_HOST\n              value: temporal-frontend.rocketship:7233\n          resources:\n            requests:\n              cpu: \"100m\"\n              memory: \"128Mi\"\n            limits:\n              cpu: \"500m\"\n              memory: \"512Mi\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: rocketship-engine\n  namespace: rocketship\nspec:\n  selector:\n    app: rocketship-engine\n  ports:\n    - name: grpc\n      port: 7700\n      targetPort: 7700\n    - name: http\n      port: 7701\n      targetPort: 7701\n  type: ClusterIP\n</code></pre> <p>Apply the configuration:</p> <pre><code>kubectl apply -f engine-deployment.yaml\n</code></pre>"},{"location":"deploy-on-kubernetes/#4-deploy-rocketship-worker","title":"4. Deploy Rocketship Worker","text":"<p>Create <code>worker-deployment.yaml</code>:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rocketship-worker\n  namespace: rocketship\nspec:\n  replicas: 3 # Adjust based on your needs\n  selector:\n    matchLabels:\n      app: rocketship-worker\n  template:\n    metadata:\n      labels:\n        app: rocketship-worker\n    spec:\n      containers:\n        - name: worker\n          image: rocketshipai/rocketship-worker:latest\n          env:\n            - name: TEMPORAL_HOST\n              value: temporal-frontend.rocketship:7233\n          resources:\n            requests:\n              cpu: \"100m\"\n              memory: \"128Mi\"\n            limits:\n              cpu: \"500m\"\n              memory: \"512Mi\"\n</code></pre> <p>Apply the configuration:</p> <pre><code>kubectl apply -f worker-deployment.yaml\n</code></pre>"},{"location":"deploy-on-kubernetes/#5-configure-ingress-optional","title":"5. Configure Ingress (Optional)","text":"<p>If you need external access to the engine:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: rocketship-engine\n  namespace: rocketship\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\nspec:\n  rules:\n    - host: rocketship.your-domain.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: rocketship-engine\n                port:\n                  number: 7700\n</code></pre>"},{"location":"deploy-on-kubernetes/#monitoring","title":"Monitoring","text":""},{"location":"deploy-on-kubernetes/#1-set-up-prometheus-monitoring","title":"1. Set up Prometheus monitoring:","text":"<pre><code>apiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: rocketship\n  namespace: rocketship\nspec:\n  selector:\n    matchLabels:\n      app: rocketship-engine\n  endpoints:\n    - port: grpc\n      interval: 15s\n</code></pre>"},{"location":"deploy-on-kubernetes/#2-configure-logging","title":"2. Configure logging:","text":"<pre><code>apiVersion: logging.banzaicloud.io/v1beta1\nkind: Flow\nmetadata:\n  name: rocketship-logs\n  namespace: rocketship\nspec:\n  filters:\n    - parser:\n        remove_key_name_field: true\n        parse:\n          type: json\n  match:\n    - select:\n        labels:\n          app: rocketship-engine\n          app: rocketship-worker\n  localOutputRefs:\n    - loki-output\n</code></pre>"},{"location":"deploy-on-kubernetes/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deploy-on-kubernetes/#common-issues","title":"Common Issues","text":"<p>Worker Connection Issues:</p> <pre><code>kubectl logs -n rocketship -l app=rocketship-worker\n</code></pre> <p>Engine Service Issues:</p> <pre><code>kubectl logs -n rocketship -l app=rocketship-engine\n</code></pre> <p>Temporal Issues:</p> <pre><code>kubectl logs -n rocketship -l app=temporal-frontend\n</code></pre>"},{"location":"deploy-on-kubernetes/#health-checks","title":"Health Checks","text":"<pre><code># Check pod status\nkubectl get pods -n rocketship\n\n# Check service endpoints\nkubectl get endpoints -n rocketship\n\n# Check logs\nkubectl logs -n rocketship -l app=rocketship-engine\n</code></pre>"},{"location":"deploy-on-kubernetes/#next-steps","title":"Next Steps","text":"<ul> <li>Command Reference</li> <li>Examples</li> </ul>"},{"location":"deploy-on-your-cloud/","title":"Deploying Rocketship on Your Cloud","text":"<p>Rocketship can be deployed in your cloud environment to run tests at scale, persist test history, and leverage all of Temporal's durable execution features. This guide covers the different deployment options and considerations.</p>"},{"location":"deploy-on-your-cloud/#architecture-overview","title":"Architecture Overview","text":"<p>Rocketship consists of three main components:</p> <ol> <li>Engine: The central service that receives test requests and coordinates test execution with Temporal</li> <li>Worker: Executes test steps and reports results back to Temporal</li> <li>Temporal: Handles workflow orchestration and state management</li> </ol>"},{"location":"deploy-on-your-cloud/#deployment-options","title":"Deployment Options","text":""},{"location":"deploy-on-your-cloud/#docker-compose","title":"Docker Compose","text":"<p>The simplest way to deploy Rocketship is using Docker Compose. This is ideal for:</p> <ul> <li>Development environments</li> <li>Small-scale deployments</li> <li>Testing and evaluation</li> </ul> <p>See the Docker Compose Setup section for details.</p>"},{"location":"deploy-on-your-cloud/#kubernetes","title":"Kubernetes","text":"<p>For production deployments, we recommend using Kubernetes. This provides:</p> <ul> <li>High availability</li> <li>Automatic scaling</li> <li>Better resource management</li> <li>Production-grade monitoring</li> </ul> <p>See the Kubernetes Deployment guide for details.</p>"},{"location":"deploy-on-your-cloud/#docker-compose-setup","title":"Docker Compose Setup","text":"<p>Clone the Rocketship repository, navigate to the <code>.docker</code> directory, and run the following command:</p> <pre><code>docker compose up -d\n</code></pre> <p>Verify the deployment:</p> <pre><code># Check service status\ndocker-compose ps\n\n# Check engine logs\ndocker-compose logs engine\n\n# Check worker logs\ndocker-compose logs worker\n</code></pre> <p>Run a test:</p> <pre><code>rocketship run -f your-test.yaml -e localhost:7700\n</code></pre>"},{"location":"deploy-on-your-cloud/#next-steps","title":"Next Steps","text":"<ul> <li>Deploy on Kubernetes for production-grade deployment</li> <li>Command Reference for CLI usage</li> <li>Examples for test suite examples</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>Rocketship comes with example test suites that demonstrate different features and use cases. Each example includes detailed explanations and ready-to-use test specifications.</p>"},{"location":"examples/#available-examples","title":"Available Examples","text":""},{"location":"examples/#http-testing","title":"HTTP Testing","text":"<ul> <li>Request Chaining &amp; Delays - Learn how to chain HTTP requests, handle responses, and use delays in your test suites</li> </ul>"},{"location":"examples/#configuration-variables","title":"Configuration &amp; Variables","text":"<ul> <li>Configuration Variables - Learn how to parameterize tests with configuration variables, CLI overrides, and variable files</li> </ul>"},{"location":"examples/#database-testing","title":"Database Testing","text":"<ul> <li>SQL Testing - Learn how to test database operations with PostgreSQL, MySQL, SQLite, and SQL Server</li> </ul>"},{"location":"examples/#scripting-custom-logic","title":"Scripting &amp; Custom Logic","text":"<ul> <li>Custom Scripting - Learn how to add custom JavaScript logic to your test suites</li> </ul>"},{"location":"examples/#debugging-logging","title":"Debugging &amp; Logging","text":"<ul> <li>Log Plugin - Learn how to add custom logging messages to your test suites for debugging and monitoring</li> </ul>"},{"location":"examples/#running-the-examples","title":"Running the Examples","text":"<p>The examples use the hosted test server at <code>tryme.rocketship.sh</code>. This server provides a simple HTTP API that you can use to experiment with Rocketship's features. Details:</p> <ul> <li>Test CRUD operations for a resource type</li> <li>Resources are isolated based off a session header</li> <li>FYI: Resource cleanup is done hourly (every :00)</li> </ul> <p>Then, run an example:</p> <pre><code># Run the request chaining example\nrocketship run -af examples/request-chaining/rocketship.yaml\n\n# Run the configuration variables example\nrocketship run -af examples/config-variables/rocketship.yaml\n\n# Run with variable overrides\nrocketship run -af examples/config-variables/rocketship.yaml --var environment=production\n\n# Run the custom scripting example\nrocketship run -af examples/custom-scripting/rocketship.yaml\n\n# Run the log plugin example\nrocketship run -af examples/simple-log/rocketship.yaml\n</code></pre>"},{"location":"examples/#database-examples","title":"Database Examples","text":"<p>For SQL testing examples, you'll need to start the test databases first:</p> <pre><code># Start test databases with Docker Compose\ncd .docker &amp;&amp; docker-compose up postgres-test mysql-test -d\n\n# Wait for databases to be ready, then run SQL tests\nrocketship run -f examples/sql-testing/rocketship.yaml -e localhost:7700\n</code></pre> <p>The SQL examples use local test databases with pre-populated sample data: - PostgreSQL: Available at <code>localhost:5433</code>  - MySQL: Available at <code>localhost:3307</code></p> <p>You can find the test server's source code in the <code>for-contributors/test-server</code> directory.</p>"},{"location":"installation/","title":"Installation","text":"<p>Rocketship CLI is available for macOS, Linux, and Windows. Choose your platform below for installation instructions.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>If you want to run tests without needing to connect to a remote engine, you need to install Temporal which is required for the local engine:</p> <pre><code>brew install temporal  # macOS\n</code></pre> <p>For other platforms, please follow the Temporal installation guide.</p>"},{"location":"installation/#macos","title":"macOS","text":""},{"location":"installation/#apple-silicon","title":"Apple Silicon","text":"<pre><code>curl -Lo /usr/local/bin/rocketship https://github.com/rocketship-ai/rocketship/releases/latest/download/rocketship-darwin-arm64\nchmod +x /usr/local/bin/rocketship\n</code></pre>"},{"location":"installation/#intel","title":"Intel","text":"<pre><code>curl -Lo /usr/local/bin/rocketship https://github.com/rocketship-ai/rocketship/releases/latest/download/rocketship-darwin-amd64\nchmod +x /usr/local/bin/rocketship\n</code></pre>"},{"location":"installation/#linux","title":"Linux","text":""},{"location":"installation/#amd64","title":"AMD64","text":"<pre><code>curl -Lo /usr/local/bin/rocketship https://github.com/rocketship-ai/rocketship/releases/latest/download/rocketship-linux-amd64\nchmod +x /usr/local/bin/rocketship\n</code></pre>"},{"location":"installation/#arm64","title":"ARM64","text":"<pre><code>curl -Lo /usr/local/bin/rocketship https://github.com/rocketship-ai/rocketship/releases/latest/download/rocketship-linux-arm64\nchmod +x /usr/local/bin/rocketship\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<ol> <li>Download the latest Windows executable from our releases page</li> <li>Rename it to <code>rocketship.exe</code></li> <li>Move it to a directory in your PATH (e.g., <code>C:\\Windows\\System32\\</code>)</li> </ol>"},{"location":"installation/#docker","title":"Docker","text":"<p>Rocketship is also available as a Docker image. It will run the tests you specify then exit:</p> <pre><code>docker pull rocketshipai/rocketship:latest\n</code></pre> <p>To run Rocketship using Docker:</p> <pre><code>docker run rocketshipai/rocketship:latest\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify your installation, run:</p> <pre><code>rocketship version\n</code></pre>"},{"location":"installation/#optional-creating-an-alias","title":"Optional: Creating an Alias","text":"<p>If you prefer a shorter command, you can create an alias for the <code>rocketship</code> command. Here's how to do it on different platforms:</p>"},{"location":"installation/#unix-like-systems-macos-linux","title":"Unix-like Systems (macOS, Linux)","text":"<p>Add one of these to your shell's configuration file (<code>.bashrc</code>, <code>.zshrc</code>, etc.):</p> <pre><code># Alias to \"rs\"\nalias rs=\"rocketship\"\n</code></pre>"},{"location":"installation/#windows-powershell","title":"Windows (PowerShell)","text":"<p>Add this to your PowerShell profile:</p> <pre><code>Set-Alias -Name rs -Value rocketship\n</code></pre> <p>Remember to restart your shell or run <code>source ~/.bashrc</code> (or equivalent) to apply the changes.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ul> <li>Check out our Quick Start Guide to run your first test</li> <li>Learn about test specifications</li> <li>Explore our examples</li> </ul>"},{"location":"mcp-server/","title":"MCP Server","text":"<p>Rocketship includes an MCP (Model Context Protocol) server that enables AI coding agents to write better Rocketship tests by providing examples, patterns, and guidance.</p>"},{"location":"mcp-server/#philosophy","title":"Philosophy","text":"<p>The Rocketship MCP server is designed as a knowledgeable assistant that helps coding agents understand Rocketship testing patterns and best practices. Unlike traditional code generators, this MCP server:</p> <ul> <li>Provides guidance, not files: Shows examples and patterns for agents to adapt</li> <li>Maintains agent control: The coding agent creates all files and makes all decisions</li> <li>Emphasizes learning: Helps agents understand Rocketship concepts deeply</li> <li>Focuses on quality: Promotes E2E customer journey testing and best practices</li> </ul>"},{"location":"mcp-server/#installation","title":"Installation","text":"<p>The MCP server is published as an npm package and can be used with zero installation:</p> <pre><code>{\n  \"mcpServers\": {\n    \"rocketship\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@rocketshipai/mcp-server@latest\"]\n    }\n  }\n}\n</code></pre>"},{"location":"mcp-server/#available-tools","title":"Available Tools","text":"<p>The MCP server provides six assistant tools that provide guidance rather than generating files:</p>"},{"location":"mcp-server/#1-get_rocketship_examples","title":"1. get_rocketship_examples","text":"<p>Get examples and best practices for specific Rocketship features.</p> <p>Features:</p> <ul> <li><code>api_testing</code> - HTTP endpoint testing with authentication and validation</li> <li><code>step_chaining</code> - Using data from previous steps in workflows</li> <li><code>assertions</code> - Comprehensive validation patterns</li> <li><code>plugins</code> - Configuration examples for all plugins</li> <li><code>environments</code> - Multi-stage configuration patterns</li> <li><code>customer_journeys</code> - E2E workflow testing examples</li> </ul> <p>Example Request:</p> <pre><code>\"Show me API testing examples with authentication\"\n</code></pre> <p>What You Get:</p> <ul> <li>Real YAML code examples</li> <li>Best practices for the feature</li> <li>Implementation guidance</li> <li>Next steps checklist</li> </ul>"},{"location":"mcp-server/#2-suggest_test_structure","title":"2. suggest_test_structure","text":"<p>Returns a test template with TODOs and implementation guidance.</p> <p>Test Types:</p> <ul> <li><code>api</code> - HTTP endpoint testing</li> <li><code>browser</code> - UI automation testing</li> <li><code>sql</code> - Database testing</li> <li><code>integration</code> - Multi-service testing</li> <li><code>e2e</code> - End-to-end customer journeys</li> </ul> <p>Example Request:</p> <pre><code>\"I need to test user registration and email verification flow\"\n</code></pre> <p>What You Get:</p> <ul> <li>YAML template with TODO sections</li> <li>Implementation checklist</li> <li>Suggested structure for your specific use case</li> </ul>"},{"location":"mcp-server/#3-get_assertion_patterns","title":"3. get_assertion_patterns","text":"<p>Shows assertion examples for different testing scenarios.</p> <p>Response Types:</p> <ul> <li><code>json</code> - JSON API response validation</li> <li><code>xml</code> - XML response validation</li> <li><code>text</code> - Plain text response validation</li> <li><code>status</code> - HTTP status code patterns</li> <li><code>headers</code> - HTTP header validation</li> <li><code>sql</code> - Database result validation</li> <li><code>browser</code> - UI element validation</li> </ul> <p>Example Request:</p> <pre><code>\"What assertions should I use for user profile API responses?\"\n</code></pre> <p>What You Get:</p> <ul> <li>Comprehensive assertion examples</li> <li>JSONPath and XPath patterns</li> <li>Validation tips and best practices</li> </ul>"},{"location":"mcp-server/#4-get_plugin_config","title":"4. get_plugin_config","text":"<p>Provides configuration examples for Rocketship plugins.</p> <p>Available Plugins:</p> <ul> <li><code>http</code> - API testing with retry logic and authentication</li> <li><code>sql</code> - Database operations with transaction support</li> <li><code>browser</code> - UI automation with screenshots and interactions</li> <li><code>agent</code> - AI-powered validation and analysis</li> <li><code>supabase</code> - Direct Supabase API operations</li> <li><code>delay</code> - Timing control with jitter</li> <li><code>script</code> - Custom JavaScript logic</li> <li><code>log</code> - Structured logging and debugging</li> </ul> <p>Example Request:</p> <pre><code>\"How do I configure the SQL plugin for PostgreSQL testing?\"\n</code></pre> <p>What You Get:</p> <ul> <li>Basic and advanced configuration examples</li> <li>Feature descriptions and capabilities</li> <li>Plugin-specific tips and best practices</li> </ul>"},{"location":"mcp-server/#5-validate_and_suggest","title":"5. validate_and_suggest","text":"<p>Reviews your Rocketship YAML content and suggests improvements.</p> <p>Improvement Focus Areas:</p> <ul> <li><code>performance</code> - Timeout and retry optimizations</li> <li><code>assertions</code> - Better validation patterns</li> <li><code>structure</code> - YAML organization improvements</li> <li><code>coverage</code> - Test scenario completeness</li> <li><code>best_practices</code> - General Rocketship recommendations</li> </ul> <p>Example Request:</p> <pre><code>\"Review my test file and suggest improvements\"\n</code></pre> <p>What You Get:</p> <ul> <li>Issue identification and fixes</li> <li>Specific improvement suggestions</li> <li>Best practice recommendations</li> <li>Next steps for enhancement</li> </ul>"},{"location":"mcp-server/#6-get_cli_commands","title":"6. get_cli_commands","text":"<p>Provides CLI command examples and usage patterns.</p> <p>Command Categories:</p> <ul> <li><code>run</code> - Execute tests with various options</li> <li><code>validate</code> - Syntax and schema validation</li> <li><code>start</code> - Start Rocketship engine server</li> <li><code>stop</code> - Stop engine server</li> <li><code>general</code> - Help, version, and configuration</li> </ul> <p>Example Request:</p> <pre><code>\"How do I run tests with custom variables in CI/CD?\"\n</code></pre> <p>What You Get:</p> <ul> <li>Command examples for different scenarios</li> <li>Flag explanations and usage</li> <li>Workflow patterns and best practices</li> </ul>"},{"location":"mcp-server/#integration-examples","title":"Integration Examples","text":""},{"location":"mcp-server/#with-claude-code","title":"With Claude Code","text":"<p>Add to your <code>.mcp.json</code> file in your project root:</p> <pre><code>{\n  \"mcpServers\": {\n    \"rocketship\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@rocketshipai/mcp-server@latest\"]\n    }\n  }\n}\n</code></pre> <p>Then ask Claude for help:</p> <pre><code>\"I need to create API tests for my Express.js authentication endpoints. Show me some patterns I can follow.\"\n</code></pre> <p>Claude will use the MCP server to get relevant examples and help you create your own test files.</p>"},{"location":"mcp-server/#with-cursor","title":"With Cursor","text":"<ol> <li>Go to Cursor Settings &gt; Features &gt; Enable Model Context Protocol</li> <li>Add to your MCP configuration:</li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"rocketship\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@rocketshipai/mcp-server@latest\"]\n    }\n  }\n}\n</code></pre> <ol> <li>Ask Cursor for guidance:</li> </ol> <pre><code>\"What's the best way to structure a Rocketship test for user login with database validation?\"\n</code></pre>"},{"location":"mcp-server/#with-windsurf","title":"With Windsurf","text":"<p>Add to your Windsurf MCP configuration (<code>~/.codeium/windsurf/mcp_config.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"rocketship\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@rocketshipai/mcp-server@latest\"]\n    }\n  }\n}\n</code></pre> <p>Then ask for assistance:</p> <pre><code>\"Help me understand how to use step chaining in Rocketship for a complete e-commerce checkout flow\"\n</code></pre>"},{"location":"mcp-server/#with-other-mcp-clients","title":"With Other MCP Clients","text":"<p>Any MCP-compatible client can use the Rocketship server. The server communicates via JSON-RPC over stdio, making it compatible with various AI assistants and development tools.</p>"},{"location":"mcp-server/#best-practices","title":"Best Practices","text":""},{"location":"mcp-server/#1-ask-for-specific-guidance","title":"1. Ask for Specific Guidance","text":"<p>Instead of asking for complete test generation, ask for guidance on specific aspects:</p> <p>Good:</p> <ul> <li>\"Show me examples of API authentication testing\"</li> <li>\"What assertions work best for user profile endpoints?\"</li> <li>\"How should I structure an E2E checkout flow test?\"</li> </ul> <p>Less Effective:</p> <ul> <li>\"Generate all my tests\"</li> <li>\"Create a complete test suite\"</li> </ul>"},{"location":"mcp-server/#2-learn-the-patterns","title":"2. Learn the Patterns","text":"<p>Use the MCP server to understand Rocketship concepts:</p> <ul> <li>Study the examples provided</li> <li>Understand the reasoning behind best practices</li> <li>Adapt patterns to your specific use case</li> <li>Build your own expertise over time</li> </ul>"},{"location":"mcp-server/#3-focus-on-customer-journeys","title":"3. Focus on Customer Journeys","text":"<p>The MCP server emphasizes E2E customer journey testing:</p> <ul> <li>Think about complete user workflows</li> <li>Test realistic user scenarios</li> <li>Validate data consistency across steps</li> <li>Include error and edge cases</li> </ul>"},{"location":"mcp-server/#4-iterate-and-improve","title":"4. Iterate and Improve","text":"<p>Use the validation tool to continuously improve:</p> <ol> <li>Get initial structure guidance</li> <li>Create your test implementation</li> <li>Validate and get improvement suggestions</li> <li>Refine based on feedback</li> <li>Learn from the process</li> </ol>"},{"location":"mcp-server/#example-workflow","title":"Example Workflow","text":"<p>Here's how a typical interaction works:</p> <pre><code>User: \"I need to test a user registration API that creates a user,\n       sends an email, and requires email verification\"\n\nAgent: *Uses get_rocketship_examples with feature=\"customer_journeys\"*\n\nMCP Server: *Returns E2E customer journey examples including:*\n- Multi-step workflow patterns\n- Email verification testing approaches\n- Data validation between steps\n- Best practices for user onboarding flows\n\nAgent: \"Based on these examples, let me help you create a test...\"\n       *Creates test file incorporating the patterns*\n\nUser: \"Now I want to add database validation to ensure the user was created correctly\"\n\nAgent: *Uses get_plugin_config with plugin=\"sql\"*\n\nMCP Server: *Returns SQL plugin configuration examples*\n\nAgent: *Helps add SQL validation step to the existing test*\n\nUser: \"Can you review my test and suggest improvements?\"\n\nAgent: *Uses validate_and_suggest with the YAML content*\n\nMCP Server: *Returns specific suggestions for improvement*\n\nAgent: *Helps implement the suggested improvements*\n</code></pre>"},{"location":"mcp-server/#environment-variables","title":"Environment Variables","text":"<p>The MCP server respects these environment variables:</p> <ul> <li><code>ROCKETSHIP_LOG</code>: Set log level (DEBUG, INFO, ERROR)</li> <li><code>NODE_ENV</code>: Development/production mode</li> </ul>"},{"location":"mcp-server/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mcp-server/#mcp-server-not-found","title":"MCP Server Not Found","text":"<p>If your AI client can't find the MCP server:</p> <ol> <li>Ensure Node.js 18+ is installed</li> <li>Check your MCP configuration syntax</li> <li>Restart your AI client after configuration changes</li> <li>Verify the npm package is accessible</li> </ol>"},{"location":"mcp-server/#no-guidance-provided","title":"No Guidance Provided","text":"<p>If the MCP server isn't providing helpful guidance:</p> <ol> <li>Be more specific in your requests</li> <li>Provide context about what you're trying to test</li> <li>Ask for specific features or patterns</li> <li>Try different tool combinations</li> </ol>"},{"location":"mcp-server/#examples-dont-match-your-use-case","title":"Examples Don't Match Your Use Case","text":"<p>If the provided examples don't fit your scenario:</p> <ol> <li>Ask for multiple feature examples to combine</li> <li>Request specific plugin configurations</li> <li>Use the validation tool to refine your approach</li> <li>Adapt the patterns to your specific needs</li> </ol>"},{"location":"mcp-server/#security-considerations","title":"Security Considerations","text":"<p>The MCP server:</p> <ul> <li>Never generates files: Only provides guidance and examples</li> <li>No code access: Works with agent's existing knowledge</li> <li>Read-only operation: Cannot modify your project</li> <li>Local execution: All operations run in your environment</li> <li>No data storage: Doesn't store or transmit your code</li> </ul>"},{"location":"mcp-server/#future-enhancements","title":"Future Enhancements","text":"<p>Planned improvements include:</p> <ul> <li>Enhanced pattern library: More examples for complex scenarios</li> <li>Interactive tutorials: Step-by-step guidance for common workflows</li> <li>Context-aware suggestions: Better understanding of project structure</li> <li>Performance optimization: Faster response times and better caching</li> </ul>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Get started with Rocketship in minutes! This guide will help you install Rocketship and run your first test.</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<p>First, install Temporal (required for the local engine):</p> <pre><code>brew install temporal\n</code></pre> <p>Then install the Rocketship CLI:</p> <pre><code># for arm64 macos\ncurl -Lo /usr/local/bin/rocketship https://github.com/rocketship-ai/rocketship/releases/latest/download/rocketship-darwin-arm64\nchmod +x /usr/local/bin/rocketship\n</code></pre> <p>For detailed installation instructions for other platforms and optional aliases, see the Installation Guide.</p>"},{"location":"quickstart/#your-first-test","title":"Your First Test","text":"<p>Create a test file:</p> <pre><code>cat &gt; simple-test.yaml &lt;&lt; 'EOF'\nname: \"Simple Test Suite\"\ndescription: \"A simple test suite!\"\nversion: \"v1.0.0\"\ntests:\n  - name: \"API Health Check\"\n    steps:\n      - name: \"Check API status\"\n        plugin: \"http\"\n        config:\n          method: \"GET\"\n          url: \"https://httpbin.org/status/200\"\n        assertions:\n          - type: \"status_code\"\n            expected: 200\nEOF\n</code></pre> <p>Run the test:</p> <pre><code>rocketship run -af simple-test.yaml\n</code></pre> <p>The <code>-a</code> flag tells Rocketship to automatically start and stop the local server, and <code>-f</code> specifies the test file to run.</p>"},{"location":"quickstart/#test-run-management","title":"Test Run Management","text":"<p>Rocketship automatically tracks your test runs with context information, making it easy to organize and find results.</p>"},{"location":"quickstart/#adding-context-to-your-runs","title":"Adding Context to Your Runs","text":"<p>You can add context to your test runs for better organization:</p> <pre><code># Run with project context\nrocketship run -af simple-test.yaml \\\n  --project-id \"my-app\" \\\n  --source \"cli-local\" \\\n  --branch \"main\" \\\n  --trigger \"manual\"\n\n# Add custom metadata\nrocketship run -af simple-test.yaml \\\n  --project-id \"my-app\" \\\n  --metadata \"env=staging\" \\\n  --metadata \"team=backend\"\n</code></pre>"},{"location":"quickstart/#viewing-test-history","title":"Viewing Test History","text":"<p>List your recent test runs:</p> <pre><code># List all recent runs\nrocketship list\n\n# Filter by project\nrocketship list --project-id \"my-app\"\n\n# Filter by status\nrocketship list --status FAILED\n\n# Get detailed information about a specific run\nrocketship get &lt;run-id&gt;\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the CLI reference</li> <li>Check out example tests</li> <li>Learn about run management</li> </ul>"},{"location":"test-run-management/","title":"Test Run Management","text":"<p>Rocketship provides comprehensive test run tracking and management capabilities, allowing you to organize, filter, and analyze your test execution history.</p>"},{"location":"test-run-management/#overview","title":"Overview","text":"<p>Every test run in Rocketship is automatically tracked with contextual metadata including:</p> <ul> <li>Project ID: Organize runs by project or application</li> <li>Source: Track where the run originated (CLI, CI/CD, scheduled)</li> <li>Branch: Git branch information for version tracking</li> <li>Trigger: How the run was initiated (manual, webhook, schedule)</li> <li>Metadata: Custom key-value pairs for additional context</li> </ul>"},{"location":"test-run-management/#running-tests-with-context","title":"Running Tests with Context","text":""},{"location":"test-run-management/#basic-context-flags","title":"Basic Context Flags","text":"<p>When running tests, you can provide context information that will be stored with the run:</p> <pre><code># Run with full context\nrocketship run -f test.yaml \\\n  --project-id \"my-app\" \\\n  --source \"cli-local\" \\\n  --branch \"feature/new-api\" \\\n  --trigger \"manual\"\n</code></pre>"},{"location":"test-run-management/#auto-detection","title":"Auto-Detection","text":"<p>If not specified, Rocketship automatically detects:</p> <ul> <li>Project ID: Uses \"default\" if not provided</li> <li>Source: Detects CI environment or defaults to \"cli-local\"</li> <li>Branch: Uses <code>git branch --show-current</code></li> <li>Commit SHA: Uses <code>git rev-parse HEAD</code></li> <li>Trigger: Infers based on source (webhook for CI, manual for local)</li> </ul>"},{"location":"test-run-management/#custom-metadata","title":"Custom Metadata","text":"<p>Add custom metadata for additional context:</p> <pre><code>rocketship run -f test.yaml \\\n  --project-id \"my-app\" \\\n  --metadata \"env=staging\" \\\n  --metadata \"team=backend\" \\\n  --metadata \"version=1.2.3\"\n</code></pre>"},{"location":"test-run-management/#auto-run-mode","title":"Auto Run Mode","text":"<p>When using the <code>--auto</code> flag, Rocketship automatically displays recent test runs after your tests complete:</p> <pre><code># Run tests with auto mode\nrocketship run --auto -f test.yaml\n\n# After tests complete, you'll see:\n# 1. Final test summary\n# 2. Recent test runs table (all runs)\n</code></pre> <p>This provides immediate visibility into your test history without needing to run a separate <code>list</code> command.</p>"},{"location":"test-run-management/#listing-test-runs","title":"Listing Test Runs","text":"<p>The <code>rocketship list</code> command provides powerful filtering and sorting capabilities:</p>"},{"location":"test-run-management/#basic-listing","title":"Basic Listing","text":"<pre><code># List all recent runs (default: 20 most recent)\nrocketship list\n\n# Limit results\nrocketship list --limit 50\n</code></pre>"},{"location":"test-run-management/#filtering","title":"Filtering","text":"<p>Filter runs by various criteria:</p> <pre><code># By project\nrocketship list --project-id \"my-app\"\n\n# By status\nrocketship list --status FAILED\nrocketship list --status PASSED\n\n# By source\nrocketship list --source \"ci-branch\"\n\n# By git branch\nrocketship list --branch \"main\"\n\n# By schedule name (for scheduled runs)\nrocketship list --schedule-name \"nightly-tests\"\n\n# Combine filters\nrocketship list --project-id \"my-app\" --status FAILED --branch \"main\"\n</code></pre>"},{"location":"test-run-management/#sorting","title":"Sorting","text":"<p>Control the order of results:</p> <pre><code># Sort by start time (default: newest first)\nrocketship list --order-by started_at\n\n# Sort by duration (longest first)\nrocketship list --order-by duration\n\n# Sort in ascending order\nrocketship list --order-by duration --ascending\n</code></pre>"},{"location":"test-run-management/#getting-run-details","title":"Getting Run Details","text":"<p>Use <code>rocketship get</code> to view detailed information about a specific run:</p> <pre><code># Get run details (accepts truncated run IDs)\nrocketship get abc123def456\n\n# Full run details include:\n# - Run metadata (ID, suite name, status, timing)\n# - Context information (project, source, branch, etc.)\n# - Individual test results\n# - Custom metadata\n</code></pre>"},{"location":"test-run-management/#example-output","title":"Example Output","text":"<pre><code>Test Run Details\n================\n\nRun ID:      abc123def456789\nSuite Name:  My Test Suite\nStatus:      \u2713 PASSED\nStarted:     2025-06-25T10:30:00Z\nEnded:       2025-06-25T10:32:15Z\nDuration:    2m15s\n\nContext:\n  Project ID:    my-app\n  Source:        ci-branch\n  Branch:        feature/new-api\n  Commit:        a1b2c3d4\n  Trigger:       webhook\n  Metadata:\n    env: staging\n    team: backend\n\nTests (3):\n  #  NAME           STATUS    DURATION  ERROR\n  -  ----           ------    --------  -----\n  1  Health Check   \u2713 PASSED  1.2s      \n  2  User Login     \u2713 PASSED  0.8s      \n  3  Data Fetch     \u2713 PASSED  0.3s\n</code></pre>"},{"location":"test-run-management/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"test-run-management/#branch-based-ci","title":"Branch-based CI","text":"<p>For branch-based CI workflows:</p> <pre><code># In your CI pipeline\nrocketship run -f tests/api.yaml \\\n  --project-id \"$PROJECT_NAME\" \\\n  --source \"ci-branch\" \\\n  --branch \"$CI_BRANCH\" \\\n  --commit \"$CI_COMMIT_SHA\" \\\n  --trigger \"webhook\" \\\n  --metadata \"build_id=$BUILD_ID\"\n</code></pre>"},{"location":"test-run-management/#scheduled-runs","title":"Scheduled Runs","text":"<p>For scheduled test runs:</p> <pre><code># In your scheduler (cron, GitHub Actions, etc.)\nrocketship run -f tests/nightly.yaml \\\n  --project-id \"my-app\" \\\n  --source \"scheduled\" \\\n  --schedule-name \"nightly-tests\" \\\n  --trigger \"schedule\" \\\n  --metadata \"schedule_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)\"\n</code></pre>"},{"location":"test-run-management/#advanced-usage","title":"Advanced Usage","text":""},{"location":"test-run-management/#server-management","title":"Server Management","text":"<p>When running multiple tests or in CI environments, you can manage the server separately:</p> <pre><code># Start server in background\nrocketship start server --local --background\n\n# Run tests against existing server\nrocketship run -f test1.yaml --project-id \"my-app\"\nrocketship run -f test2.yaml --project-id \"my-app\"\n\n# List results\nrocketship list --project-id \"my-app\"\n\n# Stop server\nrocketship stop server\n</code></pre>"},{"location":"test-run-management/#output-formats","title":"Output Formats","text":"<p>Future versions will support additional output formats:</p> <pre><code># JSON output (planned)\nrocketship list --format json\n\n# YAML output (planned)\nrocketship get abc123 --format yaml\n</code></pre>"},{"location":"test-run-management/#best-practices","title":"Best Practices","text":"<ol> <li>Consistent Project IDs: Use consistent project identifiers across your organization</li> <li>Meaningful Metadata: Add relevant context like environment, version, or team information</li> <li>Filter Effectively: Use filters to quickly find relevant test runs</li> <li>Monitor Failures: Regularly check for failed runs with <code>rocketship list --status FAILED</code></li> <li>CI Integration: Include context flags in your CI/CD pipelines for better traceability</li> </ol>"},{"location":"test-run-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"test-run-management/#common-issues","title":"Common Issues","text":"<ul> <li>Run not found: Run IDs can be truncated (12 characters minimum)</li> <li>No runs listed: Check your filter criteria or server connection</li> <li>Missing context: Context is auto-detected when possible but can be explicitly set</li> </ul>"},{"location":"test-run-management/#debug-information","title":"Debug Information","text":"<p>Use debug logging to troubleshoot:</p> <pre><code>ROCKETSHIP_LOG=DEBUG rocketship list\nROCKETSHIP_LOG=DEBUG rocketship get abc123\n</code></pre>"},{"location":"examples/agent-testing/","title":"Agent Plugin - AI-Powered Testing","text":"<p>The agent plugin integrates Claude Code into your test workflows, enabling AI-powered analysis, data processing, and intelligent test validation. Use it to analyze API responses, generate test data, validate complex business logic, or create intelligent test assertions.</p>"},{"location":"examples/agent-testing/#key-features-demonstrated","title":"Key Features Demonstrated","text":"<ul> <li>AI Analysis: Analyze API responses, logs, and test data with Claude</li> <li>Multiple Output Formats: Support for JSON, text, and streaming formats</li> <li>Session Management: Continue conversations across test steps</li> <li>Template Integration: Use previous test results in AI prompts</li> <li>Metadata Extraction: Access cost, duration, and session information</li> <li>Flexible Timeouts: Configure execution timeouts for different use cases</li> <li>System Prompts: Customize AI behavior with custom instructions</li> </ul>"},{"location":"examples/agent-testing/#prerequisites","title":"Prerequisites","text":"<p>Before using the agent plugin, you need:</p> <ol> <li>Claude Code CLI installed: Install via <code>npm install -g @anthropic-ai/claude-code</code> or use Homebrew</li> <li>Anthropic API Key: Set the <code>ANTHROPIC_API_KEY</code> environment variable</li> <li>Authentication: Run <code>claude login</code> to authenticate with Claude Code</li> </ol> <pre><code># Install Claude Code CLI\nnpm install -g @anthropic-ai/claude-code\n# OR\nbrew install claude\n\n# Set your API key\nexport ANTHROPIC_API_KEY=sk-ant-your-key-here\n\n# Login to Claude Code\nclaude login\n</code></pre>"},{"location":"examples/agent-testing/#basic-configuration","title":"Basic Configuration","text":"<pre><code>plugin: agent\nconfig:\n  agent: \"claude-code\" # Only supported agent type\n  prompt: \"Your prompt here\" # Required: instruction for Claude\n  mode: \"single\" # Optional: single, continue, resume\n  output_format: \"json\" # Optional: json, text, streaming-json\n  timeout: \"30s\" # Optional: execution timeout\n</code></pre>"},{"location":"examples/agent-testing/#simple-example","title":"Simple Example","text":"<pre><code>name: \"Basic Agent Analysis\"\ntests:\n  - name: \"Analyze API response\"\n    steps:\n      - name: \"Get user data\"\n        plugin: http\n        config:\n          method: GET\n          url: \"https://jsonplaceholder.typicode.com/users/1\"\n        save:\n          - json_path: \".name\"\n            as: \"user_name\"\n          - json_path: \".email\"\n            as: \"user_email\"\n\n      - name: \"AI analysis of user data\"\n        plugin: agent\n        config:\n          agent: \"claude-code\"\n          prompt: |\n            Analyze this user data:\n            Name: {{ user_name }}\n            Email: {{ user_email }}\n\n            Is this a valid user profile? Respond with JSON:\n            {\"valid\": true/false, \"issues\": [\"list\", \"of\", \"issues\"]}\n          output_format: \"json\"\n        save:\n          - json_path: \".response\"\n            as: \"validation_result\"\n\n      - name: \"Log validation result\"\n        plugin: log\n        config:\n          message: \"User validation: {{ validation_result }}\"\n</code></pre>"},{"location":"examples/agent-testing/#comprehensive-configuration-example","title":"Comprehensive Configuration Example","text":"<pre><code>name: \"Agent Plugin Feature Demo\"\nvars:\n  api_endpoint: \"https://jsonplaceholder.typicode.com/posts/1\"\n  system_instructions: \"You are a technical analyst. Be concise and precise.\"\n\ntests:\n  - name: \"Complete agent workflow\"\n    steps:\n      # Get test data\n      - name: \"Fetch API data\"\n        plugin: http\n        config:\n          method: GET\n          url: \"{{ .vars.api_endpoint }}\"\n        save:\n          - json_path: \".title\"\n            as: \"post_title\"\n          - json_path: \".body\"\n            as: \"post_body\"\n\n      # JSON output with system prompt\n      - name: \"Structured analysis\"\n        plugin: agent\n        config:\n          agent: \"claude-code\"\n          prompt: |\n            Analyze this content:\n            Title: {{ post_title }}\n            Body: {{ post_body }}\n\n            Provide JSON analysis: {\n              \"sentiment\": \"positive/negative/neutral\",\n              \"topics\": [\"array\", \"of\", \"topics\"],\n              \"word_count\": number,\n              \"summary\": \"brief summary\"\n            }\n          mode: \"single\"\n          output_format: \"json\"\n          system_prompt: \"{{ .vars.system_instructions }}\"\n          timeout: \"45s\"\n          save_full_response: true\n        save:\n          - json_path: \".response\"\n            as: \"structured_analysis\"\n          - json_path: \".cost\"\n            as: \"analysis_cost\"\n          - json_path: \".session_id\"\n            as: \"session_id\"\n        assertions:\n          - type: \"json_path\"\n            path: \".success\"\n            expected: true\n\n      # Text output with multi-turn\n      - name: \"Detailed analysis\"\n        plugin: agent\n        config:\n          agent: \"claude-code\"\n          prompt: \"Expand on the analysis: {{ structured_analysis }}\"\n          mode: \"single\"\n          output_format: \"text\"\n          max_turns: 2\n          timeout: \"60s\"\n        save:\n          - json_path: \".response\"\n            as: \"detailed_analysis\"\n\n      # Optional field extraction\n      - name: \"Extract key insights\"\n        plugin: agent\n        config:\n          agent: \"claude-code\"\n          prompt: \"List the top 3 insights from: {{ detailed_analysis }}\"\n          output_format: \"text\"\n        save:\n          - json_path: \".response\"\n            as: \"key_insights\"\n          - json_path: \".nonexistent_field\"\n            as: \"optional_data\"\n            required: false\n\n      # Final summary\n      - name: \"Log comprehensive results\"\n        plugin: log\n        config:\n          message: |\n            \ud83e\udd16 AI Analysis Complete:\n            \ud83d\udcca Structured: {{ structured_analysis }}\n            \ud83d\udcb0 Cost: ${{ analysis_cost }}\n            \ud83d\udcdd Detailed: {{ detailed_analysis }}\n            \ud83c\udfaf Insights: {{ key_insights }}\n            \u2753 Optional: {{ optional_data }}\n</code></pre>"},{"location":"examples/agent-testing/#configuration-options","title":"Configuration Options","text":""},{"location":"examples/agent-testing/#required-fields","title":"Required Fields","text":"Field Description Example <code>agent</code> Agent type (only \"claude-code\" supported) <code>\"claude-code\"</code> <code>prompt</code> Instruction for Claude (supports templates) <code>\"Analyze this data: {{ api_response }}\"</code>"},{"location":"examples/agent-testing/#optional-fields","title":"Optional Fields","text":"Field Type Default Description <code>mode</code> string <code>\"single\"</code> Execution mode: <code>single</code>, <code>continue</code>, <code>resume</code> <code>output_format</code> string <code>\"json\"</code> Output format: <code>json</code>, <code>text</code>, <code>streaming-json</code> <code>timeout</code> string <code>\"30s\"</code> Execution timeout (e.g., \"30s\", \"2m\") <code>system_prompt</code> string - Custom system instructions <code>max_turns</code> integer 1 Maximum conversation turns <code>session_id</code> string - Session ID for resume mode <code>continue_recent</code> boolean false Continue most recent conversation <code>save_full_response</code> boolean true Save complete response to context"},{"location":"examples/agent-testing/#output-formats","title":"Output Formats","text":""},{"location":"examples/agent-testing/#json-format","title":"JSON Format","text":"<p>Returns structured metadata with the Claude response:</p> <pre><code>output_format: \"json\"\n</code></pre> <p>Response structure:</p> <pre><code>{\n  \"type\": \"result\",\n  \"subtype\": \"success\",\n  \"result\": \"Claude's response here\",\n  \"session_id\": \"unique-session-id\",\n  \"cost_usd\": 0.003,\n  \"duration_ms\": 1234,\n  \"num_turns\": 1,\n  \"is_error\": false\n}\n</code></pre>"},{"location":"examples/agent-testing/#text-format","title":"Text Format","text":"<p>Returns Claude's response as plain text:</p> <pre><code>output_format: \"text\"\n</code></pre> <p>Best for simple analysis or when you want Claude's raw response.</p>"},{"location":"examples/agent-testing/#execution-modes","title":"Execution Modes","text":""},{"location":"examples/agent-testing/#single-mode-default","title":"Single Mode (Default)","text":"<p>Execute a one-time prompt:</p> <pre><code>mode: \"single\"\nprompt: \"Analyze this data: {{ api_response }}\"\n</code></pre>"},{"location":"examples/agent-testing/#continue-mode","title":"Continue Mode","text":"<p>Continue the most recent conversation:</p> <pre><code>mode: \"continue\"\ncontinue_recent: true\nprompt: \"Now summarize our discussion\"\n</code></pre>"},{"location":"examples/agent-testing/#resume-mode","title":"Resume Mode","text":"<p>Resume a specific conversation session:</p> <pre><code>mode: \"resume\"\nsession_id: \"{{ previous_session_id }}\"\nprompt: \"Continue from where we left off\"\n</code></pre>"},{"location":"examples/agent-testing/#save-operations","title":"Save Operations","text":""},{"location":"examples/agent-testing/#basic-response-extraction","title":"Basic Response Extraction","text":"<pre><code>save:\n  - json_path: \".response\"\n    as: \"ai_analysis\"\n</code></pre>"},{"location":"examples/agent-testing/#metadata-extraction","title":"Metadata Extraction","text":"<pre><code>save:\n  - json_path: \".response\"\n    as: \"analysis_content\"\n  - json_path: \".cost\"\n    as: \"execution_cost\"\n  - json_path: \".duration\"\n    as: \"execution_time\"\n  - json_path: \".session_id\"\n    as: \"session_id\"\n  - json_path: \".success\"\n    as: \"success_status\"\n</code></pre>"},{"location":"examples/agent-testing/#optional-fields_1","title":"Optional Fields","text":"<pre><code>save:\n  - json_path: \".response\"\n    as: \"required_analysis\"\n  - json_path: \".optional_metadata\"\n    as: \"optional_data\"\n    required: false # Won't fail if field doesn't exist\n</code></pre>"},{"location":"examples/agent-testing/#assertions","title":"Assertions","text":"<p>Validate agent execution results:</p> <pre><code>assertions:\n  - type: \"json_path\"\n    path: \".success\"\n    expected: true\n  - type: \"json_path\"\n    path: \".exit_code\"\n    expected: 0\n  - type: \"json_path\"\n    path: \".cost\"\n    expected: 0 # Cost should be 0 for testing\n</code></pre>"},{"location":"examples/agent-testing/#template-variables","title":"Template Variables","text":"<p>Use data from previous steps in agent prompts:</p> <pre><code># From HTTP responses\nprompt: \"Analyze this API data: {{ api_response }}\"\n\n# From configuration\nprompt: \"Process {{ .vars.user_data }} according to {{ .vars.business_rules }}\"\n\n# From previous agent results\nprompt: \"Based on {{ previous_analysis }}, what are the next steps?\"\n\n# Multi-line prompts with templates\nprompt: |\n  Previous Analysis: {{ step1_result }}\n  New Data: {{ step2_data }}\n\n  Compare these results and identify:\n  1. Key differences\n  2. Trending patterns\n  3. Recommendations\n</code></pre>"},{"location":"examples/agent-testing/#use-cases","title":"Use Cases","text":""},{"location":"examples/agent-testing/#api-response-analysis","title":"API Response Analysis","text":"<pre><code>- name: \"Analyze API health\"\n  plugin: agent\n  config:\n    agent: \"claude-code\"\n    prompt: |\n      API Response Analysis:\n      Status: {{ response_status }}\n      Time: {{ response_time }}ms\n      Size: {{ response_size }} bytes\n\n      Rate this API's health (1-10) and explain issues.\n    output_format: \"json\"\n</code></pre>"},{"location":"examples/agent-testing/#test-data-validation","title":"Test Data Validation","text":"<pre><code>- name: \"Validate business rules\"\n  plugin: agent\n  config:\n    agent: \"claude-code\"\n    prompt: |\n      User Data: {{ user_profile }}\n      Business Rules: {{ .vars.validation_rules }}\n\n      Does this user profile comply with business rules?\n      Return: {\"compliant\": boolean, \"violations\": []}\n</code></pre>"},{"location":"examples/agent-testing/#intelligent-assertions","title":"Intelligent Assertions","text":"<pre><code>- name: \"Smart content validation\"\n  plugin: agent\n  config:\n    agent: \"claude-code\"\n    prompt: |\n      Content: {{ page_content }}\n\n      Check for:\n      - Appropriate language\n      - Complete information\n      - Professional tone\n\n      Score 1-10 with reasoning.\n</code></pre>"},{"location":"examples/agent-testing/#log-analysis","title":"Log Analysis","text":"<pre><code>- name: \"Analyze error logs\"\n  plugin: agent\n  config:\n    agent: \"claude-code\"\n    prompt: |\n      Error Logs: {{ error_logs }}\n\n      Categorize errors and suggest fixes:\n      {\"categories\": [], \"critical_count\": 0, \"suggestions\": []}\n</code></pre>"},{"location":"examples/agent-testing/#running-examples","title":"Running Examples","text":"<pre><code># Run basic agent example\nrocketship run -af examples/agent-testing/rocketship.yaml\n\n# Run with API key environment variable\nANTHROPIC_API_KEY=your-key rocketship run -af examples/agent-testing/rocketship.yaml\n\n# Run comprehensive test suite\nrocketship run -af examples/agent-testing/comprehensive-test.yaml\n</code></pre>"},{"location":"examples/agent-testing/#best-practices","title":"Best Practices","text":""},{"location":"examples/agent-testing/#1-clear-specific-prompts","title":"1. Clear, Specific Prompts","text":"<pre><code># Good: Specific instructions\nprompt: |\n  Analyze this JSON response for data quality:\n  {{ api_response }}\n\n  Check: completeness, format validity, business logic\n  Return: {\"score\": 1-10, \"issues\": [\"specific\", \"problems\"]}\n\n# Avoid: Vague prompts\nprompt: \"Check this data: {{ api_response }}\"\n</code></pre>"},{"location":"examples/agent-testing/#2-use-appropriate-output-formats","title":"2. Use Appropriate Output Formats","text":"<pre><code># Use JSON for structured data extraction\noutput_format: \"json\"\nprompt: \"Return analysis as: {\\\"score\\\": number, \\\"issues\\\": []}\"\n\n# Use text for explanations and summaries\noutput_format: \"text\"\nprompt: \"Explain the security implications of this configuration\"\n</code></pre>"},{"location":"examples/agent-testing/#3-set-reasonable-timeouts","title":"3. Set Reasonable Timeouts","text":"<pre><code># Quick analysis\ntimeout: \"15s\"\n\n# Complex analysis\ntimeout: \"60s\"\n\n# Multi-turn conversations\ntimeout: \"120s\"\n</code></pre>"},{"location":"examples/agent-testing/#4-handle-optional-data","title":"4. Handle Optional Data","text":"<pre><code>save:\n  - json_path: \".response\"\n    as: \"analysis\"\n  - json_path: \".metadata.extra\"\n    as: \"extra_info\"\n    required: false # Won't fail test if missing\n</code></pre>"},{"location":"examples/agent-testing/#5-use-system-prompts-for-consistency","title":"5. Use System Prompts for Consistency","text":"<pre><code>vars:\n  analyst_prompt: \"You are a security analyst. Be thorough and highlight risks.\"\n\nconfig:\n  system_prompt: \"{{ .vars.analyst_prompt }}\"\n  prompt: \"Analyze this configuration: {{ config_data }}\"\n</code></pre>"},{"location":"examples/agent-testing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/agent-testing/#common-issues","title":"Common Issues","text":"<p>\"claude command not found\"</p> <ul> <li>Install Claude Code CLI: <code>npm install -g @anthropic-ai/claude-code</code></li> <li>Verify installation: <code>which claude</code></li> </ul> <p>\"ANTHROPIC_API_KEY environment variable is required\"</p> <ul> <li>Set your API key: <code>export ANTHROPIC_API_KEY=sk-ant-your-key</code></li> <li>Get an API key from https://console.anthropic.com/</li> </ul> <p>\"Authentication required\"</p> <ul> <li>Login to Claude Code: <code>claude login</code></li> </ul> <p>Empty responses</p> <ul> <li>Check your prompt is clear and specific</li> <li>Verify template variables are being substituted correctly</li> <li>Increase timeout for complex analysis</li> </ul> <p>JSON parsing errors</p> <ul> <li>Use <code>output_format: \"text\"</code> for debugging</li> <li>Check Claude's actual response format</li> <li>Ensure prompts request valid JSON structure</li> </ul> <p>The agent plugin enables powerful AI-driven testing workflows, making your tests more intelligent and capable of handling complex validation scenarios that would be difficult to implement with traditional assertion methods.</p>"},{"location":"examples/browser-testing/","title":"Browser Plugin - AI-Powered Web Automation","text":"<p>The browser plugin enables AI-driven browser automation within your test workflows, using browser-use to intelligently navigate websites, extract data, and validate web interfaces. Use it to test web applications, scrape data, monitor website functionality, or automate complex browser interactions.</p>"},{"location":"examples/browser-testing/#key-features-demonstrated","title":"Key Features Demonstrated","text":"<ul> <li>AI-Driven Navigation: Autonomous web browsing with natural language instructions</li> <li>Visual Processing: Optional visual analysis for enhanced accuracy</li> <li>Viewport Control: Custom browser window and viewport dimensions</li> <li>Session Management: Persistent browser sessions across test steps</li> <li>Multi-Domain Support: Control which domains the agent can navigate</li> <li>Headless/Headful Modes: Run with or without visible browser window</li> <li>LLM Flexibility: Support for OpenAI and Anthropic models</li> <li>Data Extraction: Extract structured data from web pages</li> </ul>"},{"location":"examples/browser-testing/#prerequisites","title":"Prerequisites","text":"<p>Before using the browser plugin, you need:</p> <ol> <li>Browser-use installed: The plugin will attempt to install it automatically</li> <li>LLM API Key: Either OpenAI or Anthropic API key</li> <li>Chrome/Chromium: Installed on your system (handled by Playwright)</li> </ol> <pre><code># For OpenAI\nexport OPENAI_API_KEY=sk-your-key-here\n\n# For Anthropic\nexport ANTHROPIC_API_KEY=sk-ant-your-key-here\n</code></pre>"},{"location":"examples/browser-testing/#updating-browser-use","title":"Updating browser-use","text":"<p>To update browser-use to the latest version (e.g., 0.4.2), run:</p> <pre><code># Update browser-use\npip install --upgrade browser-use\n\n# Or install a specific version\npip install browser-use==0.4.2\n\n# Verify the installation\npython3 -c \"import browser_use; print(f'browser-use version: {browser_use.__version__}')\"\n</code></pre> <p>Note: The browser plugin uses the Python <code>browser-use</code> library installed on your system. Updates to browser-use may introduce new features or breaking changes - check the browser-use releases for details.</p>"},{"location":"examples/browser-testing/#basic-configuration","title":"Basic Configuration","text":"<pre><code>plugin: browser\nconfig:\n  task: \"Your browser task here\" # Required: instruction for the AI agent\n  llm: # Required: LLM configuration\n    provider: \"openai\" # or \"anthropic\"\n    model: \"gpt-4o\" # or other supported models\n    config:\n      OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n  headless: true # Optional: run without visible browser\n  timeout: \"2m\" # Optional: execution timeout\n</code></pre>"},{"location":"examples/browser-testing/#simple-example","title":"Simple Example","text":"<pre><code>name: \"Basic Browser Test\"\nversion: \"v1.0.0\"\n\ntests:\n  - name: \"Check website content\"\n    steps:\n      - name: \"Visit and analyze homepage\"\n        plugin: browser\n        config:\n          task: \"Navigate to https://example.com and tell me what the main heading says\"\n          llm:\n            provider: \"openai\"\n            model: \"gpt-4o\"\n            config:\n              OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n          headless: true\n          timeout: \"1m\"\n        save:\n          - json_path: \".result\"\n            as: \"page_analysis\"\n          - json_path: \".success\"\n            as: \"success\"\n        assertions:\n          - type: \"json_path\"\n            path: \".success\"\n            expected: true\n\n      - name: \"Log results\"\n        plugin: log\n        config:\n          message: \"Page analysis: {{ page_analysis }}\"\n</code></pre>"},{"location":"examples/browser-testing/#comprehensive-configuration-example","title":"Comprehensive Configuration Example","text":"<pre><code>name: \"Browser Plugin Feature Demo\"\nversion: \"v1.0.0\"\n\nvars:\n  target_site: \"https://docs.rocketship.sh\"\n  search_term: \"installation\"\n\ntests:\n  - name: \"Complete browser automation workflow\"\n    steps:\n      # Basic navigation with custom viewport\n      - name: \"Mobile viewport test\"\n        plugin: browser\n        config:\n          task: |\n            Navigate to {{ .vars.target_site }} and describe:\n            1. The main navigation menu\n            2. How the layout appears on mobile\n            3. Any responsive design elements\n          llm:\n            provider: \"openai\"\n            model: \"gpt-4o\"\n            config:\n              OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n          executor_type: \"python\"\n          headless: false\n          timeout: \"3m\"\n          max_steps: 5\n          use_vision: true\n          viewport:\n            width: 375\n            height: 667\n          browser_type: \"chromium\"\n        save:\n          - json_path: \".result\"\n            as: \"mobile_analysis\"\n          - json_path: \".success\"\n            as: \"mobile_success\"\n          - json_path: \".session_id\"\n            as: \"session_id\"\n\n      # Desktop viewport with domain restrictions\n      - name: \"Desktop search test\"\n        plugin: browser\n        config:\n          task: |\n            1. Navigate to {{ .vars.target_site }}\n            2. Find and use the search functionality\n            3. Search for \"{{ .vars.search_term }}\"\n            4. Tell me what results you found\n          llm:\n            provider: \"openai\"\n            model: \"gpt-4o\"\n            config:\n              OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n          headless: false\n          timeout: \"2m\"\n          max_steps: 10\n          use_vision: true\n          viewport:\n            width: 1920\n            height: 1080\n          allowed_domains:\n            - \"docs.rocketship.sh\"\n            - \"rocketship.sh\"\n        save:\n          - json_path: \".result\"\n            as: \"search_results\"\n          - json_path: \".extracted_data\"\n            as: \"extracted_info\"\n\n      # Data extraction example\n      - name: \"Extract structured data\"\n        plugin: browser\n        config:\n          task: |\n            Navigate to https://jsonplaceholder.typicode.com/users\n            Extract the first 3 users' information including:\n            - Name\n            - Email\n            - Company name\n            Return as structured JSON data\n          llm:\n            provider: \"openai\"\n            model: \"gpt-4o\"\n            config:\n              OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n          headless: true\n          timeout: \"2m\"\n          use_vision: false # Text extraction doesn't need vision\n        save:\n          - json_path: \".result\"\n            as: \"user_data\"\n          - json_path: \".success\"\n            as: \"extraction_success\"\n\n      # Log comprehensive results\n      - name: \"Log all results\"\n        plugin: log\n        config:\n          message: |\n            \ud83c\udf10 Browser Automation Results:\n\n            \ud83d\udcf1 Mobile Analysis:\n            {{ mobile_analysis }}\n\n            \ud83d\udd0d Search Results:\n            {{ search_results }}\n\n            \ud83d\udcca Extracted Data:\n            {{ user_data }}\n\n            \u2705 Success Status: Mobile={{ mobile_success }}, Extraction={{ extraction_success }}\n</code></pre>"},{"location":"examples/browser-testing/#configuration-options","title":"Configuration Options","text":""},{"location":"examples/browser-testing/#required-fields","title":"Required Fields","text":"Field Description Example <code>task</code> Natural language instruction for the browser agent <code>\"Navigate to site and click login\"</code> <code>llm</code> LLM configuration object See LLM Configuration section"},{"location":"examples/browser-testing/#optional-fields","title":"Optional Fields","text":"Field Type Default Description <code>executor_type</code> string <code>\"python\"</code> Executor type (only python supported) <code>timeout</code> string <code>\"5m\"</code> Execution timeout (e.g., \"30s\", \"2m\", \"1h\") <code>max_steps</code> integer 50 Maximum browser automation steps <code>browser_type</code> string <code>\"chromium\"</code> Browser to use: chromium, chrome, edge <code>headless</code> boolean true Run without visible browser window <code>use_vision</code> boolean true Enable visual processing for better accuracy <code>session_id</code> string - Browser session ID for persistence <code>save_screenshots</code> boolean false Save screenshots during execution <code>allowed_domains</code> array [] Restrict navigation to specific domains <code>viewport</code> object 1920x1080 Browser viewport dimensions"},{"location":"examples/browser-testing/#llm-configuration","title":"LLM Configuration","text":"<p>The <code>llm</code> object configures which AI model to use:</p> <pre><code>llm:\n  provider: \"openai\" # or \"anthropic\"\n  model: \"gpt-4o\" # Model name\n  config:\n    # Provider-specific API keys\n    OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    # OR for Anthropic:\n    # ANTHROPIC_API_KEY: \"{{ .env.ANTHROPIC_API_KEY }}\"\n</code></pre> <p>Supported models: - OpenAI: <code>gpt-4o</code>, <code>gpt-4</code>, <code>gpt-3.5-turbo</code> - Anthropic: <code>claude-3-opus</code>, <code>claude-3-sonnet</code>, <code>claude-3-haiku</code></p>"},{"location":"examples/browser-testing/#viewport-configuration","title":"Viewport Configuration","text":"<p>Control browser window and viewport dimensions:</p> <pre><code>viewport:\n  width: 1280  # Width in pixels\n  height: 720  # Height in pixels\n</code></pre> <p>Common viewport sizes: - Mobile: 375x667 (iPhone), 360x640 (Android) - Tablet: 768x1024 (iPad) - Desktop: 1920x1080, 1366x768, 1280x720</p> <p>Note: In headless mode, only the viewport affects rendering. In headful mode, both the browser window and viewport are set to these dimensions.</p>"},{"location":"examples/browser-testing/#response-structure","title":"Response Structure","text":"<p>The browser plugin returns a JSON response with:</p> <pre><code>{\n  \"success\": true,\n  \"result\": \"AI agent's description of what it found/did\",\n  \"session_id\": \"unique-session-identifier\",\n  \"steps\": [...], // Detailed automation steps\n  \"screenshots\": [...], // If save_screenshots is true\n  \"extracted_data\": {...}, // Any structured data extracted\n  \"error\": \"Error message if success is false\"\n}\n</code></pre>"},{"location":"examples/browser-testing/#save-operations","title":"Save Operations","text":""},{"location":"examples/browser-testing/#basic-data-extraction","title":"Basic Data Extraction","text":"<pre><code>save:\n  - json_path: \".result\"\n    as: \"browser_output\"\n  - json_path: \".success\"\n    as: \"execution_success\"\n</code></pre>"},{"location":"examples/browser-testing/#complete-response-capture","title":"Complete Response Capture","text":"<pre><code>save:\n  - json_path: \".result\"\n    as: \"ai_analysis\"\n  - json_path: \".session_id\"\n    as: \"browser_session\"\n  - json_path: \".extracted_data\"\n    as: \"structured_data\"\n  - json_path: \".steps\"\n    as: \"automation_steps\"\n  - json_path: \".screenshots\"\n    as: \"screenshots_list\"\n</code></pre>"},{"location":"examples/browser-testing/#optional-fields_1","title":"Optional Fields","text":"<pre><code>save:\n  - json_path: \".result\"\n    as: \"required_result\"\n  - json_path: \".optional_metadata\"\n    as: \"extra_info\"\n    required: false # Won't fail if missing\n</code></pre>"},{"location":"examples/browser-testing/#assertions","title":"Assertions","text":"<p>Validate browser automation results:</p> <pre><code>assertions:\n  - type: \"json_path\"\n    path: \".success\"\n    expected: true\n</code></pre>"},{"location":"examples/browser-testing/#template-variables","title":"Template Variables","text":"<p>Use data from previous steps in browser tasks:</p> <pre><code># From previous HTTP responses\ntask: \"Navigate to {{ api_base_url }} and login with {{ test_credentials }}\"\n\n# From configuration variables\ntask: \"Go to {{ .vars.target_site }} and search for {{ .vars.search_query }}\"\n\n# Multi-line tasks with context\ntask: |\n  Previous analysis found: {{ previous_result }}\n  Now navigate to the contact page and:\n  1. Fill out the form with this data\n  2. Submit and capture the confirmation\n</code></pre>"},{"location":"examples/browser-testing/#use-cases","title":"Use Cases","text":""},{"location":"examples/browser-testing/#web-application-testing","title":"Web Application Testing","text":"<pre><code>- name: \"Test login flow\"\n  plugin: browser\n  config:\n    task: |\n      1. Navigate to {{ app_url }}/login\n      2. Enter username: testuser@example.com\n      3. Enter password: testpass123\n      4. Click login button\n      5. Verify you see the dashboard\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    headless: false\n    timeout: \"2m\"\n</code></pre>"},{"location":"examples/browser-testing/#data-scraping","title":"Data Scraping","text":"<pre><code>- name: \"Extract product information\"\n  plugin: browser\n  config:\n    task: |\n      Navigate to {{ product_url }}\n      Extract:\n      - Product name\n      - Price\n      - Availability\n      - Description\n      Return as JSON: {\"name\": \"\", \"price\": \"\", \"available\": true/false, \"description\": \"\"}\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    use_vision: true # Helps with complex layouts\n</code></pre>"},{"location":"examples/browser-testing/#visual-regression-testing","title":"Visual Regression Testing","text":"<pre><code>- name: \"Check page layout\"\n  plugin: browser\n  config:\n    task: |\n      Navigate to {{ page_url }}\n      Analyze the visual layout and report:\n      1. Any broken elements\n      2. Missing images\n      3. Layout issues\n      4. Text overflow problems\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    use_vision: true\n    save_screenshots: true\n    viewport:\n      width: 1920\n      height: 1080\n</code></pre>"},{"location":"examples/browser-testing/#multi-step-form-testing","title":"Multi-Step Form Testing","text":"<pre><code>- name: \"Complete multi-page form\"\n  plugin: browser\n  config:\n    task: |\n      1. Go to {{ form_url }}\n      2. Page 1: Fill personal information (John Doe, john@example.com)\n      3. Click Next\n      4. Page 2: Select \"Premium\" plan\n      5. Click Next\n      6. Page 3: Enter payment details (use test card 4111111111111111)\n      7. Submit form\n      8. Capture confirmation number\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    max_steps: 20\n    timeout: \"5m\"\n</code></pre>"},{"location":"examples/browser-testing/#responsive-design-testing","title":"Responsive Design Testing","text":"<pre><code>- name: \"Test responsive design\"\n  plugin: browser\n  config:\n    task: \"Navigate to {{ site_url }} and describe how the navigation menu behaves\"\n    llm:\n      provider: \"openai\"\n      model: \"gpt-4o\"\n      config:\n        OPENAI_API_KEY: \"{{ .env.OPENAI_API_KEY }}\"\n    headless: false\n    viewport:\n      width: 375  # Mobile width\n      height: 667\n</code></pre>"},{"location":"examples/browser-testing/#running-examples","title":"Running Examples","text":"<pre><code># Run basic browser test\nrocketship run -af examples/browser-testing/rocketship.yaml\n\n# Run with OpenAI API key\nOPENAI_API_KEY=your-key rocketship run -af examples/browser-testing/rocketship.yaml\n\n# Run viewport comparison test\nOPENAI_API_KEY=your-key rocketship run -af examples/browser-testing/viewport-test.yaml\n\n# Run in debug mode to see browser interactions\nOPENAI_API_KEY=your-key ROCKETSHIP_LOG=DEBUG rocketship run -af examples/browser-testing/rocketship.yaml\n</code></pre>"},{"location":"examples/browser-testing/#best-practices","title":"Best Practices","text":""},{"location":"examples/browser-testing/#1-clear-specific-instructions","title":"1. Clear, Specific Instructions","text":"<pre><code># Good: Specific, step-by-step instructions\ntask: |\n  1. Navigate to https://example.com/products\n  2. Click on \"Electronics\" category\n  3. Find the first laptop listing\n  4. Extract the price and product name\n\n# Avoid: Vague instructions\ntask: \"Go to the website and find laptop prices\"\n</code></pre>"},{"location":"examples/browser-testing/#2-use-appropriate-timeouts","title":"2. Use Appropriate Timeouts","text":"<pre><code># Quick navigation tasks\ntimeout: \"30s\"\n\n# Complex multi-step processes\ntimeout: \"5m\"\n\n# Data extraction from large pages\ntimeout: \"2m\"\n</code></pre>"},{"location":"examples/browser-testing/#3-choose-headless-mode-wisely","title":"3. Choose Headless Mode Wisely","text":"<pre><code># Use headless for:\n# - CI/CD pipelines\n# - Data extraction\n# - High-volume testing\nheadless: true\n\n# Use headful for:\n# - Debugging\n# - Visual testing\n# - Development\nheadless: false\n</code></pre>"},{"location":"examples/browser-testing/#4-optimize-vision-usage","title":"4. Optimize Vision Usage","text":"<pre><code># Enable for visual tasks\nuse_vision: true # Layout testing, visual elements\n\n# Disable for text-only tasks\nuse_vision: false # Form filling, text extraction\n</code></pre>"},{"location":"examples/browser-testing/#5-control-navigation-scope","title":"5. Control Navigation Scope","text":"<pre><code># Restrict to specific domains for security\nallowed_domains:\n  - \"myapp.com\"\n  - \"api.myapp.com\"\n  - \"cdn.myapp.com\"\n</code></pre>"},{"location":"examples/browser-testing/#6-handle-dynamic-content","title":"6. Handle Dynamic Content","text":"<pre><code>task: |\n  1. Navigate to {{ dynamic_url }}\n  2. Wait for the loading spinner to disappear\n  3. Wait for the content section to be visible\n  4. Then extract the data\nmax_steps: 10 # Allow enough steps for waiting\n</code></pre>"},{"location":"examples/browser-testing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/browser-testing/#common-issues","title":"Common Issues","text":"<p>\"Browser automation failed: Python executor not available\" - The plugin will attempt to install browser-use automatically - Ensure Python 3.8+ is installed on your system - Check logs for specific installation errors</p> <p>\"Failed to launch browser\" - Ensure Chrome/Chromium is installed - For headless mode on servers, install: <code>apt-get install chromium-browser</code> - Check if another browser instance is using the same profile</p> <p>\"Viewport not changing\" - Viewport settings only work with headless=false for window size - The viewport always affects page rendering - Check that viewport values are integers, not strings</p> <p>\"Navigation blocked\" - Check <code>allowed_domains</code> configuration - Some sites block automation - try with <code>use_vision: true</code> - Increase <code>max_steps</code> for complex navigation</p> <p>\"Empty or unclear results\" - Make browser task instructions more specific - Enable vision with <code>use_vision: true</code> for better accuracy - Check if the page loaded completely before extraction - Increase timeout for slow-loading pages</p> <p>\"Session not persisting\" - Save and reuse <code>session_id</code> between steps - Browser sessions are cleared after each test by default - Use the same <code>browser_type</code> across steps</p>"},{"location":"examples/browser-testing/#debug-mode","title":"Debug Mode","text":"<p>Run with debug logging to see detailed browser interactions:</p> <pre><code>ROCKETSHIP_LOG=DEBUG rocketship run -af your-test.yaml\n</code></pre> <p>This will show: - Browser launch commands - Page navigation details - AI agent decisions - Screenshot captures (if enabled)</p> <p>The browser plugin enables sophisticated web testing scenarios that combine the flexibility of AI-driven automation with the reliability of structured test frameworks, making it ideal for testing modern web applications with dynamic content and complex interactions.</p>"},{"location":"examples/config-variables/","title":"Configuration Variables Example","text":"<p>This example demonstrates how to use configuration variables in Rocketship test suites. Configuration variables allow you to parameterize your tests, making them reusable across different environments and configurations.</p>"},{"location":"examples/config-variables/#key-features-demonstrated","title":"Key Features Demonstrated","text":"<ul> <li>Configuration Variables: Define reusable variables in the <code>vars</code> section using <code>{{ .vars.variable_name }}</code></li> <li>Runtime Variables: Use variables generated during test execution using <code>{{ variable_name }}</code></li> <li>Nested Variables: Support for nested structures like <code>{{ .vars.auth.token }}</code></li> <li>Mixed Variables: Combine config and runtime variables in the same test</li> <li>CLI Overrides: Override config variables from the command line</li> <li>Variable Files: Load variables from external files</li> </ul> <p>For information about environment variables, see the Environment Variables guide.</p>"},{"location":"examples/config-variables/#configuration-variables-section","title":"Configuration Variables Section","text":"<pre><code>vars:\n  base_url: \"https://tryme.rocketship.sh\"\n  environment: \"staging\"\n  timeout: 2\n  auth:\n    header_name: \"X-API-Key\"\n    token: \"test-api-key-123\"\n  book:\n    title: \"The Go Programming Language\"\n    author: \"Alan Donovan\"\n    isbn: \"978-0134190440\"\ntests: ...\n</code></pre>"},{"location":"examples/config-variables/#variable-usage-patterns","title":"Variable Usage Patterns","text":""},{"location":"examples/config-variables/#1-basic-config-variables","title":"1. Basic Config Variables","text":"<pre><code>- name: \"Create book\"\n  plugin: \"http\"\n  config:\n    method: \"POST\"\n    url: \"{{ .vars.base_url }}/books\"\n    headers:\n      \"{{ .vars.auth.header_name }}\": \"{{ .vars.auth.token }}\"\n</code></pre>"},{"location":"examples/config-variables/#2-mixed-config-and-runtime-variables","title":"2. Mixed Config and Runtime Variables","text":"<pre><code>- name: \"Get book\"\n  plugin: \"http\"\n  config:\n    url: \"{{ .vars.base_url }}/books/{{ book_id }}\" # Config + Runtime\n  assertions:\n    - type: \"json_path\"\n      path: \".environment\"\n      expected: \"{{ .vars.environment }}\" # Config variable\n    - type: \"json_path\"\n      path: \".id\"\n      expected: \"{{ book_id }}\" # Runtime variable (from save)\n</code></pre>"},{"location":"examples/config-variables/#3-config-variables-in-plugin-configuration","title":"3. Config Variables in Plugin Configuration","text":"<pre><code>- name: \"Wait with config timeout\"\n  plugin: \"delay\"\n  config:\n    duration: \"{{ .vars.timeout }}s\"\n</code></pre>"},{"location":"examples/config-variables/#running-the-example","title":"Running the Example","text":""},{"location":"examples/config-variables/#basic-usage","title":"Basic Usage","text":"<pre><code># Run with default variables\nrocketship run -af examples/config-variables/rocketship.yaml\n</code></pre>"},{"location":"examples/config-variables/#cli-variable-overrides","title":"CLI Variable Overrides","text":"<pre><code># Override single variables\nrocketship run -af examples/config-variables/rocketship.yaml \\\n  --var base_url=https://api.production.com \\\n  --var environment=production\n\n# Override nested variables\nrocketship run -af examples/config-variables/rocketship.yaml \\\n  --var auth.token=prod-api-key-456 \\\n  --var book.title=\"Advanced Go Programming\"\n</code></pre>"},{"location":"examples/config-variables/#using-variable-files","title":"Using Variable Files","text":"<p>Create a <code>prod-vars.yaml</code> file:</p> <pre><code>base_url: \"https://api.production.com\"\nenvironment: \"production\"\nauth:\n  token: \"prod-api-key-456\"\ntimeout: 60\n</code></pre> <p>Then run:</p> <pre><code>rocketship run -af examples/config-variables/rocketship.yaml --var-file prod-vars.yaml\n</code></pre>"},{"location":"examples/config-variables/#variable-precedence","title":"Variable Precedence","text":"<p>Variables are resolved in this order (highest to lowest precedence):</p> <ol> <li>CLI Variables (<code>--var key=value</code>)</li> <li>Variable Files (<code>--var-file vars.yaml</code>)</li> <li>YAML vars section (built into test file)</li> </ol>"},{"location":"examples/config-variables/#best-practices","title":"Best Practices","text":""},{"location":"examples/config-variables/#1-clear-variable-naming","title":"1. Clear Variable Naming","text":"<p>Use descriptive names that indicate purpose:</p> <pre><code>vars:\n  api_base_url: \"https://api.staging.com\"\n  max_retry_count: 3\n  test_user_email: \"test@example.com\"\n</code></pre>"},{"location":"examples/config-variables/#2-environment-specific-configurations","title":"2. Environment-Specific Configurations","text":"<p>Structure variables for easy environment switching:</p> <pre><code>vars:\n  environment: \"staging\"\n  api:\n    base_url: \"https://api.staging.com\"\n    timeout: 30\n  database:\n    host: \"db.staging.com\"\n    port: 5432\n</code></pre>"},{"location":"examples/config-variables/#3-separate-config-from-runtime","title":"3. Separate Config from Runtime","text":"<ul> <li>Config variables: Use <code>{{ .vars.* }}</code> for environment/configuration values</li> <li>Runtime variables: Use <code>{{ variable }}</code> for values captured during test execution</li> </ul>"},{"location":"examples/config-variables/#4-variable-files-for-environments","title":"4. Variable Files for Environments","text":"<p>Create separate variable files for each environment:</p> <ul> <li><code>vars/staging.yaml</code></li> <li><code>vars/production.yaml</code></li> <li><code>vars/development.yaml</code></li> </ul>"},{"location":"examples/config-variables/#variable-types-supported","title":"Variable Types Supported","text":"<ul> <li>Strings: <code>\"value\"</code></li> <li>Numbers: <code>42</code>, <code>3.14</code></li> <li>Booleans: <code>true</code>, <code>false</code></li> <li>Objects: Nested key-value structures</li> <li>Arrays: Lists of values</li> </ul>"},{"location":"examples/config-variables/#integration-with-test-flow","title":"Integration with Test Flow","text":"<p>The configuration variables example demonstrates a complete CRUD flow:</p> <ol> <li>Create a book with config variables for API endpoint and auth</li> <li>Read the book using mixed config and runtime variables</li> <li>Update the book with runtime data from previous steps</li> <li>Delete the book for cleanup</li> </ol> <p>This pattern shows how config variables work seamlessly with Rocketship's existing runtime variable system from <code>save</code> blocks.</p>"},{"location":"examples/custom-scripting/","title":"Custom Scripting - JavaScript Integration","text":"<p>This example demonstrates how to use custom scripting in Rocketship test suites. The script plugin allows you to execute custom JavaScript code within your test workflows, enabling complex data processing, validation, and business logic that goes beyond simple HTTP assertions.</p>"},{"location":"examples/custom-scripting/#key-features-demonstrated","title":"Key Features Demonstrated","text":"<ul> <li>Inline JavaScript: Execute scripts directly in your YAML test files</li> <li>External JavaScript Files: Reference external <code>.js</code> files for complex logic</li> <li>State Integration: Access and modify test state between HTTP and script steps</li> <li>Configuration Variables: Access config variables from script code</li> <li>Bidirectional Data Flow: Pass data from HTTP \u2192 Script \u2192 HTTP seamlessly</li> <li>Built-in Functions: Use <code>save()</code> and <code>assert()</code> functions</li> <li>Business Logic: Implement complex data validation and transformation</li> </ul>"},{"location":"examples/custom-scripting/#script-plugin-configuration","title":"Script Plugin Configuration","text":"<p>The script plugin supports two execution modes:</p>"},{"location":"examples/custom-scripting/#inline-scripts","title":"Inline Scripts","text":"<pre><code>- name: \"Process data with inline JavaScript\"\n  plugin: \"script\"\n  config:\n    language: \"javascript\"\n    script: |\n      // Access config variables\n      let apiUrl = vars.api_url;\n\n      // Access state from previous steps\n      let userName = state.user_name;\n\n      // Process and save data\n      let processedName = state.user_name.toUpperCase();\n      save(\"processed_name\", processedName);\n\n      // Validate data\n      assert(state.user_name, \"User name must be present\");\n</code></pre>"},{"location":"examples/custom-scripting/#external-javascript-files","title":"External JavaScript Files","text":"<pre><code>- name: \"Process data with external file\"\n  plugin: \"script\"\n  config:\n    language: \"javascript\"\n    file: \"examples/custom-scripting/validate-and-process.js\"\n</code></pre>"},{"location":"examples/custom-scripting/#complete-integration-example","title":"Complete Integration Example","text":"<p>The example demonstrates a complete HTTP \u2194 Script integration workflow:</p> <pre><code>name: \"Custom Scripting Demo - HTTP\u2194Script State Integration\"\nvars:\n  api_url: \"https://tryme.rocketship.sh\"\n  max_retries: 3\n  user_name: \"test_user\"\n\ntests:\n  - name: \"Complete HTTP and Script State Integration\"\n    steps:\n      # 1. HTTP: Create initial data\n      - name: \"HTTP Step 1 - Create Animal Data\"\n        plugin: \"http\"\n        config:\n          method: \"POST\"\n          url: \"{{ .vars.api_url }}/animals\"\n          body: |\n            {\n              \"name\": \"African Elephant\",\n              \"species\": \"Loxodonta africana\",\n              \"habitat\": \"Savanna\",\n              \"weight_kg\": 6000,\n              \"conservation_status\": \"Endangered\"\n            }\n        save:\n          - json_path: \".id\"\n            as: \"animal_id\"\n          - json_path: \".name\"\n            as: \"animal_name\"\n\n      # 2. Script: Process HTTP data\n      - name: \"Script Step 1 - Initial Processing\"\n        plugin: \"script\"\n        config:\n          language: \"javascript\"\n          script: |\n            // Access config variables and HTTP data\n            let apiUrl = vars.api_url;\n            let userName = vars.user_name;\n            let animalName = state.animal_name;\n            let animalId = state.animal_id;\n\n            // Process user and config data\n            let processedUserName = vars.user_name.toUpperCase();\n            let animalWeight = parseInt(state.animal_weight);\n            let weightCategory = animalWeight &gt; 1000 ? \"large\" : \"medium\";\n\n            // Save processed results for next steps\n            save(\"processed_user_name\", processedUserName);\n            save(\"weight_category\", weightCategory);\n\n      # 3. Script: External file processing\n      - name: \"Script Step 2 - External File Processing\"\n        plugin: \"script\"\n        config:\n          language: \"javascript\"\n          file: \"examples/custom-scripting/validate-and-process.js\"\n\n      # 4. HTTP: Use script data\n      - name: \"HTTP Step 2 - Create Assessment\"\n        plugin: \"http\"\n        config:\n          method: \"POST\"\n          url: \"{{ .vars.api_url }}/animals/assessments\"\n          headers:\n            X-Processed-By: \"{{ processed_user_name }}\"\n          body: |\n            {\n              \"animal_id\": \"{{ animal_id }}\",\n              \"category\": \"{{ animal_category }}\",\n              \"score\": {{ animal_score }},\n              \"weight_category\": \"{{ weight_category }}\"\n            }\n</code></pre>"},{"location":"examples/custom-scripting/#built-in-functions","title":"Built-in Functions","text":""},{"location":"examples/custom-scripting/#savekey-value","title":"<code>save(key, value)</code>","text":"<p>Save data to the test state for use in subsequent steps:</p> <pre><code>// Save simple values\nsave(\"user_count\", \"42\");\nsave(\"status\", \"active\");\n\n// Save complex data as JSON\nconst profile = { name: \"John\", age: 30 };\nsave(\"user_profile\", JSON.stringify(profile));\n</code></pre>"},{"location":"examples/custom-scripting/#assertcondition-message","title":"<code>assert(condition, message)</code>","text":"<p>Validate data and fail the test if conditions aren't met:</p> <pre><code>// Basic assertions\nassert(state.user_id, \"User ID must be present\");\nassert(state.score &gt; 0, \"Score must be positive\");\n\n// Complex validations\nassert(state.email.includes(\"@\"), \"Email must be valid\");\nassert(Array.isArray(JSON.parse(state.items)), \"Items must be an array\");\n</code></pre>"},{"location":"examples/custom-scripting/#state-and-variable-access","title":"State and Variable Access","text":""},{"location":"examples/custom-scripting/#configuration-variables","title":"Configuration Variables","text":"<p>Access variables defined in the <code>vars</code> section:</p> <pre><code>// Simple variables\nlet apiUrl = vars.api_url;\nlet timeout = vars.timeout;\n\n// Nested variables\nlet authToken = vars.auth.token;\nlet dbHost = vars.database.host;\n</code></pre>"},{"location":"examples/custom-scripting/#test-state","title":"Test State","text":"<p>Access data saved from previous HTTP or script steps:</p> <pre><code>// Data from HTTP responses\nlet userId = state.user_id;        // From save: json_path: \".id\"\nlet userName = state.user_name;    // From save: json_path: \".name\"\n\n// Data from previous scripts\nlet processed = state.processed_flag;  // From save(\"processed_flag\", \"true\")\nlet score = parseInt(state.user_score); // Convert saved strings to numbers\n</code></pre>"},{"location":"examples/custom-scripting/#external-javascript-files_1","title":"External JavaScript Files","text":"<p>For complex logic, use external JavaScript files:</p> <pre><code>// validate-and-process.js\n\n// Validate required data\nif (!state.animal_name || !state.animal_species) {\n    assert(false, \"Missing required animal data\");\n}\n\n// Complex business logic\nlet animalCategory = \"unknown\";\nconst domesticAnimals = [\"dog\", \"cat\", \"horse\"];\nconst wildAnimals = [\"lion\", \"tiger\", \"elephant\", \"bear\"];\n\nif (domesticAnimals.some(animal =&gt; state.animal_name.toLowerCase().includes(animal))) {\n    animalCategory = \"domestic\";\n} else if (wildAnimals.some(animal =&gt; state.animal_name.toLowerCase().includes(animal))) {\n    animalCategory = \"wild\";\n} else {\n    animalCategory = \"exotic\";\n}\n\n// Calculate scores\nlet animalScore = state.animal_name.length + state.animal_species.length;\nif (animalCategory === \"wild\") animalScore += 10;\n\n// Generate recommendations\nlet recommendations = [];\nif (animalCategory === \"domestic\") {\n    recommendations.push(\"suitable_for_families\");\n} else if (animalCategory === \"wild\") {\n    recommendations.push(\"observe_from_distance\");\n}\n\n// Save results for HTTP steps\nsave(\"animal_category\", animalCategory);\nsave(\"animal_score\", animalScore.toString());\nsave(\"recommendations_count\", recommendations.length.toString());\n\n// Save individual recommendations for template access\nrecommendations.forEach((rec, index) =&gt; {\n    save(`recommendation_${index + 1}`, rec);\n});\n</code></pre>"},{"location":"examples/custom-scripting/#running-the-example","title":"Running the Example","text":"<pre><code># Run the complete custom scripting example\nrocketship run -af examples/custom-scripting/rocketship.yaml\n</code></pre>"},{"location":"examples/custom-scripting/#understanding-the-data-flow","title":"Understanding the Data Flow","text":"<p>The example demonstrates a complete data processing pipeline:</p> <ol> <li>HTTP Step 1: Create animal data via API, save ID and attributes</li> <li>Script Step 1: Process config variables and HTTP data, create derived values</li> <li>Script Step 2: External file performs complex business logic and categorization</li> <li>HTTP Step 2: Use script-processed data to create a comprehensive assessment</li> <li>Script Step 3: Final validation ensures all data flows worked correctly</li> </ol> <p>Each step builds on the previous ones, showing:</p> <ul> <li>HTTP \u2192 Script: Pass API response data to JavaScript for processing</li> <li>Script \u2192 Script: Share state between inline and external scripts</li> <li>Script \u2192 HTTP: Use processed data in API requests</li> <li>Config Integration: Mix configuration variables with runtime processing</li> </ul>"},{"location":"examples/custom-scripting/#use-cases-for-custom-scripting","title":"Use Cases for Custom Scripting","text":""},{"location":"examples/custom-scripting/#data-transformation","title":"Data Transformation","text":"<pre><code>// Transform API responses\nlet rawData = JSON.parse(state.api_response);\nlet transformedData = rawData.map(item =&gt; ({\n    id: item.identifier,\n    name: item.display_name.toUpperCase(),\n    active: item.status === \"enabled\"\n}));\nsave(\"transformed_data\", JSON.stringify(transformedData));\n</code></pre>"},{"location":"examples/custom-scripting/#complex-validations","title":"Complex Validations","text":"<pre><code>// Business rule validation\nlet orderData = JSON.parse(state.order_details);\nlet isValidOrder = orderData.items.length &gt; 0 &amp;&amp; \n                   orderData.total &gt; 0 &amp;&amp; \n                   orderData.customer_id;\n\nassert(isValidOrder, \"Order must have items, positive total, and customer ID\");\n\n// Multi-step validation logic\nif (orderData.total &gt; 1000) {\n    assert(orderData.approval_required, \"High-value orders require approval\");\n}\n</code></pre>"},{"location":"examples/custom-scripting/#dynamic-test-data-generation","title":"Dynamic Test Data Generation","text":"<pre><code>// Generate test data based on conditions\nlet testUsers = [];\nfor (let i = 0; i &lt; vars.user_count; i++) {\n    testUsers.push({\n        id: `user_${i}`,\n        email: `test${i}@example.com`,\n        role: i % 2 === 0 ? \"admin\" : \"user\"\n    });\n}\nsave(\"test_users\", JSON.stringify(testUsers));\n</code></pre>"},{"location":"examples/custom-scripting/#api-response-analysis","title":"API Response Analysis","text":"<pre><code>// Analyze API performance and content\nlet responseTime = parseInt(state.response_time_ms);\nlet responseSize = state.response_body.length;\n\nsave(\"performance_category\", \n     responseTime &lt; 100 ? \"fast\" : \n     responseTime &lt; 500 ? \"medium\" : \"slow\");\n\nassert(responseTime &lt; 2000, \"Response time must be under 2 seconds\");\nassert(responseSize &gt; 0, \"Response must not be empty\");\n</code></pre>"},{"location":"examples/custom-scripting/#best-practices","title":"Best Practices","text":""},{"location":"examples/custom-scripting/#1-keep-scripts-focused","title":"1. Keep Scripts Focused","text":"<p>Use scripts for data processing and validation, not for replacing HTTP operations:</p> <pre><code>// Good: Data processing\nlet processedData = state.raw_data.toUpperCase().trim();\nsave(\"clean_data\", processedData);\n\n// Avoid: HTTP operations (use http plugin instead)\n// Don't try to make HTTP requests from scripts\n</code></pre>"},{"location":"examples/custom-scripting/#2-use-external-files-for-complex-logic","title":"2. Use External Files for Complex Logic","text":"<p>Move complex business logic to external files:</p> <pre><code># Simple processing: inline\n- plugin: \"script\"\n  config:\n    script: 'save(\"doubled\", (parseInt(state.value) * 2).toString());'\n\n# Complex processing: external file\n- plugin: \"script\"\n  config:\n    file: \"scripts/complex-analysis.js\"\n</code></pre>"},{"location":"examples/custom-scripting/#3-clear-error-messages","title":"3. Clear Error Messages","text":"<p>Provide helpful assertion messages:</p> <pre><code>// Good: Descriptive messages\nassert(state.user_id, \"User ID is required for profile operations\");\nassert(state.email.includes(\"@\"), \"Email format validation failed\");\n\n// Poor: Vague messages\nassert(state.user_id, \"Missing data\");\n</code></pre>"},{"location":"examples/custom-scripting/#4-type-conversions","title":"4. Type Conversions","text":"<p>Remember that saved state is always strings:</p> <pre><code>// Convert types when needed\nlet count = parseInt(state.item_count);\nlet price = parseFloat(state.price);\nlet isActive = state.active === \"true\";\n\n// Save with explicit string conversion\nsave(\"calculated_total\", (price * count).toString());\n</code></pre> <p>The custom scripting plugin enables powerful data processing and validation workflows while maintaining the simplicity and clarity of Rocketship's declarative test approach.</p>"},{"location":"examples/environment-variables/","title":"Environment Variables","text":"<p>Access system environment variables in your tests using <code>{{ .env.VARIABLE_NAME }}</code> syntax.</p>"},{"location":"examples/environment-variables/#basic-usage","title":"Basic Usage","text":"<pre><code>- name: \"API request with environment variables\"\n  plugin: \"http\"\n  config:\n    method: \"POST\"\n    url: \"{{ .env.API_BASE_URL }}/users\"\n    headers:\n      \"Authorization\": \"Bearer {{ .env.API_TOKEN }}\"\n      \"X-User\": \"{{ .env.USER }}\"\n    body: |-\n      {\n        \"username\": \"{{ .env.USER }}\",\n        \"api_key\": \"{{ .env.API_KEY }}\"\n      }\n</code></pre>"},{"location":"examples/environment-variables/#sql-connections","title":"SQL Connections","text":"<pre><code>- name: \"Database query\"\n  plugin: \"sql\"\n  config:\n    driver: \"postgres\"\n    dsn: \"postgres://{{ .env.DB_USER }}:{{ .env.DB_PASSWORD }}@{{ .env.DB_HOST }}/{{ .env.DB_NAME }}\"\n    commands:\n      - \"SELECT * FROM users WHERE created_by = '{{ .env.USER }}';\"\n</code></pre>"},{"location":"examples/environment-variables/#script-integration","title":"Script Integration","text":"<p>Environment variables work in JavaScript code:</p> <pre><code>- name: \"Process environment data\"\n  plugin: \"script\"\n  config:\n    language: \"javascript\"\n    script: |\n      // Access environment variables\n      let systemUser = \"{{ .env.USER }}\";\n      let homeDir = \"{{ .env.HOME }}\";\n      let shell = \"{{ .env.SHELL }}\";\n\n      // Process and save for later steps\n      save(\"processed_user\", systemUser.toUpperCase());\n      save(\"user_home\", homeDir);\n      save(\"user_shell\", shell);\n</code></pre>"},{"location":"examples/environment-variables/#mixed-with-other-variables","title":"Mixed with Other Variables","text":"<pre><code>vars:\n  api_version: \"v1\"\n\ntests:\n  - name: \"Mixed variables\"\n    steps:\n      - name: \"Create resource\"\n        plugin: \"http\"\n        config:\n          url: \"{{ .env.API_BASE_URL }}/{{ .vars.api_version }}/resources\"\n          headers:\n            \"Authorization\": \"Bearer {{ .env.API_TOKEN }}\"\n        save:\n          - json_path: \".id\"\n            as: \"resource_id\"\n\n      - name: \"Get resource\"\n        plugin: \"http\"\n        config:\n          url: \"{{ .env.API_BASE_URL }}/{{ .vars.api_version }}/resources/{{ resource_id }}\"\n</code></pre>"},{"location":"examples/environment-variables/#escaping","title":"Escaping","text":"<p>Environment variables support handlebars escaping:</p> <pre><code>body: |-\n  {\n    \"user\": \"{{ .env.USER }}\",\n    \"docs\": \"Set \\\\{{ .env.API_KEY }} to configure\"\n  }\n</code></pre>"},{"location":"examples/environment-variables/#setting-environment-variables","title":"Setting Environment Variables","text":"<pre><code># Command line\nAPI_TOKEN=your_token rocketship run -af test.yaml\n\n# Export for session\nexport API_TOKEN=your_token\nexport DB_URL=postgres://user:pass@localhost/db\nrocketship run -af test.yaml\n</code></pre>"},{"location":"examples/environment-variables/#common-variables","title":"Common Variables","text":"<pre><code>\"{{ .env.USER }}\"         # Current username\n\"{{ .env.HOME }}\"         # Home directory\n\"{{ .env.API_KEY }}\"      # API key\n\"{{ .env.API_TOKEN }}\"    # Bearer token\n\"{{ .env.DATABASE_URL }}\" # Database connection\n\"{{ .env.NODE_ENV }}\"     # Environment name\n</code></pre> <p>Missing environment variables are treated as empty strings.</p>"},{"location":"examples/environment-variables/#working-examples","title":"Working Examples","text":"<p>See environment variables in action in these examples:</p> <pre><code># HTTP plugin with environment variables\nrocketship run -af examples/config-variables/rocketship.yaml\n\n# SQL plugin with environment variables\nrocketship run -af examples/sql-testing/rocketship.yaml\n\n# Script plugin with environment variables  \nrocketship run -af examples/custom-scripting/rocketship.yaml\n</code></pre> <p>These examples demonstrate: - Environment variables in HTTP headers and request bodies - Database connection strings using environment variables - JavaScript code processing environment variables - Mixed usage with config and runtime variables</p>"},{"location":"examples/handlebars-escaping/","title":"Handlebars Escaping","text":"<p>When your APIs or databases use handlebars syntax (<code>{{ }}</code>) for their own templating, you need a way to include literal handlebars in your test data without Rocketship trying to process them as variables. Rocketship provides unlimited-level handlebars escaping using backslashes.</p>"},{"location":"examples/handlebars-escaping/#variable-types","title":"Variable Types","text":"<p>Rocketship supports multiple types of variables:</p> <ul> <li>Config variables: <code>{{ .vars.variable_name }}</code> - Defined in the <code>vars</code> section</li> <li>Runtime variables: <code>{{ variable_name }}</code> - Generated during test execution (from <code>save</code> operations)</li> <li>Environment variables: <code>{{ .env.VARIABLE_NAME }}</code> - System environment variables</li> </ul> <p>All variable types support escaping using the same backslash syntax. For detailed information about environment variables, see the Environment Variables guide.</p>"},{"location":"examples/handlebars-escaping/#basic-escaping-syntax","title":"Basic Escaping Syntax","text":"<p>Use backslashes (<code>\\</code>) before handlebars to escape them:</p> <pre><code># Normal variable processing\n\"message\": \"Hello {{ user_name }}\"           # Processes as variable\n\n# Escaped handlebars (literal)\n\"template\": \"Use \\\\{{ user_id }} in API\"    # Outputs: Use {{ user_id }} in API\n</code></pre>"},{"location":"examples/handlebars-escaping/#unlimited-escape-levels","title":"Unlimited Escape Levels","text":"<p>Rocketship supports unlimited levels of backslash escaping using a mathematical algorithm:</p> <ul> <li>Odd number of backslashes: Produces literal handlebars</li> <li>Even number of backslashes: Processes variables with remaining backslashes</li> </ul>"},{"location":"examples/handlebars-escaping/#examples","title":"Examples","text":"<pre><code># 1 backslash (odd) \u2192 literal handlebars\n\"example1\": \"Template: \\\\{{ user_id }}\"\n# Output: Template: {{ user_id }}\n\n# 2 backslashes (even) \u2192 backslash + processed variable  \n\"example2\": \"Path: \\\\\\\\{{ .vars.api_path }}\"\n# Output: Path: \\staging/api\n\n# 3 backslashes (odd) \u2192 backslash + literal handlebars\n\"example3\": \"Docs: \\\\\\\\\\\\{{ variable_name }}\"\n# Output: Docs: \\{{ variable_name }}\n\n# 4 backslashes (even) \u2192 double backslash + processed variable\n\"example4\": \"Config: \\\\\\\\\\\\\\\\{{ .vars.environment }}\"\n# Output: Config: \\\\staging\n</code></pre>"},{"location":"examples/handlebars-escaping/#json-context-considerations","title":"JSON Context Considerations","text":"<p>When using escaped handlebars in JSON, remember that JSON has its own escaping rules. In YAML files, you may need to double backslashes:</p> <pre><code># In YAML block literal (recommended)\nbody: |-\n  {\n    \"instructions\": \"Use \\\\{{ user_id }} in your requests\",\n    \"template_guide\": \"Syntax: \\\\{{ variable_name }} for literals\"\n  }\n\n# In YAML quoted strings (requires more escaping)\nbody: |\n  {\n    \"instructions\": \"Use \\\\\\\\{{ user_id }} in your requests\"\n  }\n</code></pre>"},{"location":"examples/handlebars-escaping/#complete-working-example","title":"Complete Working Example","text":"<p>Here's a real example from the config-variables test suite:</p> <pre><code>name: \"Handlebars Escaping Demo\"\nversion: \"v1.0.0\"\n\nvars:\n  base_url: \"https://tryme.rocketship.sh\"\n  environment: \"staging\"\n\ntests:\n  - name: \"Config Variables Demo\"\n    steps:\n      - name: \"Demo handlebars escaping in JSON body\"\n        plugin: \"http\"\n        config:\n          method: \"POST\"\n          url: \"{{ .vars.base_url }}/books\"\n          headers:\n            \"Content-Type\": \"application/json\"\n          body: |-\n            {\n              \"title\": \"Handlebars Escaping Demo\",\n              \"author\": \"{{ .vars.environment }}\",\n              \"description\": \"Normal var: {{ .vars.environment }}, Escaped: \\\\{{ user_id }}\",\n              \"api_docs\": \"Use \\\\{{ user_id }} in your requests\",\n              \"template_guide\": \"Syntax: \\\\{{ variable_name }} for literals\",\n              \"mixed_example\": \"Real: {{ .vars.environment }}, Literal: \\\\{{ placeholder }}\"\n            }\n        assertions:\n          - type: \"status_code\"\n            expected: 200\n          - type: \"json_path\"\n            path: \".description\"\n            expected: \"Normal var: staging, Escaped: {{ user_id }}\"\n          - type: \"json_path\"\n            path: \".api_docs\"\n            expected: \"Use {{ user_id }} in your requests\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#sql-context-example","title":"SQL Context Example","text":"<p>Handlebars escaping also works in SQL statements:</p> <pre><code>- name: \"Demo handlebars escaping in SQL\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"{{ .vars.postgres_dsn }}\"\n    commands:\n      - |-\n        INSERT INTO users (name, instructions) \n        VALUES ('{{ .vars.test_user_name }}', 'Use \\\\{{ user_token }} for auth');\n  assertions:\n    - type: column_value\n      query_index: 0\n      row_index: 0\n      column: \"instructions\"\n      expected: \"Use {{ user_token }} for auth\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#common-use-cases","title":"Common Use Cases","text":""},{"location":"examples/handlebars-escaping/#1-api-documentation","title":"1. API Documentation","text":"<p>When testing APIs that return documentation containing template syntax:</p> <pre><code>\"help_text\": \"Use \\\\{{ user_id }} and \\\\{{ api_key }} in your requests\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#2-template-systems","title":"2. Template Systems","text":"<p>When testing systems that process their own templates:</p> <pre><code>\"mustache_template\": \"Hello \\\\{{ name }}, welcome to \\\\{{ site_name }}\"\n\"handlebars_template\": \"{{#each items}}\\\\{{ this.name }}{{/each}}\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#3-configuration-examples","title":"3. Configuration Examples","text":"<p>When testing APIs that return configuration examples:</p> <pre><code>\"config_example\": \"api_url: \\\\{{ environment.api_url }}\"\n\"yaml_template\": \"name: \\\\{{ project.name }}\\\\nversion: \\\\{{ project.version }}\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#4-code-generation","title":"4. Code Generation","text":"<p>When testing code generation APIs:</p> <pre><code>\"javascript_template\": \"const userId = \\\\{{ user.id }};\"\n\"go_template\": \"UserID: \\\\{{ .User.ID }}\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#how-it-works","title":"How It Works","text":"<p>Rocketship's escaping algorithm:</p> <ol> <li>Counts consecutive backslashes before <code>{{ }}</code></li> <li>Determines behavior based on count:</li> <li>Odd count: Treat as literal handlebars</li> <li>Even count: Process as variable</li> <li>Calculates remaining backslashes: <code>count / 2</code> (integer division)</li> <li>Outputs result with appropriate backslashes</li> </ol> <p>This mathematical approach enables unlimited nesting levels, giving you complete control over handlebars rendering.</p>"},{"location":"examples/handlebars-escaping/#best-practices","title":"Best Practices","text":""},{"location":"examples/handlebars-escaping/#1-use-block-literals-for-json","title":"1. Use Block Literals for JSON","text":"<p>Use YAML block literal syntax (<code>|-</code>) for cleaner JSON:</p> <pre><code>body: |-\n  {\n    \"template\": \"Use \\\\{{ variable }} here\"\n  }\n</code></pre>"},{"location":"examples/handlebars-escaping/#2-test-your-escaping","title":"2. Test Your Escaping","text":"<p>Always verify your escaping works by checking the actual output:</p> <pre><code>assertions:\n  - type: \"json_path\"\n    path: \".template\"\n    expected: \"Use {{ variable }} here\"  # Verify literal handlebars\n</code></pre>"},{"location":"examples/handlebars-escaping/#3-document-your-intent","title":"3. Document Your Intent","text":"<p>Add comments to clarify when you're using escaping:</p> <pre><code># This should output literal {{ user_id }}, not process as variable\n\"instructions\": \"Use \\\\{{ user_id }} in your API calls\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#4-start-simple","title":"4. Start Simple","text":"<p>Begin with single backslash escaping and only use multiple levels if needed:</p> <pre><code># Usually sufficient for most cases\n\"example\": \"Template: \\\\{{ variable }}\"\n</code></pre>"},{"location":"examples/handlebars-escaping/#running-the-examples","title":"Running the Examples","text":"<p>Test the handlebars escaping functionality:</p> <pre><code># Run config-variables example (includes escaping demo)\nrocketship run -af examples/config-variables/rocketship.yaml\n\n# Run SQL escaping example  \nrocketship run -af examples/sql-testing/rocketship.yaml\n</code></pre> <p>The examples demonstrate real-world usage of handlebars escaping in both HTTP and SQL contexts.</p>"},{"location":"examples/log-plugin/","title":"Log Plugin","text":"<p>The log plugin allows you to add custom logging messages to your test suites for debugging, monitoring, and progress tracking. Log messages appear in the CLI output during test execution.</p>"},{"location":"examples/log-plugin/#configuration","title":"Configuration","text":"<pre><code>plugin: log\nconfig:\n  message: \"Your log message here\"\n</code></pre>"},{"location":"examples/log-plugin/#basic-usage","title":"Basic Usage","text":"<pre><code>name: Basic Logging Example\ntests:\n  - name: Test with logging\n    steps:\n      - plugin: log\n        config:\n          message: \"Starting test execution\"\n\n      - plugin: http\n        config:\n          url: \"https://httpbin.org/get\"\n          method: \"GET\"\n\n      - plugin: log\n        config:\n          message: \"HTTP request completed\"\n</code></pre>"},{"location":"examples/log-plugin/#variable-support","title":"Variable Support","text":"<p>The log plugin supports all variable types including configuration variables, environment variables, and runtime variables:</p> <pre><code>name: Logging with Variables\nconfig:\n  session: \"test-session-123\"\ntests:\n  - name: Variable logging example\n    steps:\n      - plugin: log\n        config:\n          message: \"Starting test for session: {{ .vars.session }}\"\n\n      - plugin: http\n        config:\n          url: \"https://httpbin.org/get\"\n          method: \"GET\"\n        save:\n          - key: \"response_data\"\n            value: \"{{ .response.json }}\"\n\n      - plugin: log\n        config:\n          message: \"User agent: {{ .runtime.response_data.headers.User-Agent }}\"\n\n      - plugin: log\n        config:\n          message: \"Test running on: {{ .env.HOSTNAME }}\"\n</code></pre>"},{"location":"examples/log-plugin/#example-output","title":"Example Output","text":"<p>When running tests:</p> <pre><code>rocketship run -af examples/simple-log/rocketship.yaml\n</code></pre> <p>You'll see log messages in the output: <pre><code>\ud83d\ude80 Starting user-service tests in staging environment\nRunning on user's machine at /home/user\nCreated test data with ID: test_1234567890, Status: active\n\u26a0\ufe0f  Warning: This is a simulated warning during testing\n\u2705 Test completed successfully for user-service\n</code></pre></p>"},{"location":"examples/log-plugin/#use-cases","title":"Use Cases","text":"<ul> <li>Progress Tracking: Log milestones in long-running tests</li> <li>Debug Information: Output variable values and intermediate results</li> <li>Test Documentation: Add context about what each step is doing</li> <li>Monitoring: Track important events during test execution</li> </ul> <p>Log messages always appear in the CLI output regardless of the logging level, making them perfect for providing real-time feedback during test execution.</p>"},{"location":"examples/request-chaining/","title":"Request Chaining &amp; Delays","text":"<p>This example demonstrates how to chain HTTP requests and use delays in your test suites. It uses our hosted test server at <code>tryme.rocketship.sh</code> to show real-world API testing scenarios.</p>"},{"location":"examples/request-chaining/#test-specification","title":"Test Specification","text":"<pre><code>name: \"Request Chaining &amp; Delays Example\"\ndescription: \"A test suite demonstrating request chaining and delays with the test server\"\nversion: \"v1.0.0\"\ntests:\n  - name: \"Car Management Flow\"\n    steps:\n      - name: \"Create first car\"\n        plugin: \"http\"\n        config:\n          method: \"POST\"\n          url: \"https://tryme.rocketship.sh/cars\"\n          body: |\n            {\n              \"make\": \"Toyota\",\n              \"model\": \"Corolla\",\n              \"year\": 2020\n            }\n        assertions:\n          - type: \"status_code\"\n            expected: 200\n          - type: \"header\"\n            name: \"content-type\"\n            expected: \"application/json\"\n          - type: \"json_path\"\n            path: \".make\"\n            expected: \"Toyota\"\n        save:\n          - json_path: \".id\"\n            as: \"first_car_id\"\n          - json_path: \".model\"\n            as: \"first_car_model\"\n          - header: \"server\"\n            as: \"server_info\"\n\n      - name: \"Wait for system processing\"\n        plugin: \"delay\"\n        config:\n          duration: \"1s\"\n\n      - name: \"Create second car\"\n        plugin: \"http\"\n        config:\n          method: \"POST\"\n          url: \"https://tryme.rocketship.sh/cars\"\n          body: |\n            {\n              \"make\": \"Honda\",\n              \"model\": \"Civic\", \n              \"year\": 2022,\n              \"server_used\": \"{{ server_info }}\"\n            }\n        assertions:\n          - type: \"status_code\"\n            expected: 200\n        save:\n          - json_path: \".id\"\n            as: \"second_car_id\"\n\n      - name: \"Short delay for consistency\"\n        plugin: \"delay\"\n        config:\n          duration: \"500ms\"\n\n      - name: \"List all cars\"\n        plugin: \"http\"\n        config:\n          method: \"GET\"\n          url: \"https://tryme.rocketship.sh/cars\"\n        assertions:\n          - type: \"status_code\"\n            expected: 200\n          - type: \"json_path\"\n            path: \".cars_0.make\"\n            expected: \"Toyota\"\n          - type: \"json_path\"\n            path: \".cars_1.make\"\n            expected: \"Honda\"\n          - type: \"json_path\"\n            path: \".cars_1.server_used\"\n            expected: \"{{ server_info }}\"\n\n      - name: \"Cleanup - Delete first car\"\n        plugin: \"http\"\n        config:\n          method: \"DELETE\"\n          url: \"https://tryme.rocketship.sh/cars/{{ first_car_id }}\"\n        assertions:\n          - type: \"status_code\"\n            expected: 204\n\n      - name: \"Cleanup - Delete second car\"\n        plugin: \"http\"\n        config:\n          method: \"DELETE\"\n          url: \"https://tryme.rocketship.sh/cars/{{ second_car_id }}\"\n        assertions:\n          - type: \"status_code\"\n            expected: 204\n</code></pre>"},{"location":"examples/request-chaining/#key-features-demonstrated","title":"Key Features Demonstrated","text":"<p>Request Chaining:</p> <ol> <li>Creating multiple cars with different data</li> <li>Saving response values (JSON and headers) for later use  </li> <li>Using saved header values in subsequent request bodies</li> <li>Verifying changes across requests with variable substitution</li> </ol> <p>Header Operations:</p> <ol> <li>Header validation with <code>type: \"header\"</code> assertions</li> <li>Header value extraction with <code>header: \"server\"</code> saves</li> <li>Using saved header values in request body: <code>\"server_used\": \"{{ server_info }}\"</code></li> </ol> <p>Delays:</p> <ol> <li>Using delays between operations</li> <li>Different delay durations (1s, 500ms)</li> <li>Strategic placement for system consistency</li> </ol> <p>Assertions:</p> <ol> <li>Status code validation</li> <li>Header validation (content-type)</li> <li>JSON response validation using JSONPath</li> <li>Variable substitution validation</li> </ol>"},{"location":"examples/request-chaining/#running-the-example","title":"Running the Example","text":"<p>Run the test suite:</p> <pre><code>rocketship run -af examples/request-chaining/rocketship.yaml\n</code></pre>"},{"location":"examples/request-chaining/#understanding-the-flow","title":"Understanding the Flow","text":"<p>The example demonstrates a complete car management workflow with header operations:</p> <ol> <li>Create first car - Save car ID, model (JSON) and server header value</li> <li>Wait for system processing - 1 second delay</li> <li>Create second car - Use saved header value in request body</li> <li>Short delay - 500ms for consistency </li> <li>List all cars - Verify both cars exist and header value was passed through</li> <li>Cleanup - Delete both cars using saved IDs</li> </ol> <p>Each step builds on the previous ones, showing how to:</p> <ul> <li>Chain requests together with variable substitution</li> <li>Save and use response data from both JSON and headers</li> <li>Pass header values through request workflows</li> <li>Verify state changes across multiple operations</li> <li>Handle different HTTP methods (POST, GET, DELETE)</li> <li>Work with multiple resources and lifecycle management</li> <li>Use strategic delays for system consistency</li> </ul> <p>The delays in this example are for demonstration purposes. In real-world scenarios, you might use delays when:</p> <ul> <li>Waiting for asynchronous operations to complete</li> <li>Ensuring system consistency in distributed systems</li> <li>Rate limiting your API requests</li> <li>Testing timeout scenarios</li> </ul>"},{"location":"examples/request-chaining/#handlebars-escaping-in-request-bodies","title":"Handlebars Escaping in Request Bodies","text":"<p>When your APIs return or expect handlebars syntax (<code>{{ }}</code>), use backslash escaping to include literal handlebars:</p> <pre><code>- name: \"Send template documentation\"\n  plugin: \"http\"\n  config:\n    method: \"POST\"\n    url: \"https://tryme.rocketship.sh/docs\"\n    body: |-\n      {\n        \"instructions\": \"Use \\\\{{ user_id }} in your API calls\",\n        \"template_example\": \"Welcome \\\\{{ user_name }}!\",\n        \"processed_value\": \"Current environment: {{ .vars.environment }}\"\n      }\n  assertions:\n    - type: \"json_path\"\n      path: \".instructions\"\n      expected: \"Use {{ user_id }} in your API calls\"\n</code></pre> <p>The backslash (<code>\\</code>) escapes the handlebars, making <code>\\\\{{ user_id }}</code> output literal <code>{{ user_id }}</code> instead of trying to process it as a variable.</p> <p>See the Handlebars Escaping guide for complete details and advanced usage.</p>"},{"location":"examples/shell-scripting/","title":"Shell Scripting","text":"<p>Execute shell commands and scripts within Rocketship workflows for build processes, system operations, and command-line tool integration.</p>"},{"location":"examples/shell-scripting/#key-features","title":"Key Features","text":"<ul> <li>Cross-platform Support - Automatically detects and uses <code>bash</code> or <code>sh</code></li> <li>Variable Substitution - Access config variables and step state</li> <li>Environment Integration - Automatic environment variable injection</li> <li>External Script Files - Store scripts in separate <code>.sh</code> files</li> <li>Output Capture - Automatically captures stdout, stderr, exit codes, and duration</li> </ul>"},{"location":"examples/shell-scripting/#basic-usage","title":"Basic Usage","text":""},{"location":"examples/shell-scripting/#inline-scripts","title":"Inline Scripts","text":"<pre><code>- name: \"Build and test\"\n  plugin: script\n  config:\n    language: shell\n    script: |\n      echo \"Building {{ .vars.project_name }} version {{ .vars.version }}\"\n      npm install\n      npm test\n      npm run build\n</code></pre>"},{"location":"examples/shell-scripting/#external-script-files","title":"External Script Files","text":"<pre><code>- name: \"Deploy application\"\n  plugin: script\n  config:\n    language: shell\n    file: \"scripts/deploy.sh\"\n    timeout: \"60s\"\n</code></pre>"},{"location":"examples/shell-scripting/#variable-access","title":"Variable Access","text":""},{"location":"examples/shell-scripting/#template-variables","title":"Template Variables","text":"<pre><code>vars:\n  project_name: \"my-app\"\n  environment: \"production\"\n\nsteps:\n  - name: \"Deploy\"\n    plugin: script\n    config:\n      language: shell\n      script: |\n        # Config variables\n        echo \"Deploying {{ .vars.project_name }} to {{ .vars.environment }}\"\n\n        # State variables from previous steps\n        echo \"Build ID: {{ build_id }}\"\n        echo \"Commit: {{ commit_hash }}\"\n</code></pre>"},{"location":"examples/shell-scripting/#environment-variables","title":"Environment Variables","text":"<p>Shell scripts automatically receive environment variables:</p> <pre><code># Config variables as ROCKETSHIP_VAR_*\necho \"Project: $ROCKETSHIP_VAR_PROJECT_NAME\"\necho \"Environment: $ROCKETSHIP_VAR_ENVIRONMENT\"\n\n# State variables as ROCKETSHIP_*\necho \"Build ID: $ROCKETSHIP_BUILD_ID\"\n\n# Previous step results\necho \"Last exit code: $ROCKETSHIP_EXIT_CODE\"\necho \"Last stdout: $ROCKETSHIP_STDOUT\"\n</code></pre>"},{"location":"examples/shell-scripting/#integration-with-http-steps","title":"Integration with HTTP Steps","text":"<pre><code>- name: \"Get deployment info\"\n  plugin: http\n  config:\n    method: GET\n    url: \"https://api.example.com/deploy/latest\"\n  save:\n    - json_path: \".deploy_id\"\n      as: \"deploy_id\"\n\n- name: \"Deploy application\"\n  plugin: script\n  config:\n    language: shell\n    script: |\n      echo \"Deploying {{ deploy_id }}\"\n      kubectl apply -f deployment.yaml\n      kubectl set image deployment/app app=myapp:{{ .vars.version }}\n</code></pre>"},{"location":"examples/shell-scripting/#error-handling","title":"Error Handling","text":"<pre><code>- name: \"Robust deployment\"\n  plugin: script\n  config:\n    language: shell\n    script: |\n      set -euo pipefail  # Exit on error, undefined vars, pipe failures\n\n      cleanup() {\n        echo \"Cleaning up...\"\n        docker stop temp-container 2&gt;/dev/null || true\n      }\n\n      trap cleanup ERR EXIT\n\n      # Your deployment commands here\n      docker run -d --name temp-container myapp:{{ .vars.version }}\n\n      # Wait for health check\n      for i in {1..30}; do\n        if curl -f http://localhost:8080/health; then\n          echo \"\u2705 Deployment successful\"\n          exit 0\n        fi\n        sleep 2\n      done\n\n      echo \"\u274c Health check failed\"\n      exit 1\n</code></pre>"},{"location":"examples/shell-scripting/#file-operations","title":"File Operations","text":"<pre><code>- name: \"Prepare release\"\n  plugin: script\n  config:\n    language: shell\n    script: |\n      # Create release package\n      mkdir -p release\n      tar -czf \"{{ .vars.project_name }}-{{ .vars.version }}.tar.gz\" dist/\n\n      # Generate metadata\n      cat &gt; release/metadata.json &lt;&lt; EOF\n      {\n        \"project\": \"{{ .vars.project_name }}\",\n        \"version\": \"{{ .vars.version }}\",\n        \"build_time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"\n      }\n      EOF\n</code></pre>"},{"location":"examples/shell-scripting/#running-examples","title":"Running Examples","text":"<pre><code># Run comprehensive shell testing (includes external files)\nrocketship run -af examples/shell-testing/rocketship.yaml\n\n# Debug logging to see shell execution details\nROCKETSHIP_LOG=DEBUG rocketship run -af examples/shell-testing/rocketship.yaml\n</code></pre>"},{"location":"examples/shell-scripting/#best-practices","title":"Best Practices","text":"<ul> <li>Use <code>set -euo pipefail</code> for safe error handling</li> <li>Quote variables to handle spaces: <code>\"{{ .vars.project_name }}\"</code></li> <li>Use environment variables for secrets: <code>$ROCKETSHIP_VAR_API_TOKEN</code></li> <li>Provide clear output with status indicators: <code>\u2705</code> <code>\u274c</code> <code>\ud83d\udd27</code></li> <li>Clean up resources with trap functions on exit/error</li> </ul>"},{"location":"examples/sql-testing/","title":"SQL Testing","text":"<p>The SQL plugin enables database operations and testing within Rocketship workflows. It supports multiple database engines and provides comprehensive assertion capabilities for validating query results.</p>"},{"location":"examples/sql-testing/#supported-databases","title":"Supported Databases","text":"<ul> <li>PostgreSQL - <code>driver: postgres</code></li> <li>MySQL - <code>driver: mysql</code></li> <li>SQLite - <code>driver: sqlite</code></li> <li>SQL Server - <code>driver: sqlserver</code></li> </ul>"},{"location":"examples/sql-testing/#configuration","title":"Configuration","text":""},{"location":"examples/sql-testing/#basic-configuration","title":"Basic Configuration","text":"<pre><code>- name: \"Query users\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"postgres://user:password@localhost:5432/database?sslmode=disable\"\n    commands:\n      - \"SELECT id, name, email FROM users WHERE active = true;\"\n</code></pre>"},{"location":"examples/sql-testing/#configuration-with-variables","title":"Configuration with Variables","text":"<pre><code>vars:\n  db_host: \"localhost:5432\"\n  db_user: \"testuser\"\n  db_password: \"testpass\"\n  db_name: \"testdb\"\n\nsteps:\n  - name: \"Create user\"\n    plugin: sql\n    config:\n      driver: postgres\n      dsn: \"postgres://{{ .vars.db_user }}:{{ .vars.db_password }}@{{ .vars.db_host }}/{{ .vars.db_name }}?sslmode=disable\"\n      commands:\n        - \"INSERT INTO users (name, email) VALUES ('{{ .vars.user_name }}', '{{ .vars.user_email }}') RETURNING id;\"\n</code></pre>"},{"location":"examples/sql-testing/#external-sql-files","title":"External SQL Files","text":"<pre><code>- name: \"Run migration\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"{{ .vars.postgres_dsn }}\"\n    file: \"./migrations/001_create_tables.sql\"\n    timeout: \"60s\"\n</code></pre>"},{"location":"examples/sql-testing/#database-connection-strings-dsn","title":"Database Connection Strings (DSN)","text":""},{"location":"examples/sql-testing/#postgresql","title":"PostgreSQL","text":"<pre><code>postgres://username:password@host:port/database?sslmode=disable\n</code></pre>"},{"location":"examples/sql-testing/#mysql","title":"MySQL","text":"<pre><code>username:password@tcp(host:port)/database\n</code></pre>"},{"location":"examples/sql-testing/#sqlite","title":"SQLite","text":"<pre><code>./path/to/database.db\n</code></pre>"},{"location":"examples/sql-testing/#sql-server","title":"SQL Server","text":"<pre><code>sqlserver://username:password@host:port?database=dbname\n</code></pre>"},{"location":"examples/sql-testing/#assertions","title":"Assertions","text":"<p>The SQL plugin supports several assertion types for validating query results:</p>"},{"location":"examples/sql-testing/#row-count-assertion","title":"Row Count Assertion","text":"<p>Validates the number of rows returned by a specific query:</p> <pre><code>assertions:\n  - type: row_count\n    query_index: 0\n    expected: 5\n</code></pre>"},{"location":"examples/sql-testing/#query-count-assertion","title":"Query Count Assertion","text":"<p>Validates the total number of queries executed:</p> <pre><code>assertions:\n  - type: query_count\n    expected: 3\n</code></pre>"},{"location":"examples/sql-testing/#success-count-assertion","title":"Success Count Assertion","text":"<p>Validates the number of successful queries:</p> <pre><code>assertions:\n  - type: success_count\n    expected: 2\n</code></pre>"},{"location":"examples/sql-testing/#column-value-assertion","title":"Column Value Assertion","text":"<p>Validates specific column values in query results:</p> <pre><code>assertions:\n  - type: column_value\n    query_index: 0\n    row_index: 0\n    column: \"status\"\n    expected: \"active\"\n</code></pre>"},{"location":"examples/sql-testing/#saving-query-results","title":"Saving Query Results","text":"<p>Extract values from query results for use in subsequent steps:</p> <pre><code>save:\n  - sql_result: \".queries[0].rows[0].id\"\n    as: \"user_id\"\n  - sql_result: \".queries[0].rows_affected\"\n    as: \"affected_count\"\n  - sql_result: \".stats.success_count\"\n    as: \"successful_queries\"\n</code></pre>"},{"location":"examples/sql-testing/#save-path-syntax","title":"Save Path Syntax","text":"<ul> <li><code>.queries[0].rows[0].column_name</code> - Extract column value from first query, first row</li> <li><code>.queries[0].rows_affected</code> - Number of rows affected by first query</li> <li><code>.stats.success_count</code> - Total number of successful queries</li> <li><code>.stats.total_queries</code> - Total number of queries executed</li> </ul>"},{"location":"examples/sql-testing/#handlebars-escaping-in-sql-queries","title":"Handlebars Escaping in SQL Queries","text":"<p>When your SQL queries contain literal handlebars syntax (e.g., for stored procedures or database functions that use <code>{{ }}</code> syntax), you can escape them using backslashes:</p> <pre><code>- name: \"Query with escaped handlebars\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"{{ .vars.db_dsn }}\"\n    commands:\n      - \"SELECT 'Normal: {{ .vars.test_user_name }}, Escaped: \\\\{{ placeholder }}' as mixed_example;\"\n</code></pre> <p>In this example: - <code>{{ .vars.test_user_name }}</code> will be replaced with the actual variable value - <code>\\\\{{ placeholder }}</code> will render as literal <code>{{ placeholder }}</code> in the SQL query</p> <p>For multiple levels of escaping: - <code>\\\\{{ }}</code> \u2192 <code>{{ }}</code> (literal handlebars) - <code>\\\\\\\\{{ }}</code> \u2192 <code>\\\\{{ }}</code> (escaped backslash + handlebars variable) - <code>\\\\\\\\\\\\{{ }}</code> \u2192 <code>\\\\{{ }}</code> (literal escaped handlebars)</p> <p>See the Handlebars Escaping guide for more detailed examples and use cases.</p>"},{"location":"examples/sql-testing/#complete-example","title":"Complete Example","text":"<pre><code>name: \"User Management Test\"\nversion: \"v1.0.0\"\n\nvars:\n  db_dsn: \"postgres://testuser:testpass@localhost:5433/testdb?sslmode=disable\"\n  test_email: \"test@example.com\"\n\ntests:\n  - name: \"User CRUD Operations\"\n    steps:\n      - name: \"Create user\"\n        plugin: sql\n        config:\n          driver: postgres\n          dsn: \"{{ .vars.db_dsn }}\"\n          commands:\n            - \"INSERT INTO users (name, email, active) VALUES ('Test User', '{{ .vars.test_email }}', true) RETURNING id;\"\n        assertions:\n          - type: row_count\n            query_index: 0\n            expected: 1\n        save:\n          - sql_result: \".queries[0].rows[0].id\"\n            as: \"user_id\"\n\n      - name: \"Verify user exists\"\n        plugin: sql\n        config:\n          driver: postgres\n          dsn: \"{{ .vars.db_dsn }}\"\n          commands:\n            - \"SELECT id, name, email, active FROM users WHERE id = {{ user_id }};\"\n        assertions:\n          - type: row_count\n            query_index: 0\n            expected: 1\n          - type: column_value\n            query_index: 0\n            row_index: 0\n            column: \"email\"\n            expected: \"{{ .vars.test_email }}\"\n          - type: column_value\n            query_index: 0\n            row_index: 0\n            column: \"active\"\n            expected: true\n\n      - name: \"Update user status\"\n        plugin: sql\n        config:\n          driver: postgres\n          dsn: \"{{ .vars.db_dsn }}\"\n          commands:\n            - \"UPDATE users SET active = false WHERE id = {{ user_id }};\"\n        assertions:\n          - type: success_count\n            expected: 1\n\n      - name: \"Delete user\"\n        plugin: sql\n        config:\n          driver: postgres\n          dsn: \"{{ .vars.db_dsn }}\"\n          commands:\n            - \"DELETE FROM users WHERE id = {{ user_id }};\"\n        assertions:\n          - type: success_count\n            expected: 1\n</code></pre>"},{"location":"examples/sql-testing/#testing-with-docker","title":"Testing with Docker","text":"<p>For local testing, use the provided Docker Compose setup:</p> <pre><code># Start test databases\ncd .docker &amp;&amp; docker-compose up postgres-test mysql-test -d\n\n# Run SQL tests\nrocketship run -af examples/sql-testing/rocketship.yaml\n</code></pre> <p>The test databases include:</p> <ul> <li>PostgreSQL: <code>localhost:5433</code> with sample data</li> <li>MySQL: <code>localhost:3307</code> with sample data</li> </ul>"},{"location":"examples/sql-testing/#best-practices","title":"Best Practices","text":""},{"location":"examples/sql-testing/#security","title":"Security","text":"<ul> <li>Use variables for connection strings to avoid hardcoding credentials</li> <li>Use least-privilege database users for testing</li> <li>Never commit real database credentials to version control</li> </ul>"},{"location":"examples/sql-testing/#performance","title":"Performance","text":"<ul> <li>Set appropriate timeouts for long-running queries</li> <li>Use connection pooling (handled automatically by the plugin)</li> <li>Test with realistic data volumes</li> </ul>"},{"location":"examples/sql-testing/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Test both successful and error scenarios</li> <li>Validate data integrity with assertions</li> <li>Use transactions when testing modifications</li> <li>Clean up test data to maintain test isolation</li> </ul>"},{"location":"examples/sql-testing/#error-handling","title":"Error Handling","text":"<pre><code>- name: \"Handle expected errors\"\n  plugin: sql\n  config:\n    driver: postgres\n    dsn: \"{{ .vars.db_dsn }}\"\n    commands:\n      - \"SELECT * FROM nonexistent_table;\"\n  # This step will fail, which might be expected for negative testing\n</code></pre>"},{"location":"examples/sql-testing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/sql-testing/#connection-issues","title":"Connection Issues","text":"<ul> <li>Verify database service is running</li> <li>Check connection string format for your database type</li> <li>Ensure network connectivity and firewall settings</li> <li>Validate credentials and database permissions</li> </ul>"},{"location":"examples/sql-testing/#query-errors","title":"Query Errors","text":"<ul> <li>Check SQL syntax for your specific database</li> <li>Verify table and column names exist</li> <li>Ensure proper data types in INSERT/UPDATE operations</li> <li>Review database logs for detailed error messages</li> </ul>"},{"location":"examples/sql-testing/#assertion-failures","title":"Assertion Failures","text":"<ul> <li>Verify expected values match actual query results</li> <li>Check query indices and row indices in assertions</li> <li>Ensure column names are spelled correctly</li> <li>Review query results in logs for debugging</li> </ul>"},{"location":"examples/supabase-testing/","title":"Supabase Plugin - Full-Stack Database Testing","text":"<p>The Supabase plugin enables comprehensive testing of Supabase applications, providing coverage of database operations, authentication, storage, and PostgreSQL RPC functions. Test your entire Supabase stack from database CRUD operations to file storage and user authentication workflows.</p>"},{"location":"examples/supabase-testing/#key-features","title":"Key Features","text":"<ul> <li>CRUD Operations - Create, read, update, and delete data with advanced filtering</li> <li>PostgreSQL RPC Functions - Call stored procedures and custom database functions</li> <li>Authentication Testing - User signup, signin, and session management</li> <li>Storage Operations - File upload, download, and bucket management</li> <li>Advanced Filtering - 15+ filter operators including like, in, range queries</li> <li>JSON Path Extraction - Save and chain data between test steps</li> <li>Row Level Security - Test RLS policies and permissions</li> <li>Real-time Features - Test subscriptions and live data updates</li> </ul>"},{"location":"examples/supabase-testing/#prerequisites","title":"Prerequisites","text":"<p>Before using the Supabase plugin, you need:</p> <ol> <li>Supabase Project - Create a project at supabase.com</li> <li>Project Credentials - Your project URL and API keys</li> <li>Database Schema - Tables and functions set up for testing</li> </ol> <pre><code># Get your project details from Supabase Dashboard\nPROJECT_URL=\"https://your-project.supabase.co\"\nANON_KEY=\"your-anon-key\"\nSERVICE_KEY=\"your-service-role-key\"  # For admin operations\n</code></pre>"},{"location":"examples/supabase-testing/#basic-configuration","title":"Basic Configuration","text":"<pre><code>plugin: supabase\nconfig:\n  url: \"https://your-project.supabase.co\"\n  key: \"your-anon-key\"\n  operation: \"select\" # Required: CRUD or special operation\n  table: \"users\" # Required for CRUD operations\n</code></pre>"},{"location":"examples/supabase-testing/#crud-operations","title":"CRUD Operations","text":""},{"location":"examples/supabase-testing/#select-reading-data","title":"SELECT - Reading Data","text":"<p>Query data with filtering, ordering, and pagination:</p> <pre><code>- name: \"Query active users\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"select\"\n    table: \"users\"\n    select:\n      columns: [\"id\", \"name\", \"email\", \"created_at\"]\n      filters:\n        - column: \"status\"\n          operator: \"eq\"\n          value: \"active\"\n        - column: \"created_at\"\n          operator: \"gte\"\n          value: \"2024-01-01\"\n      order:\n        - column: \"created_at\"\n          ascending: false\n      limit: 10\n      offset: 0\n      count: \"exact\" # Get total count\n</code></pre>"},{"location":"examples/supabase-testing/#insert-creating-data","title":"INSERT - Creating Data","text":"<p>Create new records with optional upsert handling:</p> <pre><code>- name: \"Create new user\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"insert\"\n    table: \"users\"\n    insert:\n      data:\n        name: \"John Doe\"\n        email: \"john@example.com\"\n        metadata:\n          role: \"user\"\n          preferences: { \"theme\": \"dark\" }\n      upsert: false # Set to true for upsert behavior\n  save:\n    - json_path: \".[0].id\"\n      as: \"new_user_id\"\n</code></pre>"},{"location":"examples/supabase-testing/#update-modifying-data","title":"UPDATE - Modifying Data","text":"<p>Update existing records with conditional filters:</p> <pre><code>- name: \"Update user status\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"update\"\n    table: \"users\"\n    update:\n      data:\n        status: \"verified\"\n        updated_at: \"2024-01-15T10:30:00Z\"\n      filters:\n        - column: \"id\"\n          operator: \"eq\"\n          value: \"{{ new_user_id }}\"\n  assertions:\n    - type: json_path\n      path: \".[0].status\"\n      expected: \"verified\"\n</code></pre>"},{"location":"examples/supabase-testing/#delete-removing-data","title":"DELETE - Removing Data","text":"<p>Delete records with required safety filters:</p> <pre><code>- name: \"Delete test user\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"delete\"\n    table: \"users\"\n    delete:\n      filters: # Filters are required for safety\n        - column: \"id\"\n          operator: \"eq\"\n          value: \"{{ new_user_id }}\"\n</code></pre>"},{"location":"examples/supabase-testing/#filter-operators","title":"Filter Operators","text":"<p>The Supabase plugin supports comprehensive filtering options:</p> Operator Description Example <code>eq</code> Equal <code>{\"operator\": \"eq\", \"value\": \"active\"}</code> <code>neq</code> Not equal <code>{\"operator\": \"neq\", \"value\": \"deleted\"}</code> <code>gt</code> Greater than <code>{\"operator\": \"gt\", \"value\": 100}</code> <code>gte</code> Greater than or equal <code>{\"operator\": \"gte\", \"value\": 18}</code> <code>lt</code> Less than <code>{\"operator\": \"lt\", \"value\": 1000}</code> <code>lte</code> Less than or equal <code>{\"operator\": \"lte\", \"value\": 65}</code> <code>like</code> Pattern matching <code>{\"operator\": \"like\", \"value\": \"%test%\"}</code> <code>ilike</code> Case-insensitive like <code>{\"operator\": \"ilike\", \"value\": \"%TEST%\"}</code> <code>is</code> Null check <code>{\"operator\": \"is\", \"value\": null}</code> <code>in</code> Value in list <code>{\"operator\": \"in\", \"value\": [\"a\", \"b\"]}</code>"},{"location":"examples/supabase-testing/#complex-filtering-example","title":"Complex Filtering Example","text":"<pre><code>select:\n  columns: [\"id\", \"name\", \"email\", \"age\", \"status\"]\n  filters:\n    - column: \"status\"\n      operator: \"in\"\n      value: [\"active\", \"premium\"]\n    - column: \"age\"\n      operator: \"gte\"\n      value: 18\n    - column: \"name\"\n      operator: \"ilike\"\n      value: \"%smith%\"\n  order:\n    - column: \"created_at\"\n      ascending: false\n    - column: \"name\"\n      ascending: true\n  limit: 50\n</code></pre>"},{"location":"examples/supabase-testing/#rpc-function-calls","title":"RPC Function Calls","text":"<p>Execute PostgreSQL functions and stored procedures:</p> <pre><code>- name: \"Call simple function\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"rpc\"\n    rpc:\n      function: \"get_user_count\"\n  save:\n    - json_path: \".\"\n      as: \"total_users\"\n\n- name: \"Call function with parameters\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"rpc\"\n    rpc:\n      function: \"create_user_profile\"\n      params:\n        user_id: \"{{ new_user_id }}\"  # Dynamic parameter from saved variable\n        profile_data:\n          bio: \"Test user profile\"\n          preferences: { \"notifications\": true }\n  assertions:\n    - type: json_path\n      path: \".success\"\n      expected: true\n</code></pre>"},{"location":"examples/supabase-testing/#authentication-operations","title":"Authentication Operations","text":""},{"location":"examples/supabase-testing/#user-signup","title":"User Signup","text":"<p>Create new user accounts with metadata:</p> <pre><code>- name: \"User registration\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"auth_sign_up\"\n    auth:\n      email: \"newuser@example.com\"\n      password: \"SecurePassword123!\"\n      user_metadata:\n        first_name: \"John\"\n        last_name: \"Doe\"\n        role: \"customer\"\n  save:\n    - json_path: \".user.id\"\n      as: \"auth_user_id\"\n  assertions:\n    - type: json_path\n      path: \".user.email\"\n      expected: \"newuser@example.com\"\n</code></pre>"},{"location":"examples/supabase-testing/#user-signin","title":"User Signin","text":"<p>Authenticate existing users:</p> <pre><code>- name: \"User authentication\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"auth_sign_in\"\n    auth:\n      email: \"newuser@example.com\"\n      password: \"SecurePassword123!\"\n  save:\n    - json_path: \".access_token\"\n      as: \"user_token\"\n    - json_path: \".refresh_token\"\n      as: \"refresh_token\"\n  assertions:\n    - type: json_path\n      path: \".access_token\"\n      expected: \"exists\"\n</code></pre>"},{"location":"examples/supabase-testing/#admin-user-operations","title":"Admin User Operations","text":"<p>Manage users with service role permissions:</p> <pre><code>- name: \"Create user (admin)\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_service_key }}\" # Service role required\n    operation: \"auth_create_user\"\n    auth:\n      email: \"admin-created@example.com\"\n      password: \"AdminPassword123!\"\n      user_metadata:\n        created_by: \"admin\"\n        role: \"staff\"\n\n- name: \"Delete user (admin)\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_service_key }}\"\n    operation: \"auth_delete_user\"\n    auth:\n      user_id: \"{{ auth_user_id }}\"\n</code></pre>"},{"location":"examples/supabase-testing/#storage-operations","title":"Storage Operations","text":""},{"location":"examples/supabase-testing/#create-storage-bucket","title":"Create Storage Bucket","text":"<pre><code>- name: \"Create storage bucket\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"storage_create_bucket\"\n    storage:\n      bucket: \"test-uploads\"\n      public: true\n</code></pre>"},{"location":"examples/supabase-testing/#file-upload","title":"File Upload","text":"<pre><code>- name: \"Upload test file\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"storage_upload\"\n    storage:\n      bucket: \"test-uploads\"\n      path: \"documents/test-file.txt\"\n      file_content: |\n        This is test file content.\n        Line 2 of the file.\n        End of content.\n      content_type: \"text/plain\"\n      cache_control: \"3600\"\n</code></pre>"},{"location":"examples/supabase-testing/#file-download","title":"File Download","text":"<pre><code>- name: \"Download and verify file\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"storage_download\"\n    storage:\n      bucket: \"test-uploads\"\n      path: \"documents/test-file.txt\"\n  assertions:\n    - type: json_path\n      path: \".\"\n      expected: |\n        This is test file content.\n        Line 2 of the file.\n        End of content.\n</code></pre>"},{"location":"examples/supabase-testing/#file-deletion","title":"File Deletion","text":"<pre><code>- name: \"Clean up test file\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"storage_delete\"\n    storage:\n      bucket: \"test-uploads\"\n      path: \"documents/test-file.txt\"\n</code></pre>"},{"location":"examples/supabase-testing/#data-extraction-and-chaining","title":"Data Extraction and Chaining","text":""},{"location":"examples/supabase-testing/#save-operation-syntax","title":"Save Operation Syntax","text":"<p>Extract data from responses for use in subsequent steps:</p> <pre><code>save:\n  # Extract from JSON response data\n  - json_path: \".[0].id\"\n    as: \"record_id\"\n  - json_path: \".user.email\"\n    as: \"user_email\"\n\n  # Extract from response headers\n  - header: \"Content-Type\"\n    as: \"response_type\"\n\n  # Optional extractions (won't fail if missing)\n  - json_path: \".optional_field\"\n    as: \"optional_data\"\n    required: false\n</code></pre>"},{"location":"examples/supabase-testing/#json-path-examples","title":"JSON Path Examples","text":"Path Description Example Result <code>\".[0].id\"</code> First record's ID <code>123</code> <code>\".count\"</code> Total count from response <code>45</code> <code>\".user.metadata.role\"</code> Nested object property <code>\"admin\"</code> <code>\"length\"</code> Array length <code>10</code>"},{"location":"examples/supabase-testing/#configuration-with-variables","title":"Configuration with Variables","text":"<p>Use variables for reusable and secure configurations:</p> <pre><code>vars:\n  supabase_url: \"https://your-project.supabase.co\"\n  supabase_anon_key: \"{{ .env.SUPABASE_ANON_KEY }}\"\n  supabase_service_key: \"{{ .env.SUPABASE_SERVICE_KEY }}\"\n  test_email: \"test@example.com\"\n\ntests:\n  - name: \"User lifecycle test\"\n    steps:\n      - name: \"Create user\"\n        plugin: supabase\n        config:\n          url: \"{{ .vars.supabase_url }}\"\n          key: \"{{ .vars.supabase_anon_key }}\"\n          operation: \"insert\"\n          table: \"users\"\n          insert:\n            data:\n              email: \"{{ .vars.test_email }}\"\n              status: \"pending\"\n</code></pre>"},{"location":"examples/supabase-testing/#assertions","title":"Assertions","text":"<p>Validate Supabase operations with built-in assertions:</p> <pre><code>assertions:\n  # Standard JSON path assertions\n  - type: json_path\n    path: \".[0].status\"\n    expected: \"active\"\n\n  # Check array lengths\n  - type: json_path\n    path: \"length\"\n    expected: 5\n\n  # Verify nested data\n  - type: json_path\n    path: \".user.metadata.role\"\n    expected: \"admin\"\n\n  # Check for existence (any truthy value)\n  - type: json_path\n    path: \".access_token\"\n    expected: \"exists\"\n</code></pre>"},{"location":"examples/supabase-testing/#complete-workflow-example","title":"Complete Workflow Example","text":"<pre><code>name: \"Supabase E2E User Journey\"\nversion: \"v1.0.0\"\n\nvars:\n  supabase_url: \"https://your-project.supabase.co\"\n  supabase_anon_key: \"your-anon-key\"\n  test_email: \"integration-test@example.com\"\n  test_password: \"TestPassword123!\"\n\ntests:\n  - name: \"Complete user workflow\"\n    steps:\n      # 1. User Registration\n      - name: \"User signup\"\n        plugin: supabase\n        config:\n          url: \"{{ .vars.supabase_url }}\"\n          key: \"{{ .vars.supabase_anon_key }}\"\n          operation: \"auth_sign_up\"\n          auth:\n            email: \"{{ .vars.test_email }}\"\n            password: \"{{ .vars.test_password }}\"\n            user_metadata:\n              name: \"Test User\"\n              source: \"integration_test\"\n        save:\n          - json_path: \".user.id\"\n            as: \"user_id\"\n\n      # 2. Create User Profile\n      - name: \"Create profile\"\n        plugin: supabase\n        config:\n          url: \"{{ .vars.supabase_url }}\"\n          key: \"{{ .vars.supabase_anon_key }}\"\n          operation: \"insert\"\n          table: \"profiles\"\n          insert:\n            data:\n              user_id: \"{{ user_id }}\"\n              display_name: \"Test User\"\n              bio: \"Integration test profile\"\n              preferences:\n                theme: \"dark\"\n                notifications: true\n        save:\n          - json_path: \".[0].id\"\n            as: \"profile_id\"\n\n      # 3. User Authentication\n      - name: \"User signin\"\n        plugin: supabase\n        config:\n          url: \"{{ .vars.supabase_url }}\"\n          key: \"{{ .vars.supabase_anon_key }}\"\n          operation: \"auth_sign_in\"\n          auth:\n            email: \"{{ .vars.test_email }}\"\n            password: \"{{ .vars.test_password }}\"\n        save:\n          - json_path: \".access_token\"\n            as: \"auth_token\"\n\n      # 4. File Upload\n      - name: \"Upload profile picture\"\n        plugin: supabase\n        config:\n          url: \"{{ .vars.supabase_url }}\"\n          key: \"{{ .vars.supabase_anon_key }}\"\n          operation: \"storage_upload\"\n          storage:\n            bucket: \"profiles\"\n            path: \"avatars/{{ user_id }}.jpg\"\n            file_content: \"fake-image-data-for-testing\"\n            content_type: \"image/jpeg\"\n\n      # 5. Update Profile with Image\n      - name: \"Update profile with avatar\"\n        plugin: supabase\n        config:\n          url: \"{{ .vars.supabase_url }}\"\n          key: \"{{ .vars.supabase_anon_key }}\"\n          operation: \"update\"\n          table: \"profiles\"\n          update:\n            data:\n              avatar_url: \"avatars/{{ user_id }}.jpg\"\n              updated_at: \"{{ .now }}\"\n            filters:\n              - column: \"user_id\"\n                operator: \"eq\"\n                value: \"{{ user_id }}\"\n\n      # 6. Query Final State\n      - name: \"Verify complete profile\"\n        plugin: supabase\n        config:\n          url: \"{{ .vars.supabase_url }}\"\n          key: \"{{ .vars.supabase_anon_key }}\"\n          operation: \"select\"\n          table: \"profiles\"\n          select:\n            columns: [\"*\"]\n            filters:\n              - column: \"user_id\"\n                operator: \"eq\"\n                value: \"{{ user_id }}\"\n        assertions:\n          - type: json_path\n            path: \".[0].display_name\"\n            expected: \"Test User\"\n          - type: json_path\n            path: \".[0].avatar_url\"\n            expected: \"avatars/{{ user_id }}.jpg\"\n\n      # 7. Cleanup\n      - name: \"Delete test data\"\n        plugin: supabase\n        config:\n          url: \"{{ .vars.supabase_url }}\"\n          key: \"{{ .vars.supabase_anon_key }}\"\n          operation: \"delete\"\n          table: \"profiles\"\n          delete:\n            filters:\n              - column: \"user_id\"\n                operator: \"eq\"\n                value: \"{{ user_id }}\"\n</code></pre>"},{"location":"examples/supabase-testing/#testing-with-row-level-security","title":"Testing with Row Level Security","text":"<p>Test RLS policies by using different authentication contexts:</p> <pre><code>- name: \"Test RLS with user context\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ user_auth_token }}\" # User's JWT token\n    operation: \"select\"\n    table: \"private_data\"\n    select:\n      columns: [\"id\", \"user_id\", \"data\"]\n  assertions:\n    # Should only return data owned by this user\n    - type: json_path\n      path: \"length\"\n      expected: 1\n\n- name: \"Test RLS with anon context\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\" # Anonymous access\n    operation: \"select\"\n    table: \"private_data\"\n    select:\n      columns: [\"id\", \"data\"]\n  assertions:\n    # Should return no data (RLS blocks anonymous access)\n    - type: json_path\n      path: \"length\"\n      expected: 0\n</code></pre>"},{"location":"examples/supabase-testing/#running-tests","title":"Running Tests","text":"<pre><code># Run basic Supabase tests\nrocketship run -af examples/supabase-testing/rocketship.yaml\n\n# Run with environment variables\nSUPABASE_URL=your-url SUPABASE_ANON_KEY=your-key rocketship run -af your-test.yaml\n\n# Run against different environments\nrocketship run -af tests/supabase/staging.yaml\nrocketship run -af tests/supabase/production.yaml\n</code></pre>"},{"location":"examples/supabase-testing/#best-practices","title":"Best Practices","text":""},{"location":"examples/supabase-testing/#1-use-environment-variables-for-credentials","title":"1. Use Environment Variables for Credentials","text":"<pre><code>vars:\n  supabase_url: \"{{ .env.SUPABASE_URL }}\"\n  supabase_anon_key: \"{{ .env.SUPABASE_ANON_KEY }}\"\n  supabase_service_key: \"{{ .env.SUPABASE_SERVICE_KEY }}\"\n</code></pre>"},{"location":"examples/supabase-testing/#2-clean-up-test-data","title":"2. Clean Up Test Data","text":"<p>Always clean up test data to maintain test isolation:</p> <pre><code># At the end of your test\n- name: \"Cleanup test data\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"delete\"\n    table: \"test_data\"\n    delete:\n      filters:\n        - column: \"created_by\"\n          operator: \"eq\"\n          value: \"integration_test\"\n</code></pre>"},{"location":"examples/supabase-testing/#3-test-both-success-and-error-cases","title":"3. Test Both Success and Error Cases","text":"<pre><code># Test successful operations\n- name: \"Valid user creation\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"insert\"\n    table: \"users\"\n    insert:\n      data:\n        email: \"valid@example.com\"\n        name: \"Valid User\"\n\n# Test error conditions\n- name: \"Duplicate email should fail\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"insert\"\n    table: \"users\"\n    insert:\n      data:\n        email: \"valid@example.com\" # Same email\n        name: \"Duplicate User\"\n  # This step should fail due to unique constraint\n</code></pre>"},{"location":"examples/supabase-testing/#4-use-meaningful-test-data","title":"4. Use Meaningful Test Data","text":"<pre><code>insert:\n  data:\n    email: \"integration-test-{{ .timestamp }}@example.com\"\n    name: \"Test User {{ .timestamp }}\"\n    metadata:\n      test_run_id: \"{{ .run_id }}\"\n      created_by: \"rocketship_integration\"\n</code></pre>"},{"location":"examples/supabase-testing/#5-test-database-functions","title":"5. Test Database Functions","text":"<pre><code>- name: \"Test business logic function\"\n  plugin: supabase\n  config:\n    url: \"{{ .vars.supabase_url }}\"\n    key: \"{{ .vars.supabase_anon_key }}\"\n    operation: \"rpc\"\n    rpc:\n      function: \"calculate_user_score\"\n      params:\n        user_id: \"{{ user_id }}\"\n        include_bonus: true\n  assertions:\n    - type: json_path\n      path: \".score\"\n      expected: 850\n    - type: json_path\n      path: \".bonus_applied\"\n      expected: true\n</code></pre>"},{"location":"examples/supabase-testing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/supabase-testing/#connection-issues","title":"Connection Issues","text":"<p>\"Invalid project URL\"</p> <ul> <li>Verify your Supabase project URL format: <code>https://project-id.supabase.co</code></li> <li>Check that your project is active and not paused</li> </ul> <p>\"Invalid API key\"</p> <ul> <li>Verify you're using the correct key for your operation:</li> <li><code>anon</code> key for most operations</li> <li><code>service_role</code> key for admin operations</li> <li>Check key hasn't expired or been regenerated</li> </ul>"},{"location":"examples/supabase-testing/#permission-errors","title":"Permission Errors","text":"<p>\"Insufficient privileges\"</p> <ul> <li>Check Row Level Security policies on your tables</li> <li>Verify user authentication context</li> <li>Use service role key for admin operations</li> </ul> <p>\"Table not found\"</p> <ul> <li>Verify table exists in your database</li> <li>Check table name spelling and case sensitivity</li> <li>Ensure you have proper permissions</li> </ul>"},{"location":"examples/supabase-testing/#authentication-issues","title":"Authentication Issues","text":"<p>\"Email already registered\"</p> <ul> <li>Use unique emails for each test run</li> <li>Clean up test users after testing</li> <li>Use email templates with timestamps</li> </ul> <p>\"Invalid credentials\"</p> <ul> <li>Verify email/password combination</li> <li>Check if email confirmation is required</li> <li>Ensure user account isn't disabled</li> </ul>"},{"location":"examples/supabase-testing/#storage-issues","title":"Storage Issues","text":"<p>\"Bucket not found\"</p> <ul> <li>Create storage bucket first using <code>storage_create_bucket</code></li> <li>Verify bucket name spelling</li> <li>Check bucket permissions</li> </ul> <p>\"File upload failed\"</p> <ul> <li>Verify bucket exists and is accessible</li> <li>Check file path format</li> <li>Ensure proper permissions for upload</li> </ul>"},{"location":"examples/supabase-testing/#general-debugging","title":"General Debugging","text":"<p>Enable debug logging for detailed operation information:</p> <pre><code>ROCKETSHIP_LOG=DEBUG rocketship run -af your-test.yaml\n</code></pre> <p>Check Supabase Dashboard logs for server-side errors and detailed operation results.</p> <p>The Supabase plugin provides comprehensive testing capabilities for modern full-stack applications, enabling you to validate your entire Supabase stack from database operations to user authentication and file storage.</p>"},{"location":"reference/rocketship/","title":"Overview","text":""},{"location":"reference/rocketship/#rocketship","title":"rocketship","text":"<p>Rocketship CLI</p>"},{"location":"reference/rocketship/#synopsis","title":"Synopsis","text":"<p>Rocketship is a CLI tool for running automated tests.</p>"},{"location":"reference/rocketship/#options","title":"Options","text":"<pre><code>  -h, --help   help for rocketship\n</code></pre>"},{"location":"reference/rocketship/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship get    - Get details of a specific test run</li> <li>rocketship list  - List test runs</li> <li>rocketship run    - Run rocketship tests</li> <li>rocketship start    - Start rocketship the rocketship server</li> <li>rocketship stop  - Stop rocketship the rocketship server</li> <li>rocketship validate  - Validate Rocketship test files against the JSON schema</li> <li>rocketship version    - Print the version number of Rocketship</li> </ul>"},{"location":"reference/rocketship/#auto-generated-by-spf13cobra-on-2-jul-2025","title":"Auto generated by spf13/cobra on 2-Jul-2025","text":""},{"location":"reference/rocketship_get/","title":"get","text":""},{"location":"reference/rocketship_get/#rocketship-get","title":"rocketship get","text":"<p>Get details of a specific test run</p>"},{"location":"reference/rocketship_get/#synopsis","title":"Synopsis","text":"<p>Get detailed information about a specific test run.</p> <p>Examples:   # Get run details   rocketship get abc123def456</p> <p># Get run details with logs   rocketship get abc123def456 --logs</p> <p># Get run details in JSON format   rocketship get abc123def456 --format json</p> <pre><code>rocketship get &lt;run-id&gt; [flags]\n</code></pre>"},{"location":"reference/rocketship_get/#options","title":"Options","text":"<pre><code>  -e, --engine string   Address of the rocketship engine (default \"localhost:7700\")\n      --format string   Output format (table, json, yaml) (default \"table\")\n  -h, --help            help for get\n      --logs            Include logs from the test run\n</code></pre>"},{"location":"reference/rocketship_get/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_get/#auto-generated-by-spf13cobra-on-2-jul-2025","title":"Auto generated by spf13/cobra on 2-Jul-2025","text":""},{"location":"reference/rocketship_list/","title":"list","text":""},{"location":"reference/rocketship_list/#rocketship-list","title":"rocketship list","text":"<p>List test runs</p>"},{"location":"reference/rocketship_list/#synopsis","title":"Synopsis","text":"<p>List test runs with filtering and sorting options.</p> <p>Examples:   # List all recent runs   rocketship list</p> <p># List failed runs   rocketship list --status FAILED</p> <p># List runs for a specific project   rocketship list --project-id my-app</p> <p># List runs from a specific branch   rocketship list --branch feature/new-api</p> <p># List runs with custom limit and ordering   rocketship list --limit 50 --order-by duration --ascending</p> <pre><code>rocketship list [flags]\n</code></pre>"},{"location":"reference/rocketship_list/#options","title":"Options","text":"<pre><code>      --ascending              Sort in ascending order (default: descending)\n      --branch string          Filter by git branch\n  -e, --engine string          Address of the rocketship engine (default \"localhost:7700\")\n      --format string          Output format (table, json, yaml) (default \"table\")\n  -h, --help                   help for list\n      --limit int32            Maximum number of runs to display (default 20)\n      --order-by string        Sort by field (started_at, ended_at, duration) (default \"started_at\")\n      --project-id string      Filter by project ID\n      --schedule-name string   Filter by schedule name\n      --source string          Filter by source (cli-local, ci-branch, ci-main, scheduled)\n      --status string          Filter by status (PENDING, RUNNING, PASSED, FAILED, TIMEOUT)\n</code></pre>"},{"location":"reference/rocketship_list/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_list/#auto-generated-by-spf13cobra-on-2-jul-2025","title":"Auto generated by spf13/cobra on 2-Jul-2025","text":""},{"location":"reference/rocketship_run/","title":"run","text":""},{"location":"reference/rocketship_run/#rocketship-run","title":"rocketship run","text":"<p>Run rocketship tests</p>"},{"location":"reference/rocketship_run/#synopsis","title":"Synopsis","text":"<p>Run rocketship tests from YAML files. Can run a single file or all tests in a directory.</p> <pre><code>rocketship run [flags]\n</code></pre>"},{"location":"reference/rocketship_run/#options","title":"Options","text":"<pre><code>  -a, --auto                      Automatically start and stop the local server for test execution\n      --branch string             Git branch name (auto-detected if not specified)\n      --commit string             Git commit SHA (auto-detected if not specified)\n  -d, --dir string                Path to directory containing test files (will run all rocketship.yaml files recursively)\n  -e, --engine string             Address of the rocketship engine (default \"localhost:7700\")\n  -f, --file string               Path to a single test file (default: rocketship.yaml in current directory)\n  -h, --help                      help for run\n      --metadata stringToString   Additional metadata key=value pairs (default [])\n      --project-id string         Project identifier for test run tracking\n      --schedule-name string      Schedule name for scheduled runs\n      --source string             Run source: cli-local, ci-branch, ci-main, scheduled\n  -t, --timestamp                 Show timestamps in log output\n      --trigger string            Trigger type: manual, webhook, schedule\n  -v, --var stringToString        Set variables (can be used multiple times: --var key=value --var nested.key=value) (default [])\n      --var-file string           Load variables from YAML file\n</code></pre>"},{"location":"reference/rocketship_run/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_run/#auto-generated-by-spf13cobra-on-2-jul-2025","title":"Auto generated by spf13/cobra on 2-Jul-2025","text":""},{"location":"reference/rocketship_start/","title":"Overview","text":""},{"location":"reference/rocketship_start/#rocketship-start","title":"rocketship start","text":"<p>Start rocketship the rocketship server</p>"},{"location":"reference/rocketship_start/#synopsis","title":"Synopsis","text":"<p>Start rocketship components like the server.</p>"},{"location":"reference/rocketship_start/#options","title":"Options","text":"<pre><code>  -h, --help   help for start\n</code></pre>"},{"location":"reference/rocketship_start/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> <li>rocketship start server  - Start the rocketship server</li> </ul>"},{"location":"reference/rocketship_start/#auto-generated-by-spf13cobra-on-2-jul-2025","title":"Auto generated by spf13/cobra on 2-Jul-2025","text":""},{"location":"reference/rocketship_start_server/","title":"start server","text":""},{"location":"reference/rocketship_start_server/#rocketship-start-server","title":"rocketship start server","text":"<p>Start the rocketship server</p>"},{"location":"reference/rocketship_start_server/#synopsis","title":"Synopsis","text":"<p>Start a local rocketship server.</p> <pre><code>rocketship start server [flags]\n</code></pre>"},{"location":"reference/rocketship_start_server/#options","title":"Options","text":"<pre><code>  -b, --background   Start server in background mode\n  -h, --help         help for server\n</code></pre>"},{"location":"reference/rocketship_start_server/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship start    - Start rocketship the rocketship server</li> </ul>"},{"location":"reference/rocketship_start_server/#auto-generated-by-spf13cobra-on-2-jul-2025","title":"Auto generated by spf13/cobra on 2-Jul-2025","text":""},{"location":"reference/rocketship_stop/","title":"Overview","text":""},{"location":"reference/rocketship_stop/#rocketship-stop","title":"rocketship stop","text":"<p>Stop rocketship the rocketship server</p>"},{"location":"reference/rocketship_stop/#synopsis","title":"Synopsis","text":"<p>Stop rocketship components like the server.</p>"},{"location":"reference/rocketship_stop/#options","title":"Options","text":"<pre><code>  -h, --help   help for stop\n</code></pre>"},{"location":"reference/rocketship_stop/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> <li>rocketship stop server    - Stop the rocketship server</li> </ul>"},{"location":"reference/rocketship_stop/#auto-generated-by-spf13cobra-on-2-jul-2025","title":"Auto generated by spf13/cobra on 2-Jul-2025","text":""},{"location":"reference/rocketship_stop_server/","title":"stop server","text":""},{"location":"reference/rocketship_stop_server/#rocketship-stop-server","title":"rocketship stop server","text":"<p>Stop the rocketship server</p>"},{"location":"reference/rocketship_stop_server/#synopsis","title":"Synopsis","text":"<p>Stop the rocketship server and all its components.</p> <pre><code>rocketship stop server [flags]\n</code></pre>"},{"location":"reference/rocketship_stop_server/#options","title":"Options","text":"<pre><code>  -h, --help   help for server\n</code></pre>"},{"location":"reference/rocketship_stop_server/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship stop  - Stop rocketship the rocketship server</li> </ul>"},{"location":"reference/rocketship_stop_server/#auto-generated-by-spf13cobra-on-2-jul-2025","title":"Auto generated by spf13/cobra on 2-Jul-2025","text":""},{"location":"reference/rocketship_validate/","title":"validate","text":""},{"location":"reference/rocketship_validate/#rocketship-validate","title":"rocketship validate","text":"<p>Validate Rocketship test files against the JSON schema</p>"},{"location":"reference/rocketship_validate/#synopsis","title":"Synopsis","text":"<p>Validate one or more Rocketship test files against the JSON schema. This command checks test file syntax, structure, and configuration without executing tests.</p> <p>Examples:   rocketship validate test.yaml                    # Validate a single file   rocketship validate ./tests/                     # Validate all YAML files in a directory   rocketship validate test1.yaml test2.yaml       # Validate multiple files</p> <pre><code>rocketship validate [file_or_directory] [flags]\n</code></pre>"},{"location":"reference/rocketship_validate/#options","title":"Options","text":"<pre><code>  -h, --help   help for validate\n</code></pre>"},{"location":"reference/rocketship_validate/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_validate/#auto-generated-by-spf13cobra-on-2-jul-2025","title":"Auto generated by spf13/cobra on 2-Jul-2025","text":""},{"location":"reference/rocketship_version/","title":"version","text":""},{"location":"reference/rocketship_version/#rocketship-version","title":"rocketship version","text":"<p>Print the version number of Rocketship</p>"},{"location":"reference/rocketship_version/#synopsis","title":"Synopsis","text":"<p>Print the version number of Rocketship CLI.</p> <pre><code>rocketship version [flags]\n</code></pre>"},{"location":"reference/rocketship_version/#options","title":"Options","text":"<pre><code>  -h, --help   help for version\n</code></pre>"},{"location":"reference/rocketship_version/#see-also","title":"SEE ALSO","text":"<ul> <li>rocketship    - Rocketship CLI</li> </ul>"},{"location":"reference/rocketship_version/#auto-generated-by-spf13cobra-on-2-jul-2025","title":"Auto generated by spf13/cobra on 2-Jul-2025","text":""}]}