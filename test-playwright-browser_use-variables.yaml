name: "Playwright & Browser_use Variable Passing Test"
description: "Test that variables can be saved and passed between interwoven playwright and browser_use steps"

tests:
  - name: "Variable passing flow"
    cleanup:
      always:
        - name: "cleanup browser session"
          plugin: playwright
          config:
            role: stop
            session_id: "var-test-{{ .run.id }}"
    steps:
      - name: "start browser"
        plugin: playwright
        config:
          role: start
          session_id: "var-test-{{ .run.id }}"
          headless: false

      - name: "navigate to example.com and save data"
        plugin: playwright
        config:
          role: script
          session_id: "var-test-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("üéØ Navigating to example.com...")
            page.goto("https://example.com")
            expect(page).to_have_url("https://example.com/")

            # Get page data to save
            page_url = page.url
            page_title = page.title()
            heading = page.locator("h1").first.inner_text()

            print(f"üìÑ Page URL: {page_url}")
            print(f"üìÑ Page Title: {page_title}")
            print(f"üìÑ Heading: {heading}")

            # Save variables for next steps
            result = {
              "page_url": page_url,
              "page_title": page_title,
              "heading_text": heading
            }
        save:
          - json_path: ".page_url"
            as: "saved_url"
          - json_path: ".page_title"
            as: "saved_title"
          - json_path: ".heading_text"
            as: "saved_heading"

      - name: "verify with browser_use using playwright variables"
        plugin: browser_use
        config:
          session_id: "var-test-{{ .run.id }}"
          task: |
            You are on a webpage. Verify that:
            1. The main heading on the page says "{{ saved_heading }}"
            2. The page title is "{{ saved_title }}"

            If both conditions are met, report success.
            If either condition is not met, report failure with details about what you found.
          max_steps: 5
          use_vision: true
          llm:
            provider: "openai"
            model: "gpt-4o"
            config:
              OPENAI_API_KEY: "{{ .env.OPENAI_API_KEY }}"

      - name: "verify browser_use completed correctly"
        plugin: playwright
        config:
          role: script
          session_id: "var-test-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("üîç Verifying browser_use completed correctly...")

            # Verify we're still on example.com after browser_use
            current_url = page.url
            print(f"Current URL: {current_url}")
            expect(page).to_have_url("https://example.com/")

            # Verify page still has the expected content
            expect(page.locator("h1")).to_have_text("Example Domain")

            print("‚úÖ browser_use correctly verified the page using playwright variables!")
            print(f"‚úÖ Playwright variables '{{ saved_heading }}' and '{{ saved_title }}' were successfully passed to browser_use")

            result = {"verification": "success"}

      - name: "navigate to IANA and save new data"
        plugin: playwright
        config:
          role: script
          session_id: "var-test-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("üéØ Navigating to IANA...")
            page.goto("https://www.iana.org/")
            expect(page).to_have_url("https://www.iana.org/")

            # Get page data
            iana_url = page.url
            iana_title = page.title()

            print(f"üìÑ IANA URL: {iana_url}")
            print(f"üìÑ IANA Title: {iana_title}")

            result = {
              "iana_url": iana_url,
              "iana_title": iana_title
            }
        save:
          - json_path: ".iana_url"
            as: "iana_url"
          - json_path: ".iana_title"
            as: "iana_title"

      - name: "browser_use verifies IANA using playwright variables"
        plugin: browser_use
        config:
          session_id: "var-test-{{ .run.id }}"
          task: |
            You should be on the IANA (Internet Assigned Numbers Authority) website.
            Verify that:
            1. The URL is {{ iana_url }}
            2. The page title contains "{{ iana_title }}"
            3. There is a heading that says "Internet Assigned Numbers Authority"

            If all conditions are met, report success.
            If any condition is not met, report failure with details.
          max_steps: 5
          use_vision: true
          llm:
            provider: "openai"
            model: "gpt-4o"
            config:
              OPENAI_API_KEY: "{{ .env.OPENAI_API_KEY }}"

      - name: "final verification using all saved variables"
        plugin: playwright
        config:
          role: script
          session_id: "var-test-{{ .run.id }}"
          language: python
          script: |
            from playwright.sync_api import expect

            print("üéâ Final verification using variables from all previous steps...")

            # Variables from first playwright step
            print(f"Example.com URL (from playwright step 1): {{ saved_url }}")
            print(f"Example.com title (from playwright step 1): {{ saved_title }}")
            print(f"Example.com heading (from playwright step 1): {{ saved_heading }}")

            # Variables from second playwright step
            print(f"IANA URL (from playwright step 2): {{ iana_url }}")
            print(f"IANA Title (from playwright step 2): {{ iana_title }}")

            # Verify we're currently on IANA
            expect(page).to_have_url("https://www.iana.org/")

            # Verify all example.com variables are correct
            assert "{{ saved_url }}" == "https://example.com/", f"saved_url mismatch: {{ saved_url }}"
            assert "{{ saved_title }}" == "Example Domain", f"saved_title mismatch: {{ saved_title }}"
            assert "{{ saved_heading }}" == "Example Domain", f"saved_heading mismatch: {{ saved_heading }}"

            # Verify all IANA variables are correct
            assert "{{ iana_url }}" == "https://www.iana.org/", f"iana_url mismatch: {{ iana_url }}"
            assert "Internet Assigned Numbers Authority" in "{{ iana_title }}", f"iana_title mismatch: {{ iana_title }}"

            print("")
            print("‚úÖ All variable passing tests successful!")
            print("‚úÖ Playwright ‚Üí browser_use: WORKS (variables passed in task)")
            print("‚úÖ Playwright ‚Üí Playwright: WORKS (variables saved and reused)")
            print("‚úÖ browser_use used playwright variables to verify page content")
            print("‚úÖ Multiple rounds of variable passing: WORKS")

            result = {"all_tests": "passed"}
