name: Release CLI

on:
  push:
    tags:
      - "v*" # Trigger on version tags

permissions:
  contents: write # Needed for creating releases
  packages: write # Needed for pushing to Docker Hub

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          check-latest: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      - name: Build release artifacts
        run: |
          # Create release artifacts for different platforms
          mkdir -p bin

          # Build CLI binaries
          GOOS=darwin GOARCH=amd64 go build -o bin/rocketship-darwin-amd64 cmd/rocketship/main.go
          GOOS=darwin GOARCH=arm64 go build -o bin/rocketship-darwin-arm64 cmd/rocketship/main.go
          GOOS=linux GOARCH=amd64 go build -o bin/rocketship-linux-amd64 cmd/rocketship/main.go
          GOOS=linux GOARCH=arm64 go build -o bin/rocketship-linux-arm64 cmd/rocketship/main.go
          GOOS=windows GOARCH=amd64 go build -o bin/rocketship-windows-amd64.exe cmd/rocketship/main.go

          # Build worker binaries
          GOOS=darwin GOARCH=amd64 go build -o bin/worker-darwin-amd64 cmd/worker/main.go
          GOOS=darwin GOARCH=arm64 go build -o bin/worker-darwin-arm64 cmd/worker/main.go
          GOOS=linux GOARCH=amd64 go build -o bin/worker-linux-amd64 cmd/worker/main.go
          GOOS=linux GOARCH=arm64 go build -o bin/worker-linux-arm64 cmd/worker/main.go
          GOOS=windows GOARCH=amd64 go build -o bin/worker-windows-amd64.exe cmd/worker/main.go

          # Build engine binaries
          GOOS=darwin GOARCH=amd64 go build -o bin/engine-darwin-amd64 cmd/engine/main.go
          GOOS=darwin GOARCH=arm64 go build -o bin/engine-darwin-arm64 cmd/engine/main.go
          GOOS=linux GOARCH=amd64 go build -o bin/engine-linux-amd64 cmd/engine/main.go
          GOOS=linux GOARCH=arm64 go build -o bin/engine-linux-arm64 cmd/engine/main.go
          GOOS=windows GOARCH=amd64 go build -o bin/engine-windows-amd64.exe cmd/engine/main.go

          # Build auth broker binaries
          GOOS=darwin GOARCH=amd64 go build -o bin/auth-broker-darwin-amd64 cmd/authbroker/main.go
          GOOS=darwin GOARCH=arm64 go build -o bin/auth-broker-darwin-arm64 cmd/authbroker/main.go
          GOOS=linux GOARCH=amd64 go build -o bin/auth-broker-linux-amd64 cmd/authbroker/main.go
          GOOS=linux GOARCH=arm64 go build -o bin/auth-broker-linux-arm64 cmd/authbroker/main.go
          GOOS=windows GOARCH=amd64 go build -o bin/auth-broker-windows-amd64.exe cmd/authbroker/main.go

      - name: Generate checksums
        run: |
          cd bin
          shasum -a 256 * > checksums.txt

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bin/checksums.txt
            bin/rocketship-darwin-amd64
            bin/rocketship-darwin-arm64
            bin/rocketship-linux-amd64
            bin/rocketship-linux-arm64
            bin/rocketship-windows-amd64.exe
            bin/worker-darwin-amd64
            bin/worker-darwin-arm64
            bin/worker-linux-amd64
            bin/worker-linux-arm64
            bin/worker-windows-amd64.exe
            bin/engine-darwin-amd64
            bin/engine-darwin-arm64
            bin/engine-linux-amd64
            bin/engine-linux-arm64
            bin/engine-windows-amd64.exe
            bin/auth-broker-darwin-amd64
            bin/auth-broker-darwin-arm64
            bin/auth-broker-linux-amd64
            bin/auth-broker-linux-arm64
            bin/auth-broker-windows-amd64.exe
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and publish MCP server
        working-directory: ./mcp-server
        run: |
          # Install dependencies
          npm ci

          # Build with embedded knowledge
          npm run build

          # Set version to match release tag (remove 'v' prefix)
          VERSION_NUMBER=${GITHUB_REF#refs/tags/v}
          npm version $VERSION_NUMBER --no-git-tag-version

          # Publish to npm
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build and push CLI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.cli
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          tags: |
            rocketshipai/rocketship:${{ steps.get_version.outputs.VERSION }}
            rocketshipai/rocketship:latest

      - name: Build and push Engine image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.engine
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          tags: |
            rocketshipai/rocketship-engine:${{ steps.get_version.outputs.VERSION }}
            rocketshipai/rocketship-engine:latest

      - name: Build and push Worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.worker
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          tags: |
            rocketshipai/rocketship-worker:${{ steps.get_version.outputs.VERSION }}
            rocketshipai/rocketship-worker:latest

      - name: Build and push Auth broker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.authbroker
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          tags: |
            rocketshipai/rocketship-auth-broker:${{ steps.get_version.outputs.VERSION }}
            rocketshipai/rocketship-auth-broker:latest

      - name: Trigger Go proxy to index new version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          curl -X POST "https://proxy.golang.org/github.com/rocketship-ai/rocketship/@v/${VERSION}.info" || true

  sync-internal-chart:
    needs: release
    runs-on: ubuntu-latest
    env:
      GH_PAT: ${{ secrets.GH_PAT }}
    steps:

      - name: GH_PAT not configured
        if: env.GH_PAT == ''
        run: echo "GH_PAT secret not configured; skipping internal chart sync."

      - name: Skip when GH_PAT missing
        if: env.GH_PAT == ''
        run: exit 0

      - name: Checkout public repository
        uses: actions/checkout@v4

      - name: Checkout internal charts repo
        uses: actions/checkout@v4
        with:
          repository: rocketship-ai/rocketship-internal
          token: ${{ env.GH_PAT }}
          path: internal

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update image tags in internal chart
        id: update
        env:
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          set -euo pipefail
          cd internal

          update_file() {
            local file="$1"
            if [ -f "$file" ]; then
              yq -i '.engine.image.tag = strenv(VERSION)' "$file"
              yq -i '.worker.image.tag = strenv(VERSION)' "$file"
              yq -i '.auth.broker.image.tag = strenv(VERSION)' "$file"
            fi
          }

          update_file charts/rocketship/values-production.yaml
          update_file charts/rocketship/values-github-cloud.yaml
          update_file charts/rocketship/values-github-web.yaml

          if git status --porcelain | grep . >/dev/null; then
            echo "changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create PR in internal repo
        if: steps.update.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ env.GH_PAT }}
          path: internal
          commit-message: "chore: bump rocketship images to ${{ needs.release.outputs.version }}"
          branch: bump/${{ needs.release.outputs.version }}
          delete-branch: true
          title: "Bump Rocketship images to ${{ needs.release.outputs.version }}"
          body: |
            Automated update created from the public release pipeline.
            - engine/worker/auth-broker image tags set to `${{ needs.release.outputs.version }}`.

      - name: No changes detected
        if: steps.update.outputs.changes != 'true'
        run: echo "Internal chart already up to date; no PR created."

  update-homebrew-tap:
    needs: release
    runs-on: ubuntu-latest
    env:
      GH_PAT: ${{ secrets.GH_PAT }}
    steps:
      - name: GH_PAT not configured
        if: env.GH_PAT == ''
        run: echo "GH_PAT secret not configured; skipping tap update."

      - name: Checkout rocketship repo
        if: env.GH_PAT != ''
        uses: actions/checkout@v4
        with:
          path: rocketship

      - name: Fetch release assets JSON
        if: env.GH_PAT != ''
        id: rel
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF#refs/tags/}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          curl -fsSL "https://api.github.com/repos/rocketship-ai/rocketship/releases/tags/${TAG}" -o release.json
          jq -r '.assets[] | .name + " " + .browser_download_url' release.json > assets.txt
          checksums_url=$(awk '$1=="checksums.txt"{print $2}' assets.txt)
          curl -fsSL "$checksums_url" -o checksums.txt
          for target in rocketship-darwin-arm64 rocketship-darwin-amd64 rocketship-linux-arm64 rocketship-linux-amd64; do
            sha=$(awk -v f="$target" '$2==f{print $1}' checksums.txt)
            url=$(awk -v f="$target" '$1==f{print $2}' assets.txt)
            if [ -z "$sha" ] || [ -z "$url" ]; then
              echo "Failed to locate asset metadata for $target" >&2
              exit 1
            fi
            echo "sha_${target//-/_}=$sha" >> "$GITHUB_OUTPUT"
            echo "url_${target//-/_}=$url" >> "$GITHUB_OUTPUT"
          done

      - name: Checkout tap repository
        if: env.GH_PAT != ''
        uses: actions/checkout@v4
        with:
          repository: rocketship-ai/homebrew-tap
          token: ${{ env.GH_PAT }}
          path: tap

      - name: Update formula
        if: env.GH_PAT != ''
        working-directory: tap
        run: ruby ../rocketship/.github/scripts/update_tap.rb
        env:
          TAG: ${{ steps.rel.outputs.tag }}
          URL_ROCKETSHIP_DARWIN_ARM64: ${{ steps.rel.outputs.url_rocketship_darwin_arm64 }}
          SHA_ROCKETSHIP_DARWIN_ARM64: ${{ steps.rel.outputs.sha_rocketship_darwin_arm64 }}
          URL_ROCKETSHIP_DARWIN_AMD64: ${{ steps.rel.outputs.url_rocketship_darwin_amd64 }}
          SHA_ROCKETSHIP_DARWIN_AMD64: ${{ steps.rel.outputs.sha_rocketship_darwin_amd64 }}
          URL_ROCKETSHIP_LINUX_ARM64: ${{ steps.rel.outputs.url_rocketship_linux_arm64 }}
          SHA_ROCKETSHIP_LINUX_ARM64: ${{ steps.rel.outputs.sha_rocketship_linux_arm64 }}
          URL_ROCKETSHIP_LINUX_AMD64: ${{ steps.rel.outputs.url_rocketship_linux_amd64 }}
          SHA_ROCKETSHIP_LINUX_AMD64: ${{ steps.rel.outputs.sha_rocketship_linux_amd64 }}

      - name: Commit and open PR
        if: env.GH_PAT != ''
        working-directory: tap
        run: |
          set -euo pipefail
          git config user.name "rocketship-release-bot"
          git config user.email "release-bot@users.noreply.github.com"
          branch="bump/${{ steps.rel.outputs.tag }}"
          git checkout -b "$branch"
          git add Formula/rocketship.rb
          git commit -m "rocketship ${{ steps.rel.outputs.tag }}: bump formula"
          git push -u origin "$branch"
          gh pr create --fill --title "Update to ${{ steps.rel.outputs.tag }}" --body "Automated tap update"
        env:
          GH_TOKEN: ${{ env.GH_PAT }}
