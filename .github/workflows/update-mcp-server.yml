name: Update MCP Server Knowledge

on:
  push:
    branches: [ main ]
  pull_request:
    types: [closed]
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  update-mcp-server:
    # Only run on main branch pushes or when PRs are merged to main
    if: |
      github.ref == 'refs/heads/main' || 
      (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to detect CLI changes

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          check-latest: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install MCP server dependencies
        working-directory: ./mcp-server
        run: npm ci

      - name: Extract CLI capabilities and rebuild MCP server
        working-directory: ./mcp-server
        run: |
          echo "🔍 Extracting current CLI capabilities..."
          
          # Run CLI introspection to get current capabilities
          node scripts/cli-introspection.js
          
          echo "📦 Rebuilding MCP server with updated knowledge..."
          
          # Rebuild with updated CLI data embedded
          npm run build
          
          echo "✅ MCP server updated with current CLI capabilities"

      - name: Detect significant changes
        id: detect_changes
        working-directory: ./mcp-server
        run: |
          # Check if there were significant changes in CLI or schema
          echo "🔍 Checking for significant changes..."
          
          CHANGES_DETECTED="false"
          
          # Check if CLI version changed
          if git diff --name-only HEAD~1 HEAD | grep -E "(cmd/|internal/|go.mod|go.sum)"; then
            echo "CLI code changes detected"
            CHANGES_DETECTED="true"
          fi
          
          # Check if schema changed
          if git diff --name-only HEAD~1 HEAD | grep -E "internal/dsl/schema.json"; then
            echo "Schema changes detected"
            CHANGES_DETECTED="true"
          fi
          
          # Check if examples changed
          if git diff --name-only HEAD~1 HEAD | grep -E "examples/"; then
            echo "Example changes detected"
            CHANGES_DETECTED="true"
          fi
          
          # Check if documentation changed
          if git diff --name-only HEAD~1 HEAD | grep -E "docs/"; then
            echo "Documentation changes detected"
            CHANGES_DETECTED="true"
          fi
          
          echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT
          echo "Changes detected: $CHANGES_DETECTED"

      - name: Test MCP server
        working-directory: ./mcp-server
        run: |
          echo "🧪 Testing updated MCP server..."
          npm test

      - name: Update package version (if changes detected)
        if: steps.detect_changes.outputs.changes_detected == 'true'
        working-directory: ./mcp-server
        run: |
          # Get current version and increment patch version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Auto-increment patch version for automated updates
          npm version patch --no-git-tag-version
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Publish updated MCP server (if changes detected)
        if: steps.detect_changes.outputs.changes_detected == 'true'
        working-directory: ./mcp-server
        run: |
          echo "📤 Publishing updated MCP server to npm..."
          
          # Set up npm authentication
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          
          # Publish with updated knowledge
          npm publish --access public
          
          echo "✅ MCP server published with version ${{ env.new_version }}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create auto-update commit (if changes detected)
        if: steps.detect_changes.outputs.changes_detected == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add the updated MCP server files
          git add mcp-server/
          
          # Only commit if there are changes
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: auto-update MCP server knowledge

          - Updated CLI introspection data
          - Version: ${{ env.new_version }}
          - Triggered by: ${{ github.event_name }}
          - Commit: ${{ github.sha }}
          
          🤖 Generated automatically by MCP server update workflow"
            
            git push
            echo "✅ Auto-update commit pushed"
          fi

      - name: Create summary
        run: |
          echo "## MCP Server Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes Detected**: ${{ steps.detect_changes.outputs.changes_detected }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.detect_changes.outputs.changes_detected }}" == "true" ]; then
            echo "- **New Version**: ${{ env.new_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Published**: ✅ Yes" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Published**: ⏭️ No changes needed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### What was updated:" >> $GITHUB_STEP_SUMMARY
          echo "- CLI capabilities and help text" >> $GITHUB_STEP_SUMMARY
          echo "- Installation instructions" >> $GITHUB_STEP_SUMMARY
          echo "- Current flags and commands" >> $GITHUB_STEP_SUMMARY
          echo "- Version information" >> $GITHUB_STEP_SUMMARY

  # Separate job to validate the published MCP server
  validate-mcp-server:
    needs: update-mcp-server
    if: needs.update-mcp-server.outputs.changes_detected == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install and test published MCP server
        run: |
          echo "🔍 Testing published MCP server..."
          
          # Wait a moment for npm to propagate
          sleep 30
          
          # Install the latest version
          npm install -g @rocketship/mcp-server@latest
          
          # Basic validation that it loads
          echo "✅ MCP server package installed successfully"